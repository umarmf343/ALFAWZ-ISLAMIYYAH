To enhance the **AlFawz Qur’an Institute** app by adding the **Recitation Rally** game to the **Game Center**, I’ll implement a competitive game where students record recitations for assignments, receive Whisper Tajweed feedback, and earn leaderboard points and badges for top-scoring submissions. This game will build on the existing infrastructure of the **Game Center**, **Tajweed Treasure Hunt**, **Hasanat Hoard**, and **Quranic Quest**, ensuring only students who complete their daily tasks can access it. The UI will be visually stunning, aligning with the app’s spiritual aesthetic (maroon #7A001F, milk #FAF7F2, gold #FFD700 gradients, Framer Motion animations) and drawing inspiration from **Quranly**’s engaging, habit-forming design. The implementation will be fully functional, mobile-responsive, accessible, multilingual, and compatible with cPanel deployment (file-based caching, no Redis). All interactions will be tracked for teacher oversight and admin analytics, seamlessly integrating with existing systems (Assignment, Schedule, Submit, Leaderboard, Gratification, Sujud, Whisper Tajweed, Teacher Dashboard).

---

## Implementation: Recitation Rally Game

### Objective
- Add **Recitation Rally** to the Game Center, accessible via the **"Play Game" button** on the Student Dashboard for students who complete daily tasks.
- Implement **Recitation Rally**:
  - Students record recitations for assignments and submit them for Whisper Tajweed feedback.
  - Scores are based on tajweed accuracy (e.g., 0-100 from Whisper Tajweed), earning Hasanat and leaderboard points.
  - Top-scoring recitations (e.g., ≥90) earn badges (e.g., “Tajweed Star”) and leaderboard boosts.
  - Sujud prompts are triggered for Sajda ayahs in assignments.
- Create a **beautiful UI/UX**:
  - Animated leaderboard with gold accents, Amiri font for Arabic, Lora for English.
  - Framer Motion animations for submission feedback, badge unlocks, and confetti effects.
  - Mobile responsiveness, accessibility, and multilingual support.
- Ensure **full tracking** of recitation submissions, scores, and badge awards for teacher/admin analytics.
- Integrate with existing systems for a cohesive experience.

---

## Phase 1: Backend Enhancements

### Step 1.1: Update Database Models
Leverage existing tables (`games`, `game_sessions`) and enhance them to support **Recitation Rally**.

1. **Recitation Submissions Table** (track recitation attempts):
   ```bash
   php artisan make:migration create_recitation_submissions_table
   ```
   ```php
   // database/migrations/xxxx_create_recitation_submissions_table.php
   Schema::create('recitation_submissions', function (Blueprint $table) {
       $table->id();
       $table->foreignId('user_id')->constrained()->onDelete('cascade');
       $table->foreignId('game_session_id')->constrained('game_sessions')->onDelete('cascade');
       $table->foreignId('assignment_id')->constrained()->onDelete('cascade');
       $table->string('recitation_url'); // S3 URL
       $table->json('whisper_feedback')->nullable(); // e.g., {"accuracy": 85, "notes": "Improve Ikhfa"}
       $table->integer('score')->default(0); // Based on Whisper Tajweed (0-100)
       $table->integer('hasanat_earned')->default(0);
       $table->timestamp('submitted_at');
       $table->timestamps();
   });
   ```

2. **Update Game Sessions Table** (add recitation-specific fields):
   ```bash
   php artisan make:migration add_fields_to_game_sessions_table
   ```
   ```php
   Schema::table('game_sessions', function (Blueprint $table) {
       $table->integer('total_submissions')->default(0);
       $table->integer('average_score')->default(0);
   });
   ```

3. **Run Migrations**: `php artisan migrate`.

4. **Seed Recitation Rally Game**:
   ```php
   // database/seeders/GameSeeder.php
   namespace Database\Seeders;

   use App\Models\Game;
   use App\Models\Badge;

   class GameSeeder extends Seeder
   {
       public function run()
       {
           $game = Game::create([
               'name' => 'recitation_rally',
               'title' => 'Recitation Rally',
               'description' => 'Compete by submitting recitations and earn top scores with perfect tajweed!',
               'icon' => 'https://example.com/icons/recitation.png',
               'hasanat_per_win' => 100,
               'difficulty' => 'beginner',
           ]);

           Badge::create([
               'type' => 'game_completion',
               'title' => 'Tajweed Star',
               'description' => 'Achieved a high score in Recitation Rally!',
               'hasanat' => 100,
           ]);
       }
   }
   ```
   Run: `php artisan db:seed --class=GameSeeder`.

### Step 1.2: Backend APIs
Update `app/Http/Controllers/Api/GameController.php`.

1. **Start Recitation Rally Session**:
   ```php
   // app/Http/Controllers/Api/GameController.php
   public function startRecitationRallySession(Request $request)
   {
       $user = auth()->user();
       $game = Game::where('name', 'recitation_rally')->firstOrFail();
       $session = GameSession::create([
           'user_id' => $user->id,
           'game_id' => $game->id,
           'score' => 0,
           'hasanat_earned' => 0,
           'hints_used' => 0,
           'time_spent' => 0,
           'total_submissions' => 0,
           'average_score' => 0,
       ]);

       $assignments = Assignment::whereHas('class.members', fn($q) => $q->where('user_id', $user->id))
           ->where('due_date', '>=', now()->startOfDay())
           ->get();
       return response()->json([
           'session_id' => $session->id,
           'assignments' => $assignments,
       ]);
   }
   ```

2. **Submit Recitation**:
   ```php
   public function submitRecitation(Request $request, GameSession $session)
   {
       $this->authorize('update', $session);
       $validated = $request->validate([
           'assignment_id' => 'required|exists:assignments,id',
           'recitation' => 'required|file|mimes:mp3,wav',
           'time_spent' => 'integer',
       ]);

       $recitationUrl = $request->file('recitation')->store('recitations', 's3');
       $whisperFeedback = $this->processWhisperTajweed($recitationUrl); // Assume existing Whisper integration
       $score = $whisperFeedback['accuracy'];
       $hasanatEarned = $score >= 80 ? 20 : 10;

       $submission = RecitationSubmission::create([
           'user_id' => auth()->id(),
           'game_session_id' => $session->id,
           'assignment_id' => $validated['assignment_id'],
           'recitation_url' => $recitationUrl,
           'whisper_feedback' => $whisperFeedback,
           'score' => $score,
           'hasanat_earned' => $hasanatEarned,
           'submitted_at' => now(),
       ]);

       $session->update([
           'score' => $session->score + $score,
           'hasanat_earned' => $session->hasanat_earned + $hasanatEarned,
           'time_spent' => $session->time_spent + ($validated['time_spent'] ?? 0),
           'total_submissions' => $session->total_submissions + 1,
           'average_score' => RecitationSubmission::where('game_session_id', $session->id)->avg('score'),
       ]);

       $user = auth()->user();
       $user->hasanat_total += $hasanatEarned;
       $user->save();

       // Award badge for high score
       if ($score >= 90) {
           Badge::create([
               'user_id' => $user->id,
               'type' => 'game_completion',
               'title' => 'Tajweed Star',
               'description' => 'Achieved a high score in Recitation Rally!',
               'hasanat' => $session->game->hasanat_per_win,
               'awarded_at' => now(),
           ]);
           Notification::send($user->classes()->first()->teacher, new HighScoreAchieved($session));
       }

       // Check for Sajda ayahs
       $assignment = Assignment::find($validated['assignment_id']);
       if ($assignment->surah_id && $assignment->ayah_ids) {
           foreach ($assignment->ayah_ids as $ayahId) {
               if (SajdaAyah::where('surah_id', $assignment->surah_id)->where('ayah_id', $ayahId)->exists()) {
                   SujudEvent::create([
                       'user_id' => $user->id,
                       'surah_id' => $assignment->surah_id,
                       'ayah_id' => $ayahId,
                       'context' => 'game',
                   ]);
               }
           }
       }

       $this->updateLeaderboardEntry($user);
       return response()->json([
           'score' => $score,
           'hasanat_earned' => $hasanatEarned,
           'whisper_feedback' => $whisperFeedback,
       ]);
   }
   ```

3. **Get Recitation Rally Analytics**:
   ```php
   public function getRecitationRallyAnalytics(Request $request, ClassModel $class)
   {
       $this->authorize('view', $class);
       return [
           'total_submissions' => RecitationSubmission::whereHas('user.classes', fn($q) => $q->where('class_id', $class->id))->count(),
           'average_score' => RecitationSubmission::whereHas('user.classes', fn($q) => $q->where('class_id', $class->id))->avg('score'),
           'high_scores' => RecitationSubmission::whereHas('user.classes', fn($q) => $q->where('class_id', $class->id))
               ->where('score', '>=', 90)->count(),
           'sujud_prompts' => SujudEvent::whereHas('user.classes', fn($q) => $q->where('class_id', $class->id))
               ->where('context', 'game')->count(),
       ];
   }
   ```

**Routes** (update `routes/api.php`):
```php
Route::middleware('auth:sanctum')->prefix('student')->group(function () {
    Route::post('/games/recitation_rally/start', [GameController::class, 'startRecitationRallySession']);
    Route::post('/games/recitation_rally/sessions/{gameSession}', [GameController::class, 'submitRecitation']);
});
Route::middleware('auth:sanctum')->prefix('teacher')->group(function () {
    Route::get('/classes/{class}/recitation-rally-analytics', [GameController::class, 'getRecitationRallyAnalytics']);
});
```

**Notifications** (reuse `HighScoreAchieved` from previous games):
   ```php
   // app/Notifications/HighScoreAchieved.php (already implemented)
   ```

---

## Phase 2: Frontend Implementation

### Step 2.1: Update Game Center
Update `src/app/dashboard/games/page.tsx` to include Recitation Rally:
```tsx
import { useQuery } from '@tanstack/react-query';
import api from '@/lib/api';
import { motion } from 'framer-motion';
import { FaGamepad } from 'react-icons/fa';
import Link from 'next/link';
import { useTranslations } from 'next-intl';

export default function GameCenter() {
    const t = useTranslations('games');
    const { data: games } = useQuery(['games'], () => api.get('/student/games').then(res => res.data));

    return (
        <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
            className="bg-gradient-to-br from-maroon to-milk min-h-screen p-4 md:p-8 relative"
            style={{ backgroundImage: 'url(/images/quran-bg.png)', backgroundSize: 'cover' }}
            role="region"
            aria-label={t('game_center')}
        >
            <motion.div
                className="absolute inset-0 bg-gradient-to-br from-maroon/50 to-milk/50"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
            />
            <h1 className="text-4xl font-bold text-gold font-amiri mb-6 relative z-10">{t('game_center')}</h1>
            <p className="text-milk font-lora mb-4 relative z-10">{t('welcome_message')}</p>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 relative z-10">
                {games?.map((game: any) => (
                    <Link key={game.id} href={`/dashboard/games/${game.name}`}>
                        <motion.div
                            initial={{ y: 20, opacity: 0 }}
                            animate={{ y: 0, opacity: 1 }}
                            whileHover={{ scale: 1.05, boxShadow: '0 0 15px rgba(255, 215, 0, 0.5)' }}
                            className="bg-white p-6 rounded-lg shadow-lg border-2 border-gold"
                        >
                            <img src={game.icon} alt={game.title} className="w-full h-40 object-cover rounded mb-4" />
                            <h2 className="text-2xl font-bold text-maroon font-amiri">{game.title}</h2>
                            <p className="text-milk font-lora">{game.description}</p>
                            <p className="text-gold mt-2">{t('hasanat')}: {game.hasanat_per_win}</p>
                            <p className="text-maroon mt-1">{t('difficulty')}: {game.difficulty}</p>
                        </motion.div>
                    </Link>
                ))}
            </div>
        </motion.div>
    );
}
```

### Step 2.2: Recitation Rally Game
Create `src/app/dashboard/games/recitation_rally/page.tsx`:
```tsx
import { useState, useEffect } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import api from '@/lib/api';
import { motion } from 'framer-motion';
import Confetti from 'react-confetti';
import { FaMicrophone, FaCheck } from 'react-icons/fa';
import { useTranslations } from 'next-intl';
import { CircularProgressbar } from 'react-circular-progressbar';
import 'react-circular-progressbar/dist/styles.css';

export default function RecitationRally() {
    const t = useTranslations('games.recitation_rally');
    const [showConfetti, setShowConfetti] = useState(false);
    const [recitation, setRecitation] = useState<File | null>(null);
    const [selectedAssignment, setSelectedAssignment] = useState<any>(null);
    const [hasanatTotal, setHasanatTotal] = useState(0);
    const [timeSpent, setTimeSpent] = useState(0);

    useEffect(() => {
        const timer = setInterval(() => setTimeSpent(prev => prev + 1), 1000);
        return () => clearInterval(timer);
    }, []);

    const { data: sessionData, refetch } = useQuery(['recitation_rally_session'], () => 
        api.post('/student/games/recitation_rally/start').then(res => res.data)
    );
    const submitRecitation = useMutation({
        mutationFn: () => {
            const formData = new FormData();
            formData.append('assignment_id', selectedAssignment.id);
            formData.append('recitation', recitation!);
            formData.append('time_spent', timeSpent.toString());
            return api.post(`/student/games/recitation_rally/sessions/${sessionData.session_id}`, formData);
        },
        onSuccess: (data) => {
            setHasanatTotal(prev => prev + data.data.hasanat_earned);
            if (data.data.score >= 90) {
                setShowConfetti(true);
                setTimeout(() => setShowConfetti(false), 3000);
            }
            setRecitation(null);
            setSelectedAssignment(null);
            setTimeSpent(0);
            refetch();
        },
    });

    if (!sessionData) return <div>Loading...</div>;

    return (
        <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
            className="bg-gradient-to-br from-maroon to-milk min-h-screen p-4 md:p-8 relative"
            style={{ backgroundImage: 'url(/images/rally-bg.png)', backgroundSize: 'cover' }}
            role="region"
            aria-label={t('title')}
        >
            {showConfetti && <Confetti />}
            <motion.div
                className="absolute inset-0 bg-gradient-to-br from-maroon/50 to-milk/50"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
            />
            <h1 className="text-4xl font-bold text-gold font-amiri mb-6 relative z-10">{t('title')}</h1>
            <div className="flex justify-between mb-4 relative z-10">
                <p className="text-milk font-lora">{t('hasanat_total')}: {hasanatTotal}</p>
                <div className="w-16 h-16">
                    <CircularProgressbar
                        value={sessionData.total_submissions * 10}
                        text={`${sessionData.total_submissions}`}
                        styles={{ path: { stroke: '#FFD700' }, text: { fill: '#7A001F' } }}
                    />
                </div>
            </div>
            <motion.div
                initial={{ scale: 0.9 }}
                animate={{ scale: 1 }}
                className="bg-white p-6 rounded-lg shadow-lg border-2 border-gold relative z-10"
            >
                <FaMicrophone className="text-6xl text-gold mx-auto mb-4" />
                <p className="text-2xl font-bold text-maroon font-amiri text-center">{t('submit_recitation')}</p>
                <p className="text-milk font-lora text-center">{t('select_assignment')}</p>
                <select
                    value={selectedAssignment?.id || ''}
                    onChange={(e) => setSelectedAssignment(sessionData.assignments.find((a: any) => a.id === Number(e.target.value)))}
                    className="p-2 rounded w-full mt-2 font-lora"
                    aria-label={t('select_assignment')}
                >
                    <option value="">{t('choose_assignment')}</option>
                    {sessionData.assignments.map((assignment: any) => (
                        <option key={assignment.id} value={assignment.id}>
                            {assignment.title}
                        </option>
                    ))}
                </select>
                {selectedAssignment && (
                    <div className="mt-4">
                        <p className="text-maroon font-amiri">{selectedAssignment.surah_id}: Ayahs {selectedAssignment.ayah_ids.join(', ')}</p>
                        <input
                            type="file"
                            accept="audio/*"
                            onChange={(e) => setRecitation(e.target.files?.[0] || null)}
                            className="p-2 rounded w-full mt-2"
                            aria-label={t('record_recitation')}
                        />
                        <motion.button
                            whileHover={{ scale: 1.05 }}
                            onClick={() => recitation && submitRecitation.mutate()}
                            className="p-4 bg-maroon text-milk rounded-lg mt-2 w-full"
                            disabled={!recitation || !selectedAssignment || submitRecitation.isLoading}
                        >
                            <FaCheck className="inline mr-2" /> {t('submit_recitation')}
                        </motion.button>
                    </div>
                )}
                {submitRecitation.data && (
                    <motion.div
                        initial={{ y: 20, opacity: 0 }}
                        animate={{ y: 0, opacity: 1 }}
                        className="mt-4"
                    >
                        <p className="text-maroon font-lora">{t('score')}: {submitRecitation.data.data.score}</p>
                        <p className="text-milk font-lora">{t('feedback')}: {submitRecitation.data.data.whisper_feedback.notes}</p>
                    </motion.div>
                )}
            </motion.div>
            <div className="mt-6 relative z-10">
                <h2 className="text-2xl font-bold text-gold font-amiri">{t('leaderboard')}</h2>
                <motion.div
                    initial={{ x: -20, opacity: 0 }}
                    animate={{ x: 0, opacity: 1 }}
                    className="bg-white p-4 rounded-lg shadow-lg"
                >
                    <p className="text-milk font-lora">{t('average_score')}: {Math.round(sessionData.average_score)}</p>
                    <p className="text-milk font-lora">{t('total_submissions')}: {sessionData.total_submissions}</p>
                </motion.div>
            </div>
        </motion.div>
    );
}
```

### Step 2.3: UI/UX Enhancements
- **Inspired by Quranly**:
  - **Leaderboard Panel**: A compact leaderboard showing top scores, animated with gold glows.
  - **Recitation Interface**: Clean, card-based design with animated feedback (e.g., score reveal).
  - **Motivational Feedback**: Pop-ups like “MashaAllah, your recitation shines!” for scores ≥90.
  - **Sound Effects**: Soft adhan chimes play on submission (optional, toggleable).
- **Gradients**: Use `bg-gradient-to-br from-maroon to-milk` for the page, `bg-white` or `bg-gold` for cards, `text-gold` for accents.
- **Animations**:
  - Submission Card Entry: Scale up with `initial={{ scale: 0.9 }}`.
  - Feedback Reveal: Slide-in with `initial={{ y: 20, opacity: 0 }}`.
  - Confetti: Trigger on high scores (≥90) and badge awards.
- **Typography**:
  - **Amiri**: For Arabic text and titles (Quranic aesthetic).
  - **Lora**: For descriptions and feedback (clean, readable).
- **Responsive**: Stack elements on mobile (`flex-col`), use `max-w-md` for desktop centering.
- **Accessibility**:
  - Add `aria-label` to buttons and inputs (e.g., “Submit Recitation”).
  - Use `role="region"` for game sections, `role="button"` for interactive elements.
  - Ensure keyboard navigation for dropdowns and file inputs.
- **Multilingual**: Use `next-intl` for labels:
  ```json
  // games/en.json
  {
      "recitation_rally": {
          "title": "Recitation Rally",
          "hasanat_total": "Total Hasanat",
          "submit_recitation": "Submit Recitation",
          "record_recitation": "Record Recitation",
          "select_assignment": "Select Assignment",
          "choose_assignment": "Choose an Assignment",
          "score": "Score",
          "feedback": "Feedback",
          "leaderboard": "Leaderboard",
          "average_score": "Average Score",
          "total_submissions": "Total Submissions"
      }
  }
  ```
- **Offline**: Cache session data and submissions in IndexedDB:
  ```tsx
  import { openDB } from 'idb';
  const dbPromise = openDB('alfawz', 1, {
      upgrade(db) {
          db.createObjectStore('recitation_submissions', { keyPath: 'id', autoIncrement: true });
      },
  });
  useEffect(() => {
      if (navigator.onLine) {
          dbPromise.then(db => db.getAll('recitation_submissions')).then(submissions => {
              submissions.forEach(s => submitRecitation.mutateAsync(s));
          });
      }
  }, []);
  ```

---

## Phase 3: Integration with Existing Systems
1. **Assignments**: Recitations are tied to active assignments, ensuring relevance.
2. **Submit System**: Recitation submissions use Whisper Tajweed for feedback, stored in `recitation_submissions`.
3. **Leaderboard**: Update entries with recitation scores and Hasanat via `updateLeaderboardEntry`.
4. **Gratification**: Award “Tajweed Star” badge for high scores (≥90).
5. **Sujud**: Prompt Sujud events for Sajda ayahs in assignments.

**Example Integration**:
```tsx
// src/app/dashboard/games/recitation_rally/page.tsx
useEffect(() => {
    if (submitRecitation.isSuccess && selectedAssignment?.surah_id) {
        api.post('/student/sujud/check', {
            surah_id: selectedAssignment.surah_id,
            ayah_id: selectedAssignment.ayah_ids[0],
        });
    }
}, [submitRecitation.isSuccess]);
```

---

## Phase 4: Teacher and Admin Integration
1. **Teacher Dashboard** (`src/components/teacher/AnalyticsOverview.tsx`):
   ```tsx
   <div>
       <p className="text-gold">Recitation Rally Submissions</p>
       <p className="text-2xl">{analytics?.total_submissions}</p>
       <p className="text-milk">Average Score: {Math.round(analytics?.average_score)}</p>
       <p className="text-milk">High Scores (≥90): {analytics?.high_scores}</p>
       <p className="text-milk">Sujud Prompts: {analytics?.sujud_prompts}</p>
   </div>
   ```

2. **Admin Dashboard** (`src/app/admin/analytics/page.tsx`):
   ```tsx
   <p>Recitation Rally Submissions: {analytics?.data_json.total_submissions}</p>
   <p>High Scores: {analytics?.data_json.high_scores}</p>
   ```

3. **Admin Analytics** (`app/Console/Commands/GenerateAnalyticsSnapshot.php`):
   ```php
   $data['total_submissions'] = RecitationSubmission::where('submitted_at', '>=', now()->subWeek())->count();
   $data['high_scores'] = RecitationSubmission::where('submitted_at', '>=', now()->subWeek())
       ->where('score', '>=', 90)->count();
   ```

---

## Phase 5: Testing and Deployment
1. **Testing**:
   - Backend: `php artisan make:test RecitationRallyTest`:
     ```php
     public function test_start_recitation_rally_session()
     {
         $student = User::factory()->create()->assignRole('student');
         $response = $this->actingAs($student, 'sanctum')->postJson('/api/student/games/recitation_rally/start');
         $response->assertStatus(200)->assertJsonStructure(['session_id', 'assignments']);
         $this->assertDatabaseHas('game_sessions', ['user_id' => $student->id]);
     }

     public function test_submit_recitation()
     {
         $student = User::factory()->create()->assignRole('student');
         $session = GameSession::factory()->create(['user_id' => $student->id]);
         $assignment = Assignment::factory()->create();
         $response = $this->actingAs($student, 'sanctum')->postJson("/api/student/games/recitation_rally/sessions/{$session->id}", [
             'assignment_id' => $assignment->id,
             'recitation' => UploadedFile::fake()->create('recitation.mp3', 100),
         ]);
         $response->assertStatus(200);
         $this->assertDatabaseHas('recitation_submissions', ['assignment_id' => $assignment->id]);
     }
     ```
   - Frontend: Jest for components:
     ```tsx
     test('displays recitation rally', async () => {
         render(<RecitationRally />);
         expect(screen.getByText('Recitation Rally')).toBeInTheDocument();
         await waitFor(() => expect(screen.getByText('Select Assignment')).toBeInTheDocument());
     });
     ```
2. **Deployment**:
   - Build frontend: `npm run build && npm run export`, copy `out/` to `al-fawz-backend/public/app`.
   - Ensure `.htaccess` routes `/dashboard/games/*` to `app/index.html`.
   - Add cron in cPanel: `* * * * * php /home/username/public_html/artisan queue:work --stop-when-empty`.

---

## Phase 6: Optimizations and Notes
- **Performance**:
  - Cache session and assignment data for 24 hours.
  - Use lazy loading for leaderboard and feedback displays.
  - Optimize Whisper Tajweed jobs with retry logic (`tries: 3`).
- **Error Handling**:
  - Handle invalid file uploads with user-friendly messages.
  - Queue submissions offline, sync on reconnect.
- **Engagement** (Quranly-inspired):
  - Show “SubhanAllah, your recitation is exceptional!” for scores ≥90.
  - Animate score reveal with gold sparkles and confetti.
  - Award badges for consistent submissions (e.g., 5 submissions in a week).
- **UI Perfection**:
  - Leaderboard with glowing gold accents for top performers.
  - Recitation card with elegant typography and smooth feedback animations.
  - Background with subtle Quranic calligraphy enhances spiritual feel.
- **Tracking**: Teachers see submission counts, scores, and Sujud prompts; admins track engagement metrics.
- **Offline**: Store submissions and feedback in IndexedDB.

This implementation delivers a fully functional **Recitation Rally** game with a stunning, spiritually enriching UI, integrated with the Game Center and existing systems. Only students who complete daily tasks can access it, ensuring habit-building. If you need UI mockups, additional enhancements (e.g., competitive class modes), or further games, let me know!
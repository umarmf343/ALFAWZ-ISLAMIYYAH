To enhance the **AlFawz Qur’an Institute** app by adding the **Quranic Champions** game to the **Game Center**, I’ll implement a multiplayer game where students within the same class compete in recitation, memorization, and tafsir challenges, earning Hasanat, gold-themed badges, and leaderboard points for top performances. This game will build on the existing infrastructure of the **Game Center**, **Tajweed Treasure Hunt**, **Hasanat Hoard**, **Quranic Quest**, **Recitation Rally**, and **Tajweed Tic-Tac-Toe**, ensuring only students who complete their daily tasks can access it. The UI will be visually stunning, aligning with the app’s spiritual aesthetic (maroon #7A001F, milk #FAF7F2, gold #FFD700 gradients, Framer Motion animations) and drawing inspiration from **Quranly**’s engaging, habit-forming design. The implementation will be fully functional, mobile-responsive, accessible, multilingual, and compatible with cPanel deployment (file-based caching, no Redis). All interactions will be tracked for teacher oversight and admin analytics, seamlessly integrating with existing systems (Assignment, Schedule, Submit, Leaderboard, Gratification, Sujud, Whisper Tajweed, Teacher Dashboard).

Drawing from your previous interest in the **AlFawz Qur’an Institute** app’s development (e.g., Laravel/Next.js stack, Paystack integration, and OpenAI Whisper for recitation feedback), I’ll ensure **Quranic Champions** leverages these technologies and aligns with the app’s transformative spiritual journey.

---

## Implementation: Quranic Champions Game

### Objective
- Add **Quranic Champions** to the Game Center, accessible via the **"Play Game" button** on the Student Dashboard for students who complete daily tasks.
- Implement **Quranic Champions**:
  - Multiplayer competition (up to 4 students per class) with rounds of recitation, memorization, and tafsir challenges.
  - Recitation: Submit audio, scored by Whisper Tajweed (0-100).
  - Memorization: Answer questions about ayah content or sequence.
  - Tafsir: Answer multiple-choice questions on ayah meanings.
  - Winners (top scorer per session) earn gold-themed badges (e.g., “Quranic Victor”) and leaderboard points.
  - Sujud prompts triggered for Sajda ayahs in challenges.
- Create a **beautiful UI/UX**:
  - Animated challenge interface with gold-accented progress bars, Amiri font for Arabic, Lora for English.
  - Framer Motion animations for round transitions, badge unlocks, and confetti effects.
  - Mobile responsiveness, accessibility, and multilingual support.
- Ensure **full tracking** of challenge completions, scores, and badge awards for teacher/admin analytics.
- Integrate with existing systems for a cohesive experience.

---

## Phase 1: Backend Enhancements

### Step 1.1: Update Database Models
Leverage existing tables (`games`, `game_sessions`, `tajweed_questions`) and add new ones to support **Quranic Champions**.

1. **Champion Sessions Table** (track multiplayer sessions):
   ```bash
   php artisan make:migration create_champion_sessions_table
   ```
   ```php
   // database/migrations/xxxx_create_champion_sessions_table.php
   Schema::create('champion_sessions', function (Blueprint $table) {
       $table->id();
       $table->foreignId('game_session_id')->constrained('game_sessions')->onDelete('cascade');
       $table->foreignId('class_id')->constrained()->onDelete('cascade');
       $table->json('player_ids'); // e.g., [1, 2, 3, 4]
       $table->string('status')->default('active'); // active, completed
       $table->foreignId('winner_id')->nullable()->constrained('users')->onDelete('set null');
       $table->integer('round')->default(1);
       $table->string('current_challenge_type')->nullable(); // recitation, memorization, tafsir
       $table->timestamps();
   });
   ```

2. **Champion Challenges Table** (track individual challenge responses):
   ```bash
   php artisan make:migration create_champion_challenges_table
   ```
   ```php
   Schema::create('champion_challenges', function (Blueprint $table) {
       $table->id();
       $table->foreignId('champion_session_id')->constrained()->onDelete('cascade');
       $table->foreignId('user_id')->constrained()->onDelete('cascade');
       $table->foreignId('assignment_id')->nullable()->constrained()->onDelete('set null');
       $table->foreignId('tajweed_question_id')->nullable()->constrained()->onDelete('set null');
       $table->string('challenge_type'); // recitation, memorization, tafsir
       $table->string('recitation_url')->nullable(); // S3 URL
       $table->json('whisper_feedback')->nullable(); // e.g., {"accuracy": 85, "notes": "Improve Ikhfa"}
       $table->string('answer')->nullable();
       $table->integer('score')->default(0); // 0-100
       $table->integer('hasanat_earned')->default(0);
       $table->timestamp('submitted_at')->nullable();
       $table->timestamps();
   });
   ```

3. **Run Migrations**: `php artisan migrate`.

4. **Seed Quranic Champions Game**:
   ```php
   // database/seeders/GameSeeder.php
   namespace Database\Seeders;

   use App\Models\Game;
   use App\Models\Badge;

   class GameSeeder extends Seeder
   {
       public function run()
       {
           $game = Game::create([
               'name' => 'quranic_champions',
               'title' => 'Quranic Champions',
               'description' => 'Compete in recitation, memorization, and tafsir challenges to become the Quranic Champion!',
               'icon' => 'https://example.com/icons/champions.png',
               'hasanat_per_win' => 150,
               'difficulty' => 'intermediate',
           ]);

           Badge::create([
               'type' => 'game_completion',
               'title' => 'Quranic Victor',
               'description' => 'Won a Quranic Champions session!',
               'hasanat' => 150,
           ]);
       }
   }
   ```
   Run: `php artisan db:seed --class=GameSeeder`.

### Step 1.2: Backend APIs
Update `app/Http/Controllers/Api/GameController.php`.

1. **Start Quranic Champions Session**:
   ```php
   // app/Http/Controllers/Api/GameController.php
   public function startQuranicChampionsSession(Request $request)
   {
       $validated = $request->validate([
           'player_ids' => 'required|array|max:4|exists:users,id',
       ]);

       $user = auth()->user();
       $game = Game::where('name', 'quranic_champions')->firstOrFail();
       $class = $user->classes()->firstOrFail();

       // Ensure all players are in the same class
       if (User::whereIn('id', $validated['player_ids'])->whereDoesntHave('classes', fn($q) => $q->where('id', $class->id))->exists()) {
           return response()->json(['error' => 'All players must be in the same class'], 400);
       }

       $session = GameSession::create([
           'user_id' => $user->id,
           'game_id' => $game->id,
           'score' => 0,
           'hasanat_earned' => 0,
           'hints_used' => 0,
           'time_spent' => 0,
       ]);

       $championSession = ChampionSession::create([
           'game_session_id' => $session->id,
           'class_id' => $class->id,
           'player_ids' => array_unique(array_merge([$user->id], $validated['player_ids'])),
           'status' => 'active',
           'current_challenge_type' => 'recitation',
       ]);

       $assignments = Assignment::where('class_id', $class->id)
           ->where('due_date', '>=', now()->startOfDay())
           ->inRandomOrder()
           ->take(3)
           ->get();

       $questions = TajweedQuestion::whereHas('assignment', fn($q) => $q->where('class_id', $class->id))
           ->inRandomOrder()
           ->take(6)
           ->get();

       return response()->json([
           'session_id' => $session->id,
           'champion_session_id' => $championSession->id,
           'players' => User::whereIn('id', $championSession->player_ids)->get(['id', 'name']),
           'assignments' => $assignments,
           'questions' => $questions,
           'current_challenge_type' => $championSession->current_challenge_type,
           'round' => $championSession->round,
       ]);
   }
   ```

2. **Submit Challenge Response**:
   ```php
   public function submitChampionChallenge(Request $request, GameSession $session, ChampionSession $championSession)
   {
       $this->authorize('update', $session);
       $validated = $request->validate([
           'challenge_type' => 'required|in:recitation,memorization,tafsir',
           'assignment_id' => 'required_if:challenge_type,recitation|exists:assignments,id',
           'question_id' => 'required_if:challenge_type,memorization,tafsir|exists:tajweed_questions,id',
           'recitation' => 'required_if:challenge_type,recitation|file|mimes:mp3,wav',
           'answer' => 'required_if:challenge_type,memorization,tafsir|string',
           'time_spent' => 'integer',
       ]);

       if ($championSession->status !== 'active') {
           return response()->json(['error' => 'Session is not active'], 400);
       }

       $score = 0;
       $hasanatEarned = 0;
       $whisperFeedback = null;
       $recitationUrl = null;

       if ($validated['challenge_type'] === 'recitation') {
           $recitationUrl = $request->file('recitation')->store('recitations', 's3');
           $whisperFeedback = $this->processWhisperTajweed($recitationUrl); // Assume existing Whisper integration
           $score = $whisperFeedback['accuracy'];
           $hasanatEarned = $score >= 80 ? 20 : 10;
       } elseif ($validated['challenge_type'] === 'memorization' || $validated['challenge_type'] === 'tafsir') {
           $question = TajweedQuestion::findOrFail($validated['question_id']);
           $score = $question->correct_option === $validated['answer'] ? 100 : 0;
           $hasanatEarned = $score === 100 ? 15 : 0;
       }

       $challenge = ChampionChallenge::create([
           'champion_session_id' => $championSession->id,
           'user_id' => auth()->id(),
           'assignment_id' => $validated['assignment_id'] ?? null,
           'tajweed_question_id' => $validated['question_id'] ?? null,
           'challenge_type' => $validated['challenge_type'],
           'recitation_url' => $recitationUrl,
           'whisper_feedback' => $whisperFeedback,
           'answer' => $validated['answer'] ?? null,
           'score' => $score,
           'hasanat_earned' => $hasanatEarned,
           'submitted_at' => now(),
       ]);

       $session->update([
           'score' => $session->score + $score,
           'hasanat_earned' => $session->hasanat_earned + $hasanatEarned,
           'time_spent' => $session->time_spent + ($validated['time_spent'] ?? 0),
       ]);

       $user = auth()->user();
       $user->hasanat_total += $hasanatEarned;
       $user->save();

       // Check if round is complete (all players submitted)
       $submissions = ChampionChallenge::where('champion_session_id', $championSession->id)
           ->where('submitted_at', '>=', $championSession->updated_at)
           ->count();
       $nextRound = $submissions >= count(json_decode($championSession->player_ids));

       if ($nextRound) {
           $challengeTypes = ['recitation', 'memorization', 'tafsir'];
           $currentIndex = array_search($championSession->current_challenge_type, $challengeTypes);
           $nextChallengeType = $challengeTypes[($currentIndex + 1) % 3];
           $championSession->update([
               'round' => $championSession->round + 1,
               'current_challenge_type' => $championSession->round < 3 ? $nextChallengeType : null,
               'status' => $championSession->round >= 3 ? 'completed' : 'active',
           ]);

           if ($championSession->round >= 3) {
               $scores = ChampionChallenge::where('champion_session_id', $championSession->id)
                   ->groupBy('user_id')
                   ->selectRaw('user_id, SUM(score) as total_score')
                   ->pluck('total_score', 'user_id');
               $winnerId = $scores->sortDesc()->keys()->first();
               $championSession->update(['winner_id' => $winnerId]);

               $winner = User::find($winnerId);
               $winner->hasanat_total += $session->game->hasanat_per_win;
               $winner->save();
               Badge::create([
                   'user_id' => $winnerId,
                   'type' => 'game_completion',
                   'title' => 'Quranic Victor',
                   'description' => 'Won a Quranic Champions session!',
                   'hasanat' => $session->game->hasanat_per_win,
                   'awarded_at' => now(),
               ]);
               Notification::send($winner->classes()->first()->teacher, new HighScoreAchieved($session));
           }
       }

       // Check for Sajda ayahs
       if ($validated['challenge_type'] === 'recitation' && $validated['assignment_id']) {
           $assignment = Assignment::find($validated['assignment_id']);
           foreach ($assignment->ayah_ids as $ayahId) {
               if (SajdaAyah::where('surah_id', $assignment->surah_id)->where('ayah_id', $ayahId)->exists()) {
                   SujudEvent::create([
                       'user_id' => $user->id,
                       'surah_id' => $assignment->surah_id,
                       'ayah_id' => $ayahId,
                       'context' => 'game',
                   ]);
               }
           }
       } elseif ($validated['challenge_type'] === 'memorization' || $validated['challenge_type'] === 'tafsir') {
           $question = TajweedQuestion::find($validated['question_id']);
           if ($question->surah_id && $question->ayah_id && SajdaAyah::where('surah_id', $question->surah_id)->where('ayah_id', $question->ayah_id)->exists()) {
               SujudEvent::create([
                   'user_id' => $user->id,
                   'surah_id' => $question->surah_id,
                   'ayah_id' => $question->ayah_id,
                   'context' => 'game',
               ]);
           }
       }

       $this->updateLeaderboardEntry($user);
       return response()->json([
           'score' => $score,
           'hasanat_earned' => $hasanatEarned,
           'whisper_feedback' => $whisperFeedback,
           'round' => $championSession->round,
           'status' => $championSession->status,
       ]);
   }
   ```

3. **Get Quranic Champions Analytics**:
   ```php
   public function getQuranicChampionsAnalytics(Request $request, ClassModel $class)
   {
       $this->authorize('view', $class);
       $studentStats = User::whereHas('classes', fn($q) => $q->where('class_id', $class->id))
           ->withCount([
               'champion_challenges as total_challenges',
               'champion_challenges as recitation_challenges' => fn($q) => $q->where('challenge_type', 'recitation'),
               'champion_challenges as memorization_challenges' => fn($q) => $q->where('challenge_type', 'memorization'),
               'champion_challenges as tafsir_challenges' => fn($q) => $q->where('challenge_type', 'tafsir'),
               'champion_sessions as wins' => fn($q) => $q->where('status', 'completed')->whereColumn('winner_id', 'users.id'),
           ])
           ->get()
           ->map(fn($user) => [
               'name' => $user->name,
               'total_challenges' => $user->total_challenges,
               'recitation_accuracy' => ChampionChallenge::where('user_id', $user->id)->where('challenge_type', 'recitation')->avg('score'),
               'memorization_accuracy' => ChampionChallenge::where('user_id', $user->id)->where('challenge_type', 'memorization')->avg('score'),
               'tafsir_accuracy' => ChampionChallenge::where('user_id', $user->id)->where('challenge_type', 'tafsir')->avg('score'),
               'wins' => $user->wins,
           ]);

       return [
           'total_sessions' => ChampionSession::where('class_id', $class->id)->count(),
           'average_score' => ChampionChallenge::whereHas('champion_session', fn($q) => $q->where('class_id', $class->id))->avg('score'),
           'wins' => ChampionSession::where('class_id', $class->id)->whereNotNull('winner_id')->count(),
           'sujud_prompts' => SujudEvent::whereHas('user.classes', fn($q) => $q->where('class_id', $class->id))
               ->where('context', 'game')->count(),
           'student_stats' => $studentStats,
       ];
   }
   ```

**Routes** (update `routes/api.php`):
```php
Route::middleware('auth:sanctum')->prefix('student')->group(function () {
    Route::post('/games/quranic_champions/start', [GameController::class, 'startQuranicChampionsSession']);
    Route::post('/games/quranic_champions/sessions/{gameSession}/champions/{championSession}', [GameController::class, 'submitChampionChallenge']);
});
Route::middleware('auth:sanctum')->prefix('teacher')->group(function () {
    Route::get('/classes/{class}/quranic-champions-analytics', [GameController::class, 'getQuranicChampionsAnalytics']);
});
```

**Notifications** (reuse `HighScoreAchieved` from previous games and add challenge-specific notification):
   ```php
   // app/Notifications/ChallengeCompleted.php
   namespace App\Notifications;

   use App\Models\ChampionChallenge;
   use Illuminate\Notifications\Messages\MailMessage;
   use Illuminate\Notifications\Notification;

   class ChallengeCompleted extends Notification
   {
       public function __construct(public ChampionChallenge $challenge) {}

       public function via($notifiable)
       {
           return ['mail', 'database'];
       }

       public function toMail($notifiable)
       {
           return (new MailMessage)
               ->subject('Challenge Completed!')
               ->line("You completed a {$this->challenge->challenge_type} challenge in Quranic Champions!")
               ->action('View Progress', url('/dashboard'));
       }

       public function toArray($notifiable)
       {
           return [
               'challenge_id' => $this->challenge->id,
               'type' => $this->challenge->challenge_type,
               'score' => $this->challenge->score,
               'hasanat_earned' => $this->challenge->hasanat_earned,
           ];
       }
   }
   ```

---

## Phase 2: Frontend Implementation

### Step 2.1: Update Game Center
Update `src/app/dashboard/games/page.tsx` to include Quranic Champions:
```tsx
import { useQuery } from '@tanstack/react-query';
import api from '@/lib/api';
import { motion } from 'framer-motion';
import { FaGamepad } from 'react-icons/fa';
import Link from 'next/link';
import { useTranslations } from 'next-intl';

export default function GameCenter() {
    const t = useTranslations('games');
    const { data: games } = useQuery(['games'], () => api.get('/student/games').then(res => res.data));

    return (
        <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
            className="bg-gradient-to-br from-maroon to-milk min-h-screen p-4 md:p-8 relative"
            style={{ backgroundImage: 'url(/images/quran-bg.png)', backgroundSize: 'cover' }}
            role="region"
            aria-label={t('game_center')}
        >
            <motion.div
                className="absolute inset-0 bg-gradient-to-br from-maroon/50 to-milk/50"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
            />
            <h1 className="text-4xl font-bold text-gold font-amiri mb-6 relative z-10">{t('game_center')}</h1>
            <p className="text-milk font-lora mb-4 relative z-10">{t('welcome_message')}</p>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 relative z-10">
                {games?.map((game: any) => (
                    <Link key={game.id} href={`/dashboard/games/${game.name}`}>
                        <motion.div
                            initial={{ y: 20, opacity: 0 }}
                            animate={{ y: 0, opacity: 1 }}
                            whileHover={{ scale: 1.05, boxShadow: '0 0 15px rgba(255, 215, 0, 0.5)' }}
                            className="bg-white p-6 rounded-lg shadow-lg border-2 border-gold"
                        >
                            <img src={game.icon} alt={game.title} className="w-full h-40 object-cover rounded mb-4" />
                            <h2 className="text-2xl font-bold text-maroon font-amiri">{game.title}</h2>
                            <p className="text-milk font-lora">{game.description}</p>
                            <p className="text-gold mt-2">{t('hasanat')}: {game.hasanat_per_win}</p>
                            <p className="text-maroon mt-1">{t('difficulty')}: {game.difficulty}</p>
                        </motion.div>
                    </Link>
                ))}
            </div>
        </motion.div>
    );
}
```

### Step 2.2: Quranic Champions Game
Create `src/app/dashboard/games/quranic_champions/page.tsx`:
```tsx
import { useState, useEffect } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import api from '@/lib/api';
import { motion } from 'framer-motion';
import Confetti from 'react-confetti';
import { FaMicrophone, FaCheck, FaTrophy } from 'react-icons/fa';
import { useTranslations } from 'next-intl';
import { CircularProgressbar } from 'react-circular-progressbar';
import 'react-circular-progressbar/dist/styles.css';
import Pusher from 'pusher-js';
import { useAuth } from '@/hooks/useAuth';

export default function QuranicChampions() {
    const t = useTranslations('games.quranic_champions');
    const { user } = useAuth();
    const [showConfetti, setShowConfetti] = useState(false);
    const [playerIds, setPlayerIds] = useState<number[]>([]);
    const [recitation, setRecitation] = useState<File | null>(null);
    const [answer, setAnswer] = useState('');
    const [selectedAssignment, setSelectedAssignment] = useState<any>(null);
    const [selectedQuestion, setSelectedQuestion] = useState<any>(null);
    const [hasanatTotal, setHasanatTotal] = useState(0);
    const [timeSpent, setTimeSpent] = useState(0);

    useEffect(() => {
        const timer = setInterval(() => setTimeSpent(prev => prev + 1), 1000);
        return () => clearInterval(timer);
    }, []);

    const { data: classmates, isLoading: classmatesLoading } = useQuery(['classmates'], () => 
        api.get('/student/classmates').then(res => res.data)
    );
    const { data: sessionData, refetch } = useQuery(
        ['champions_session', playerIds],
        () => api.post('/student/games/quranic_champions/start', { player_ids: playerIds }).then(res => res.data),
        { enabled: playerIds.length > 0 }
    );
    const submitChallenge = useMutation({
        mutationFn: () => {
            const formData = new FormData();
            formData.append('challenge_type', sessionData.current_challenge_type);
            if (sessionData.current_challenge_type === 'recitation') {
                formData.append('assignment_id', selectedAssignment.id);
                formData.append('recitation', recitation!);
            } else {
                formData.append('question_id', selectedQuestion.id);
                formData.append('answer', answer);
            }
            formData.append('time_spent', timeSpent.toString());
            return api.post(`/student/games/quranic_champions/sessions/${sessionData.session_id}/champions/${sessionData.champion_session_id}`, formData);
        },
        onSuccess: (data) => {
            setHasanatTotal(prev => prev + data.data.hasanat_earned);
            if (data.data.status === 'completed' && data.data.winner_id === user.id) {
                setShowConfetti(true);
                setTimeout(() => setShowConfetti(false), 3000);
            }
            setRecitation(null);
            setAnswer('');
            setSelectedAssignment(null);
            setSelectedQuestion(null);
            setTimeSpent(0);
            refetch();
        },
    });

    useEffect(() => {
        if (sessionData) {
            const pusher = new Pusher('your-pusher-key', { cluster: 'your-cluster' });
            const channel = pusher.subscribe(`champions.${sessionData.champion_session_id}`);
            channel.bind('App\\Events\\ChallengeSubmitted', () => refetch());
            return () => pusher.disconnect();
        }
    }, [sessionData]);

    if (!classmates || classmatesLoading) return <div>Loading...</div>;

    return (
        <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
            className="bg-gradient-to-br from-maroon to-milk min-h-screen p-4 md:p-8 relative"
            style={{ backgroundImage: 'url(/images/champions-bg.png)', backgroundSize: 'cover', animation: 'pulse 10s infinite' }}
            role="region"
            aria-label={t('title')}
        >
            {showConfetti && <Confetti />}
            <motion.div
                className="absolute inset-0 bg-gradient-to-br from-maroon/50 to-milk/50"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
            />
            <h1 className="text-4xl font-bold text-gold font-amiri mb-6 relative z-10">{t('title')}</h1>
            <div className="flex justify-between mb-4 relative z-10">
                <p className="text-milk font-lora">{t('hasanat_total')}: {hasanatTotal}</p>
                <div className="w-16 h-16">
                    <CircularProgressbar
                        value={sessionData?.round * 33.33 || 0}
                        text={`Round ${sessionData?.round || 1}/3`}
                        styles={{ path: { stroke: '#FFD700' }, text: { fill: '#7A001F' } }}
                    />
                </div>
            </div>
            {!sessionData && (
                <motion.div
                    initial={{ scale: 0.9 }}
                    animate={{ scale: 1 }}
                    className="bg-white p-6 rounded-lg shadow-lg border-2 border-gold relative z-10"
                >
                    <p className="text-maroon font-lora">{t('select_players')}</p>
                    <select
                        multiple
                        value={playerIds.map(String)}
                        onChange={(e) => setPlayerIds(Array.from(e.target.selectedOptions, option => Number(option.value)).slice(0, 3))}
                        className="p-2 rounded w-full mt-2 font-lora"
                        aria-label={t('select_players')}
                    >
                        {classmates.map((classmate: any) => (
                            <option key={classmate.id} value={classmate.id}>{classmate.name}</option>
                        ))}
                    </select>
                    <motion.button
                        whileHover={{ scale: 1.05 }}
                        onClick={() => playerIds.length > 0 && api.post('/student/games/quranic_champions/start', { player_ids: playerIds })}
                        className="p-4 bg-maroon text-milk rounded-lg mt-4 w-full"
                        disabled={playerIds.length === 0}
                    >
                        {t('start_game')}
                    </motion.button>
                </motion.div>
            )}
            {sessionData && (
                <motion.div
                    initial={{ scale: 0.9 }}
                    animate={{ scale: 1 }}
                    className="bg-white p-6 rounded-lg shadow-lg border-2 border-gold relative z-10"
                >
                    <FaTrophy className="text-6xl text-gold mx-auto mb-4" />
                    <p className="text-2xl font-bold text-maroon font-amiri text-center">{t('round')} {sessionData.round}: {sessionData.current_challenge_type}</p>
                    {sessionData.status === 'completed' && (
                        <p className="text-2xl font-lora text-center mt-4">
                            {t('winner', { winner: sessionData.players.find((p: any) => p.id === sessionData.winner_id)?.name })}
                        </p>
                    )}
                    {sessionData.status === 'active' && (
                        <motion.div
                            key={sessionData.current_challenge_type}
                            initial={{ x: 100, opacity: 0 }}
                            animate={{ x: 0, opacity: 1 }}
                            transition={{ duration: 0.5 }}
                            className="mt-4"
                        >
                            {sessionData.current_challenge_type === 'recitation' && (
                                <div>
                                    <p className="text-maroon font-lora">{t('select_assignment')}</p>
                                    <select
                                        value={selectedAssignment?.id || ''}
                                        onChange={(e) => setSelectedAssignment(sessionData.assignments.find((a: any) => a.id === Number(e.target.value)))}
                                        className="p-2 rounded w-full mt-2 font-lora"
                                        aria-label={t('select_assignment')}
                                    >
                                        <option value="">{t('choose_assignment')}</option>
                                        {sessionData.assignments.map((assignment: any) => (
                                            <option key={assignment.id} value={assignment.id}>{assignment.title}</option>
                                        ))}
                                    </select>
                                    {selectedAssignment && (
                                        <div>
                                            <p className="text-maroon font-amiri">Ayahs: {selectedAssignment.ayah_ids.join(', ')}</p>
                                            <input
                                                type="file"
                                                accept="audio/*"
                                                onChange={(e) => setRecitation(e.target.files?.[0] || null)}
                                                className="p-2 rounded w-full mt-2"
                                                aria-label={t('record_recitation')}
                                            />
                                            <motion.button
                                                whileHover={{ scale: 1.05 }}
                                                onClick={() => recitation && submitChallenge.mutate()}
                                                className="p-4 bg-maroon text-milk rounded-lg mt-2 w-full"
                                                disabled={!recitation || !selectedAssignment || submitChallenge.isLoading}
                                            >
                                                <FaMicrophone className="inline mr-2" /> {t('submit_recitation')}
                                            </motion.button>
                                        </div>
                                    )}
                                </div>
                            )}
                            {(sessionData.current_challenge_type === 'memorization' || sessionData.current_challenge_type === 'tafsir') && (
                                <div>
                                    <p className="text-maroon font-lora">{t('select_question')}</p>
                                    <select
                                        value={selectedQuestion?.id || ''}
                                        onChange={(e) => setSelectedQuestion(sessionData.questions.find((q: any) => q.id === Number(e.target.value)))}
                                        className="p-2 rounded w-full mt-2 font-lora"
                                        aria-label={t('select_question')}
                                    >
                                        <option value="">{t('choose_question')}</option>
                                        {sessionData.questions.map((question: any) => (
                                            <option key={question.id} value={question.id}>{question.rule}</option>
                                        ))}
                                    </select>
                                    {selectedQuestion && (
                                        <div>
                                            <p className="text-maroon font-amiri">{selectedQuestion.ayah_text}</p>
                                            <p className="text-milk font-lora">{selectedQuestion.rule}</p>
                                            <div className="grid grid-cols-2 gap-2 mt-2">
                                                {selectedQuestion.options.map((option: string) => (
                                                    <motion.button
                                                        key={option}
                                                        whileHover={{ scale: 1.05 }}
                                                        onClick={() => setAnswer(option)}
                                                        className={`p-2 rounded ${answer === option ? 'bg-gold text-maroon' : 'bg-maroon text-milk'}`}
                                                    >
                                                        {option}
                                                    </motion.button>
                                                ))}
                                            </div>
                                            <motion.button
                                                whileHover={{ scale: 1.05 }}
                                                onClick={() => answer && submitChallenge.mutate()}
                                                className="p-4 bg-maroon text-milk rounded-lg mt-4 w-full"
                                                disabled={!answer || !selectedQuestion || submitChallenge.isLoading}
                                            >
                                                <FaCheck className="inline mr-2" /> {t('submit_answer')}
                                            </motion.button>
                                        </div>
                                    )}
                                </div>
                            )}
                        </motion.div>
                    )}
                    <div className="mt-6">
                        <h2 className="text-2xl font-bold text-gold font-amiri">{t('players')}</h2>
                        {sessionData.players.map((player: any) => (
                            <motion.div
                                key={player.id}
                                initial={{ x: -20, opacity: 0 }}
                                animate={{ x: 0, opacity: 1 }}
                                className="p-4 bg-white rounded-lg mt-2"
                            >
                                <p className="font-bold font-amiri">{player.name}</p>
                                <p className="font-lora">{t('score')}: {ChampionChallenge::where('champion_session_id', sessionData.champion_session_id)->where('user_id', player.id)->sum('score')}</p>
                            </motion.div>
                        ))}
                    </div>
                </motion.div>
            )}
        </motion.div>
    );
}
```

### Step 2.3: UI/UX Enhancements
- **Inspired by Quranly**:
  - **Challenge Interface**: Card-based design with animated progress bars for rounds and scores.
  - **Player Leaderboard**: Real-time score updates with gold glows for top performers.
  - **Motivational Feedback**: Pop-ups like “MashaAllah, you’re a Quranic Champion!” for high scores or wins.
  - **Sound Effects**: Soft adhan chimes play on challenge completion or wins (optional, toggleable).
- **Gradients**: Use `bg-gradient-to-br from-maroon to-milk` for the page, `bg-white` or `bg-gold` for cards, `text-gold` for accents.
- **Animations**:
  - Challenge Entry: Slide-in with `initial={{ x: 100, opacity: 0 }}`.
  - Score Updates: Pulse effect on player scores.
  - Confetti: Trigger on session wins and badge awards.
- **Typography**:
  - **Amiri**: For Arabic text and titles (Quranic aesthetic).
  - **Lora**: For descriptions and questions (clean, readable).
- **Responsive**: Stack cards on mobile (`flex-col`), use `max-w-md` for desktop centering.
- **Accessibility**:
  - Add `aria-label` to buttons and inputs (e.g., “Submit Recitation”).
  - Use `role="region"` for game sections, `role="button"` for interactive elements.
  - Ensure keyboard navigation for dropdowns, file inputs, and answer buttons.
- **Multilingual**: Use `next-intl` for labels:
  ```json
  // games/en.json
  {
      "quranic_champions": {
          "title": "Quranic Champions",
          "hasanat_total": "Total Hasanat",
          "select_players": "Select Players (up to 3)",
          "start_game": "Start Game",
          "round": "Round",
          "select_assignment": "Select Assignment",
          "choose_assignment": "Choose an Assignment",
          "select_question": "Select Question",
          "choose_question": "Choose a Question",
          "record_recitation": "Record Recitation",
          "submit_recitation": "Submit Recitation",
          "submit_answer": "Submit Answer",
          "players": "Players",
          "score": "Score",
          "winner": "Winner: {winner}"
      }
  }
  ```
- **Offline**: Cache session and challenge data in IndexedDB:
  ```tsx
  import { openDB } from 'idb';
  const dbPromise = openDB('alfawz', 1, {
      upgrade(db) {
          db.createObjectStore('champion_challenges', { keyPath: 'id', autoIncrement: true });
      },
  });
  const storeChallenge = async (challenge: any) => {
      const db = await dbPromise;
      await db.put('champion_challenges', { ...challenge, id: Date.now() });
  };
  const syncChallenges = async () => {
      const db = await dbPromise;
      const challenges = await db.getAll('champion_challenges');
      for (const challenge of challenges) {
          await submitChallenge.mutateAsync(challenge);
          await db.delete('champion_challenges', challenge.id);
      }
  };
  useEffect(() => {
      if (navigator.onLine) syncChallenges();
      window.addEventListener('online', syncChallenges);
      return () => window.removeEventListener('online', syncChallenges);
  }, []);
  ```

### Step 2.4: Real-Time Updates
- Use **Pusher** for real-time challenge submissions:
  ```php
  // app/Events/ChallengeSubmitted.php
  namespace App\Events;

  use App\Models\ChampionSession;
  use Illuminate\Broadcasting\Channel;
  use Illuminate\Broadcasting\InteractsWithSockets;
  use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
  use Illuminate\Foundation\Events\Dispatchable;

  class ChallengeSubmitted implements ShouldBroadcast
  {
      use Dispatchable, InteractsWithSockets;

      public function __construct(public ChampionSession $championSession) {}

      public function broadcastOn()
      {
          return new Channel('champions.' . $this->championSession->id);
      }

      public function broadcastWith()
      {
          return [
              'round' => $this->championSession->round,
              'current_challenge_type' => $this->championSession->current_challenge_type,
              'status' => $this->championSession->status,
          ];
      }
  }
  ```
- Dispatch in `submitChampionChallenge`:
  ```php
  event(new ChallengeSubmitted($championSession));
  ```

---

## Phase 3: Integration with Existing Systems
1. **Assignments**: Recitation challenges use assignments; memorization/tafsir use `tajweed_questions`.
2. **Submit System**: Recitations use Whisper Tajweed for scoring, stored in `champion_challenges`.
3. **Leaderboard**: Update entries with challenge scores and Hasanat via `updateLeaderboardEntry`.
4. **Gratification**: Award “Quranic Victor” badge for session wins.
5. **Sujud**: Prompt Sujud events for Sajda ayahs in challenges.
6. **Class-Based Competitions**: Track wins in `champion_sessions` for class leaderboards (reuse `competition_points` from **Tajweed Tic-Tac-Toe** enhancements).

**Example Integration**:
```tsx
// src/app/dashboard/games/quranic_champions/page.tsx
useEffect(() => {
    if (submitChallenge.isSuccess && (selectedAssignment?.surah_id || selectedQuestion?.surah_id)) {
        api.post('/student/sujud/check', {
            surah_id: selectedAssignment?.surah_id || selectedQuestion?.surah_id,
            ayah_id: selectedAssignment?.ayah_ids[0] || selectedQuestion?.ayah_id,
        });
    }
}, [submitChallenge.isSuccess]);
```

---

## Phase 4: Teacher and Admin Integration
1. **Teacher Dashboard** (`src/components/teacher/AnalyticsOverview.tsx`):
   ```tsx
   <div>
       <p className="text-gold">Quranic Champions Stats</p>
       <p className="text-2xl">{analytics?.total_sessions} Sessions</p>
       <p className="text-milk">Average Score: {Math.round(analytics?.average_score)}</p>
       <p className="text-milk">Wins: {analytics?.wins}</p>
       {analytics?.student_stats.map((student: any) => (
           <motion.div key={student.name} className="p-4 bg-white rounded-lg mt-2">
               <p className="font-bold font-amiri">{student.name}</p>
               <p className="font-lora">Recitation: {Math.round(student.recitation_accuracy)}%</p>
               <p className="font-lora">Memorization: {Math.round(student.memorization_accuracy)}%</p>
               <p className="font-lora">Tafsir: {Math.round(student.tafsir_accuracy)}%</p>
               <p className="font-lora">Wins: {student.wins}</p>
           </motion.div>
       ))}
   </div>
   ```

2. **Admin Dashboard** (`src/app/admin/analytics/page.tsx`):
   ```tsx
   <p>Quranic Champions Sessions: {analytics?.data_json.total_sessions}</p>
   <p>Wins: {analytics?.data_json.wins}</p>
   <p>Top Class: {analytics?.data_json.top_class?.name} ({analytics?.data_json.top_class?.competition_points} points)</p>
   ```

3. **Admin Analytics** (`app/Console/Commands/GenerateAnalyticsSnapshot.php`):
   ```php
   $data['total_sessions'] = ChampionSession::where('created_at', '>=', now()->subWeek())->count();
   $data['wins'] = ChampionSession::where('created_at', '>=', now()->subWeek())->whereNotNull('winner_id')->count();
   ```

---

## Phase 5: Testing and Deployment
1. **Testing**:
   - Backend: `php artisan make:test QuranicChampionsTest`:
     ```php
     public function test_start_champions_session()
     {
         $student1 = User::factory()->create()->assignRole('student');
         $student2 = User::factory()->create()->assignRole('student');
         $class = ClassModel::factory()->create();
         $class->members()->attach([$student1->id, $student2->id]);
         $response = $this->actingAs($student1, 'sanctum')->postJson('/api/student/games/quranic_champions/start', [
             'player_ids' => [$student2->id],
         ]);
         $response->assertStatus(200)->assertJsonStructure(['session_id', 'champion_session_id', 'players']);
         $this->assertDatabaseHas('champion_sessions', ['class_id' => $class->id]);
     }

     public function test_submit_challenge()
     {
         $student = User::factory()->create()->assignRole('student');
         $session = GameSession::factory()->create(['user_id' => $student->id]);
         $championSession = ChampionSession::factory()->create(['game_session_id' => $session->id]);
         $assignment = Assignment::factory()->create();
         $response = $this->actingAs($student, 'sanctum')->postJson("/api/student/games/quranic_champions/sessions/{$session->id}/champions/{$championSession->id}", [
             'challenge_type' => 'recitation',
             'assignment_id' => $assignment->id,
             'recitation' => UploadedFile::fake()->create('recitation.mp3', 100),
         ]);
         $response->assertStatus(200);
         $this->assertDatabaseHas('champion_challenges', ['champion_session_id' => $championSession->id]);
     }
     ```
   - Frontend: Jest for components:
     ```tsx
     test('displays quranic champions', async () => {
         render(<QuranicChampions />);
         expect(screen.getByText('Quranic Champions')).toBeInTheDocument();
         await waitFor(() => expect(screen.getByText('Select Players')).toBeInTheDocument());
     });
     ```
2. **Deployment**:
   - Build frontend: `npm run build && npm run export`, copy `out/` to `al-fawz-backend/public/app`.
   - Ensure `.htaccess` routes `/dashboard/games/*` to `app/index.html`.
   - Add Pusher configuration to `.env`:
     ```env
     PUSHER_APP_ID=your-app-id
     PUSHER_APP_KEY=your-app-key
     PUSHER_APP_SECRET=your-app-secret
     PUSHER_APP_CLUSTER=your-cluster
     ```
   - Add cron in cPanel: `* * * * * php /home/username/public_html/artisan queue:work --stop-when-empty`.

---

## Phase 6: Optimizations and Notes
- **Performance**:
  - Cache session and challenge data for 24 hours.
  - Use lazy loading for player cards and challenge assets.
  - Optimize Whisper Tajweed jobs with retry logic (`tries: 3`).
- **Error Handling**:
  - Handle invalid player selections or file uploads with user-friendly messages.
  - Queue challenge submissions offline, sync on reconnect.
- **Engagement** (Quranly-inspired):
  - Show “SubhanAllah, you’re shining!” for high scores (≥90).
  - Animate score updates with gold sparkles and confetti on wins.
  - Award badges for consistent participation (e.g., 3 sessions in a week).
- **UI Perfection**:
  - Challenge cards with glowing gold borders for active rounds.
  - Player leaderboard with animated score bars and elegant typography.
  - Background with subtle Quranic calligraphy and pulsing animation.
- **Tracking**: Teachers see per-student performance across challenge types; admins track class engagement and wins.
- **Offline**: Store submissions and scores in IndexedDB for seamless syncing.

This implementation delivers a fully functional **Quranic Champions** game with a stunning, spiritually enriching UI, integrated with the Game Center and existing systems. Only students who complete daily tasks can access it, ensuring habit-building. If you need UI mockups, additional enhancements (e.g., difficulty levels, AI opponents), or further games, let me know!
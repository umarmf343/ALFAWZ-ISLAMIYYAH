To enhance the **AlFawz Qur’an Institute** app by adding the **Memorization Marathon** game to the **Game Center**, I’ll implement a long-term challenge where students memorize a selected surah over weeks, with milestones for each ayah block, earning Hasanat and badges upon completion. Progress will be tracked within the existing memorization system, ensuring only students who complete their daily tasks can participate. The implementation will align with the app’s spiritual aesthetic (maroon #7A001F, milk #FAF7F2, gold #FFD700 gradients, Framer Motion animations) and draw inspiration from **Quranly**’s engaging, habit-forming design. It will be fully functional, mobile-responsive, accessible, multilingual, and compatible with cPanel deployment (file-based caching, no Redis). All interactions will be tracked for teacher oversight and admin analytics, integrating seamlessly with existing systems (Assignment, Schedule, Submit, Leaderboard, Gratification, Sujud, Whisper Tajweed, Teacher Dashboard).

Building on your prior interest in the **AlFawz Qur’an Institute** app (e.g., Laravel/Next.js stack, OpenAI Whisper for recitation feedback, Paystack integration, and games like **Tajweed Tic-Tac-Toe** and **Quranic Champions**), I’ll ensure **Memorization Marathon** leverages these technologies and complements the app’s transformative spiritual journey.

---

## Implementation: Memorization Marathon Game

### Objective
- Add **Memorization Marathon** to the Game Center, accessible via the **"Play Game" button** on the Student Dashboard for students who complete daily tasks.
- Implement **Memorization Marathon**:
  - Students select a surah and commit to memorizing it over weeks (e.g., 4–8 weeks based on surah length).
  - Milestones are set for blocks of ayahs (e.g., 5–10 ayahs per milestone).
  - Students submit recitation audio for each milestone, scored by Whisper Tajweed (0–100).
  - Correct recitations (≥80 score) unlock the next milestone, earning Hasanat.
  - Completion of the surah earns a badge (e.g., “Surah Master”) and leaderboard points.
  - Sujud prompts are triggered for Sajda ayahs in milestones.
- Create a **beautiful UI/UX**:
  - Animated progress tracker with gold-accented milestone markers, Amiri font for Arabic, Lora for English.
  - Framer Motion animations for milestone unlocks, badge awards, and confetti effects.
  - Mobile responsiveness, accessibility, and multilingual support.
- Ensure **full tracking** of milestone completions, recitation scores, and badge awards for teacher/admin analytics.
- Integrate with existing systems, particularly the memorization system, for a cohesive experience.

---

## Phase 1: Backend Enhancements

### Step 1.1: Update Database Models
Leverage existing tables (`games`, `game_sessions`, `assignments`, `sajda_ayahs`) and add new ones to support **Memorization Marathon**.

1. **Marathon Sessions Table** (track long-term memorization challenges):
   ```bash
   php artisan make:migration create_marathon_sessions_table
   ```
   ```php
   // database/migrations/xxxx_create_marathon_sessions_table.php
   Schema::create('marathon_sessions', function (Blueprint $table) {
       $table->id();
       $table->foreignId('game_session_id')->constrained('game_sessions')->onDelete('cascade');
       $table->foreignId('user_id')->constrained('users')->onDelete('cascade');
       $table->foreignId('surah_id')->constrained('surahs')->onDelete('cascade');
       $table->integer('total_ayahs');
       $table->integer('current_milestone')->default(1);
       $table->json('milestone_ayahs'); // e.g., [[1,5], [6,10], ...]
       $table->string('status')->default('active'); // active, completed
       $table->timestamp('started_at')->useCurrent();
       $table->timestamp('completed_at')->nullable();
       $table->integer('hasanat_earned')->default(0);
       $table->timestamps();
   });
   ```

2. **Marathon Milestones Table** (track milestone submissions):
   ```bash
   php artisan make:migration create_marathon_milestones_table
   ```
   ```php
   Schema::create('marathon_milestones', function (Blueprint $table) {
       $table->id();
       $table->foreignId('marathon_session_id')->constrained()->onDelete('cascade');
       $table->integer('milestone_number');
       $table->json('ayah_ids'); // e.g., [1,2,3,4,5]
       $table->string('recitation_url')->nullable(); // S3 URL
       $table->json('whisper_feedback')->nullable(); // e.g., {"accuracy": 85, "notes": "Improve Idgham"}
       $table->integer('score')->default(0); // 0–100
       $table->integer('hasanat_earned')->default(0);
       $table->timestamp('submitted_at')->nullable();
       $table->boolean('is_approved')->default(false);
       $table->timestamps();
   });
   ```

3. **Run Migrations**: `php artisan migrate`.

4. **Seed Memorization Marathon Game**:
   ```php
   // database/seeders/GameSeeder.php
   namespace Database\Seeders;

   use App\Models\Game;
   use App\Models\Badge;

   class GameSeeder extends Seeder
   {
       public function run()
       {
           $game = Game::create([
               'name' => 'memorization_marathon',
               'title' => 'Memorization Marathon',
               'description' => 'Memorize a surah over weeks, mastering ayah blocks to earn badges!',
               'icon' => 'https://example.com/icons/marathon.png',
               'hasanat_per_win' => 200,
               'difficulty' => 'advanced',
           ]);

           Badge::create([
               'type' => 'game_completion',
               'title' => 'Surah Master',
               'description' => 'Completed a Memorization Marathon!',
               'hasanat' => 200,
           ]);
       }
   }
   ```
   Run: `php artisan db:seed --class=GameSeeder`.

### Step 1.2: Backend APIs
Update `app/Http/Controllers/Api/GameController.php`.

1. **Start Memorization Marathon Session**:
   ```php
   // app/Http/Controllers/Api/GameController.php
   public function startMarathonSession(Request $request)
   {
       $validated = $request->validate([
           'surah_id' => 'required|exists:surahs,id',
           'weeks' => 'required|integer|min:4|max:8',
       ]);

       $user = auth()->user();
       $game = Game::where('name', 'memorization_marathon')->firstOrFail();
       $surah = Surah::findOrFail($validated['surah_id']);
       $totalAyahs = $surah->ayah_count;
       $ayahsPerMilestone = ceil($totalAyahs / ($validated['weeks'] * 0.5)); // ~2 milestones per week
       $milestoneAyahs = array_chunk(range(1, $totalAyahs), $ayahsPerMilestone);

       $session = GameSession::create([
           'user_id' => $user->id,
           'game_id' => $game->id,
           'score' => 0,
           'hasanat_earned' => 0,
           'hints_used' => 0,
           'time_spent' => 0,
       ]);

       $marathonSession = MarathonSession::create([
           'game_session_id' => $session->id,
           'user_id' => $user->id,
           'surah_id' => $surah->id,
           'total_ayahs' => $totalAyahs,
           'milestone_ayahs' => json_encode($milestoneAyahs),
           'status' => 'active',
       ]);

       return response()->json([
           'session_id' => $session->id,
           'marathon_session_id' => $marathonSession->id,
           'surah' => $surah,
           'milestone_ayahs' => $milestoneAyahs,
           'current_milestone' => $marathonSession->current_milestone,
       ]);
   }
   ```

2. **Submit Milestone Recitation**:
   ```php
   public function submitMarathonMilestone(Request $request, GameSession $session, MarathonSession $marathonSession)
   {
       $this->authorize('update', $session);
       $validated = $request->validate([
           'milestone_number' => 'required|integer|min:1',
           'recitation' => 'required|file|mimes:mp3,wav',
           'time_spent' => 'integer',
       ]);

       if ($marathonSession->status !== 'active' || $marathonSession->current_milestone !== $validated['milestone_number']) {
           return response()->json(['error' => 'Invalid milestone or session'], 400);
       }

       $recitationUrl = $request->file('recitation')->store('recitations', 's3');
       $whisperFeedback = $this->processWhisperTajweed($recitationUrl); // Assume existing Whisper integration
       $score = $whisperFeedback['accuracy'];
       $hasanatEarned = $score >= 80 ? 20 : 10;
       $isApproved = $score >= 80;

       $milestone = MarathonMilestone::create([
           'marathon_session_id' => $marathonSession->id,
           'milestone_number' => $validated['milestone_number'],
           'ayah_ids' => json_encode(json_decode($marathonSession->milestone_ayahs)[$validated['milestone_number'] - 1]),
           'recitation_url' => $recitationUrl,
           'whisper_feedback' => $whisperFeedback,
           'score' => $score,
           'hasanat_earned' => $hasanatEarned,
           'is_approved' => $isApproved,
           'submitted_at' => now(),
       ]);

       $session->update([
           'score' => $session->score + $score,
           'hasanat_earned' => $session->hasanat_earned + $hasanatEarned,
           'time_spent' => $session->time_spent + ($validated['time_spent'] ?? 0),
       ]);

       $user = auth()->user();
       $user->hasanat_total += $hasanatEarned;
       $user->save();

       if ($isApproved) {
           $milestoneCount = count(json_decode($marathonSession->milestone_ayahs));
           $marathonSession->update([
               'current_milestone' => $marathonSession->current_milestone + 1,
               'status' => $marathonSession->current_milestone > $milestoneCount ? 'completed' : 'active',
               'completed_at' => $marathonSession->current_milestone > $milestoneCount ? now() : null,
               'hasanat_earned' => $marathonSession->hasanat_earned + $hasanatEarned,
           ]);

           if ($marathonSession->status === 'completed') {
               $user->hasanat_total += $session->game->hasanat_per_win;
               $user->save();
               Badge::create([
                   'user_id' => $user->id,
                   'type' => 'game_completion',
                   'title' => 'Surah Master',
                   'description' => 'Completed a Memorization Marathon!',
                   'hasanat' => $session->game->hasanat_per_win,
                   'awarded_at' => now(),
               ]);
               Notification::send($user->classes()->first()->teacher, new HighScoreAchieved($session));
           }
       }

       // Check for Sajda ayahs
       foreach (json_decode($milestone->ayah_ids) as $ayahId) {
           if (SajdaAyah::where('surah_id', $marathonSession->surah_id)->where('ayah_id', $ayahId)->exists()) {
               SujudEvent::create([
                   'user_id' => $user->id,
                   'surah_id' => $marathonSession->surah_id,
                   'ayah_id' => $ayahId,
                   'context' => 'game',
               ]);
           }
       }

       $this->updateLeaderboardEntry($user);
       return response()->json([
           'score' => $score,
           'hasanat_earned' => $hasanatEarned,
           'whisper_feedback' => $whisperFeedback,
           'is_approved' => $isApproved,
           'status' => $marathonSession->status,
           'current_milestone' => $marathonSession->current_milestone,
       ]);
   }
   ```

3. **Get Memorization Marathon Analytics**:
   ```php
   public function getMarathonAnalytics(Request $request, ClassModel $class)
   {
       $this->authorize('view', $class);
       $studentStats = User::whereHas('classes', fn($q) => $q->where('class_id', $class->id))
           ->withCount([
               'marathon_sessions as completed_sessions' => fn($q) => $q->where('status', 'completed'),
               'marathon_milestones as total_milestones',
               'marathon_milestones as approved_milestones' => fn($q) => $q->where('is_approved', true),
           ])
           ->get()
           ->map(fn($user) => [
               'name' => $user->name,
               'completed_sessions' => $user->completed_sessions,
               'total_milestones' => $user->total_milestones,
               'approval_rate' => $user->total_milestones ? ($user->approved_milestones / $user->total_milestones) * 100 : 0,
               'average_score' => MarathonMilestone::where('user_id', $user->id)->avg('score'),
           ]);

       return [
           'total_sessions' => MarathonSession::whereHas('user.classes', fn($q) => $q->where('class_id', $class->id))->count(),
           'completed_sessions' => MarathonSession::whereHas('user.classes', fn($q) => $q->where('class_id', $class->id))->where('status', 'completed')->count(),
           'average_score' => MarathonMilestone::whereHas('marathon_session.user.classes', fn($q) => $q->where('class_id', $class->id))->avg('score'),
           'sujud_prompts' => SujudEvent::whereHas('user.classes', fn($q) => $q->where('class_id', $class->id))->where('context', 'game')->count(),
           'student_stats' => $studentStats,
       ];
   }
   ```

**Routes** (update `routes/api.php`):
```php
Route::middleware('auth:sanctum')->prefix('student')->group(function () {
    Route::post('/games/memorization_marathon/start', [GameController::class, 'startMarathonSession']);
    Route::post('/games/memorization_marathon/sessions/{gameSession}/marathon/{marathonSession}', [GameController::class, 'submitMarathonMilestone']);
});
Route::middleware('auth:sanctum')->prefix('teacher')->group(function () {
    Route::get('/classes/{class}/memorization-marathon-analytics', [GameController::class, 'getMarathonAnalytics']);
});
```

**Notifications** (add milestone-specific notification):
```php
// app/Notifications/MilestoneCompleted.php
namespace App\Notifications;

use App\Models\MarathonMilestone;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;

class MilestoneCompleted extends Notification
{
    public function __construct(public MarathonMilestone $milestone) {}

    public function via($notifiable)
    {
        return ['mail', 'database'];
    }

    public function toMail($notifiable)
    {
        return (new MailMessage)
            ->subject('Memorization Milestone Achieved!')
            ->line("You completed milestone {$this->milestone->milestone_number} with a score of {$this->milestone->score}!")
            ->action('View Progress', url('/dashboard'));
    }

    public function toArray($notifiable)
    {
        return [
            'milestone_id' => $this->milestone->id,
            'milestone_number' => $this->milestone->milestone_number,
            'score' => $this->milestone->score,
            'hasanat_earned' => $this->milestone->hasanat_earned,
        ];
    }
}
```
Dispatch in `submitMarathonMilestone`:
```php
if ($isApproved) {
    Notification::send($user, new MilestoneCompleted($milestone));
}
```

---

## Phase 2: Frontend Implementation

### Step 2.1: Update Game Center
Update `src/app/dashboard/games/page.tsx` to include Memorization Marathon:
```tsx
import { useQuery } from '@tanstack/react-query';
import api from '@/lib/api';
import { motion } from 'framer-motion';
import { FaGamepad } from 'react-icons/fa';
import Link from 'next/link';
import { useTranslations } from 'next-intl';

export default function GameCenter() {
    const t = useTranslations('games');
    const { data: games } = useQuery(['games'], () => api.get('/student/games').then(res => res.data));

    return (
        <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
            className="bg-gradient-to-br from-maroon to-milk min-h-screen p-4 md:p-8 relative"
            style={{ backgroundImage: 'url(/images/quran-bg.png)', backgroundSize: 'cover' }}
            role="region"
            aria-label={t('game_center')}
        >
            <motion.div
                className="absolute inset-0 bg-gradient-to-br from-maroon/50 to-milk/50"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
            />
            <h1 className="text-4xl font-bold text-gold font-amiri mb-6 relative z-10">{t('game_center')}</h1>
            <p className="text-milk font-lora mb-4 relative z-10">{t('welcome_message')}</p>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 relative z-10">
                {games?.map((game: any) => (
                    <Link key={game.id} href={`/dashboard/games/${game.name}`}>
                        <motion.div
                            initial={{ y: 20, opacity: 0 }}
                            animate={{ y: 0, opacity: 1 }}
                            whileHover={{ scale: 1.05, boxShadow: '0 0 15px rgba(255, 215, 0, 0.5)' }}
                            className="bg-white p-6 rounded-lg shadow-lg border-2 border-gold"
                        >
                            <img src={game.icon} alt={game.title} className="w-full h-40 object-cover rounded mb-4" />
                            <h2 className="text-2xl font-bold text-maroon font-amiri">{game.title}</h2>
                            <p className="text-milk font-lora">{game.description}</p>
                            <p className="text-gold mt-2">{t('hasanat')}: {game.hasanat_per_win}</p>
                            <p className="text-maroon mt-1">{t('difficulty')}: {game.difficulty}</p>
                        </motion.div>
                    </Link>
                ))}
            </div>
        </motion.div>
    );
}
```

### Step 2.2: Memorization Marathon Game
Create `src/app/dashboard/games/memorization_marathon/page.tsx`:
```tsx
import { useState, useEffect } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import api from '@/lib/api';
import { motion } from 'framer-motion';
import Confetti from 'react-confetti';
import { FaMicrophone, FaCheck, FaTrophy } from 'react-icons/fa';
import { useTranslations } from 'next-intl';
import { CircularProgressbar } from 'react-circular-progressbar';
import 'react-circular-progressbar/dist/styles.css';
import { useAuth } from '@/hooks/useAuth';

export default function MemorizationMarathon() {
    const t = useTranslations('games.memorization_marathon');
    const { user } = useAuth();
    const [showConfetti, setShowConfetti] = useState(false);
    const [surahId, setSurahId] = useState<number | null>(null);
    const [weeks, setWeeks] = useState<number>(4);
    const [recitation, setRecitation] = useState<File | null>(null);
    const [hasanatTotal, setHasanatTotal] = useState(0);
    const [timeSpent, setTimeSpent] = useState(0);

    useEffect(() => {
        const timer = setInterval(() => setTimeSpent(prev => prev + 1), 1000);
        return () => clearInterval(timer);
    }, []);

    const { data: surahs, isLoading: surahsLoading } = useQuery(['surahs'], () => 
        api.get('/student/surahs').then(res => res.data)
    );
    const { data: sessionData, refetch } = useQuery(
        ['marathon_session', surahId, weeks],
        () => api.post('/student/games/memorization_marathon/start', { surah_id: surahId, weeks }).then(res => res.data),
        { enabled: !!surahId }
    );
    const submitMilestone = useMutation({
        mutationFn: () => {
            const formData = new FormData();
            formData.append('milestone_number', sessionData.current_milestone.toString());
            formData.append('recitation', recitation!);
            formData.append('time_spent', timeSpent.toString());
            return api.post(`/student/games/memorization_marathon/sessions/${sessionData.session_id}/marathon/${sessionData.marathon_session_id}`, formData);
        },
        onSuccess: (data) => {
            setHasanatTotal(prev => prev + data.data.hasanat_earned);
            if (data.data.status === 'completed') {
                setShowConfetti(true);
                setTimeout(() => setShowConfetti(false), 3000);
            }
            if (data.data.is_approved) {
                setRecitation(null);
                setTimeSpent(0);
            }
            refetch();
        },
    });

    if (!surahs || surahsLoading) return <div>Loading...</div>;

    return (
        <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
            className="bg-gradient-to-br from-maroon to-milk min-h-screen p-4 md:p-8 relative"
            style={{ backgroundImage: 'url(/images/marathon-bg.png)', backgroundSize: 'cover', animation: 'pulse 10s infinite' }}
            role="region"
            aria-label={t('title')}
        >
            {showConfetti && <Confetti />}
            <motion.div
                className="absolute inset-0 bg-gradient-to-br from-maroon/50 to-milk/50"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
            />
            <h1 className="text-4xl font-bold text-gold font-amiri mb-6 relative z-10">{t('title')}</h1>
            <p className="text-milk font-lora mb-4 relative z-10">{t('hasanat_total')}: {hasanatTotal}</p>
            {!sessionData && (
                <motion.div
                    initial={{ scale: 0.9 }}
                    animate={{ scale: 1 }}
                    className="bg-white p-6 rounded-lg shadow-lg border-2 border-gold relative z-10"
                >
                    <p className="text-maroon font-lora">{t('select_surah')}</p>
                    <select
                        value={surahId || ''}
                        onChange={(e) => setSurahId(Number(e.target.value))}
                        className="p-2 rounded w-full mt-2 font-lora"
                        aria-label={t('select_surah')}
                    >
                        <option value="">{t('choose_surah')}</option>
                        {surahs.map((surah: any) => (
                            <option key={surah.id} value={surah.id}>{surah.name}</option>
                        ))}
                    </select>
                    <p className="text-maroon font-lora mt-4">{t('select_weeks')}</p>
                    <select
                        value={weeks}
                        onChange={(e) => setWeeks(Number(e.target.value))}
                        className="p-2 rounded w-full mt-2 font-lora"
                        aria-label={t('select_weeks')}
                    >
                        {[4, 5, 6, 7, 8].map(w => (
                            <option key={w} value={w}>{w} {t('weeks')}</option>
                        ))}
                    </select>
                    <motion.button
                        whileHover={{ scale: 1.05 }}
                        onClick={() => surahId && api.post('/student/games/memorization_marathon/start', { surah_id: surahId, weeks })}
                        className="p-4 bg-maroon text-milk rounded-lg mt-4 w-full"
                        disabled={!surahId}
                    >
                        {t('start_marathon')}
                    </motion.button>
                </motion.div>
            )}
            {sessionData && (
                <motion.div
                    initial={{ scale: 0.9 }}
                    animate={{ scale: 1 }}
                    className="bg-white p-6 rounded-lg shadow-lg border-2 border-gold relative z-10"
                >
                    <FaTrophy className="text-6xl text-gold mx-auto mb-4" />
                    <p className="text-2xl font-bold text-maroon font-amiri text-center">{t('surah')}: {sessionData.surah.name}</p>
                    <div className="w-16 h-16 mx-auto mt-4">
                        <CircularProgressbar
                            value={(sessionData.current_milestone - 1) / sessionData.milestone_ayahs.length * 100}
                            text={`Milestone ${sessionData.current_milestone}`}
                            styles={{ path: { stroke: '#FFD700' }, text: { fill: '#7A001F' } }}
                        />
                    </div>
                    {sessionData.status === 'completed' && (
                        <p className="text-2xl font-lora text-center mt-4">{t('marathon_completed')}</p>
                    )}
                    {sessionData.status === 'active' && (
                        <motion.div
                            key={sessionData.current_milestone}
                            initial={{ x: 100, opacity: 0 }}
                            animate={{ x: 0, opacity: 1 }}
                            transition={{ duration: 0.5 }}
                            className="mt-4"
                        >
                            <p className="text-maroon font-amiri">{t('milestone')} {sessionData.current_milestone}: Ayahs {sessionData.milestone_ayahs[sessionData.current_milestone - 1].join(', ')}</p>
                            <input
                                type="file"
                                accept="audio/*"
                                onChange={(e) => setRecitation(e.target.files?.[0] || null)}
                                className="p-2 rounded w-full mt-2"
                                aria-label={t('record_recitation')}
                            />
                            {submitMilestone.data && !submitMilestone.data.data.is_approved && (
                                <p className="text-maroon font-lora mt-2">{t('feedback')}: {submitMilestone.data.data.whisper_feedback.notes}</p>
                            )}
                            <motion.button
                                whileHover={{ scale: 1.05 }}
                                onClick={() => recitation && submitMilestone.mutate()}
                                className="p-4 bg-maroon text-milk rounded-lg mt-2 w-full"
                                disabled={!recitation || submitMilestone.isLoading}
                            >
                                <FaMicrophone className="inline mr-2" /> {t('submit_recitation')}
                            </motion.button>
                        </motion.div>
                    )}
                    <div className="mt-6">
                        <h2 className="text-2xl font-bold text-gold font-amiri">{t('progress')}</h2>
                        <div className="flex flex-wrap gap-2 mt-2">
                            {sessionData.milestone_ayahs.map((_: any, index: number) => (
                                <motion.div
                                    key={index}
                                    initial={{ scale: 0.8 }}
                                    animate={{ scale: index < sessionData.current_milestone ? 1 : 0.8 }}
                                    className={`p-2 rounded ${index < sessionData.current_milestone ? 'bg-gold text-maroon' : 'bg-milk text-maroon'}`}
                                >
                                    {t('milestone')} {index + 1}
                                </motion.div>
                            ))}
                        </div>
                    </div>
                </motion.div>
            )}
        </motion.div>
    );
}
```

### Step 2.3: UI/UX Enhancements
- **Inspired by Quranly**:
  - **Progress Tracker**: Animated milestone bar with gold markers for completed ayahs.
  - **Feedback Interface**: Display Whisper Tajweed feedback for non-approved submissions.
  - **Motivational Feedback**: Pop-ups like “MashaAllah, milestone achieved!” for approved submissions.
  - **Sound Effects**: Soft adhan chimes play on milestone completion or marathon completion (optional, toggleable).
- **Gradients**: Use `bg-gradient-to-br from-maroon to-milk` for the page, `bg-white` or `bg-gold` for cards, `text-gold` for accents.
- **Animations**:
  - Milestone Entry: Slide-in with `initial={{ x: 100, opacity: 0 }}`.
  - Progress Bar: Fill animation for completed milestones.
  - Confetti: Trigger on marathon completion and badge awards.
- **Typography**:
  - **Amiri**: For Arabic text and titles (Quranic aesthetic).
  - **Lora**: For descriptions and feedback (clean, readable).
- **Responsive**: Stack milestone cards on mobile (`flex-col`), use `max-w-md` for desktop centering.
- **Accessibility**:
  - Add `aria-label` to buttons and inputs (e.g., “Submit Recitation”).
  - Use `role="region"` for game sections, `role="button"` for interactive elements.
  - Ensure keyboard navigation for dropdowns and file inputs.
- **Multilingual**: Use `next-intl` for labels:
  ```json
  // games/en.json
  {
      "memorization_marathon": {
          "title": "Memorization Marathon",
          "hasanat_total": "Total Hasanat",
          "select_surah": "Select Surah",
          "choose_surah": "Choose a Surah",
          "select_weeks": "Select Duration",
          "weeks": "Weeks",
          "start_marathon": "Start Marathon",
          "milestone": "Milestone",
          "record_recitation": "Record Recitation",
          "submit_recitation": "Submit Recitation",
          "feedback": "Feedback",
          "progress": "Progress",
          "marathon_completed": "Marathon Completed!"
      }
  }
  ```
- **Offline**: Cache session and milestone data in IndexedDB:
  ```tsx
  import { openDB } from 'idb';
  const dbPromise = openDB('alfawz', 1, {
      upgrade(db) {
          db.createObjectStore('marathon_milestones', { keyPath: 'id', autoIncrement: true });
      },
  });
  const storeMilestone = async (milestone: any) => {
      const db = await dbPromise;
      await db.put('marathon_milestones', { ...milestone, id: Date.now() });
  };
  const syncMilestones = async () => {
      const db = await dbPromise;
      const milestones = await db.getAll('marathon_milestones');
      for (const milestone of milestones) {
          await submitMilestone.mutateAsync(milestone);
          await db.delete('marathon_milestones', milestone.id);
      }
  };
  useEffect(() => {
      if (navigator.onLine) syncMilestones();
      window.addEventListener('online', syncMilestones);
      return () => window.removeEventListener('online', syncMilestones);
  }, []);
  ```

---

## Phase 3: Integration with Existing Systems
1. **Memorization System**: Track progress in `marathon_sessions` and `marathon_milestones`, syncing with existing recitation submissions.
2. **Submit System**: Use Whisper Tajweed for scoring milestone recitations, stored in `marathon_milestones`.
3. **Leaderboard**: Update entries with milestone scores and Hasanat via `updateLeaderboardEntry`.
4. **Gratification**: Award “Surah Master” badge for marathon completion.
5. **Sujud**: Prompt Sujud events for Sajda ayahs in milestones.
6. **Class-Based Competitions**: Track completions in `marathon_sessions` for class leaderboards (reuse `competition_points` from **Tajweed Tic-Tac-Toe** enhancements, awarding 100 points per completion).

**Example Integration**:
```tsx
// src/app/dashboard/games/memorization_marathon/page.tsx
useEffect(() => {
    if (submitMilestone.isSuccess && submitMilestone.data.data.is_approved) {
        api.post('/student/sujud/check', {
            surah_id: sessionData.surah.id,
            ayah_id: sessionData.milestone_ayahs[sessionData.current_milestone - 1][0],
        });
    }
}, [submitMilestone.isSuccess]);
```

---

## Phase 4: Teacher and Admin Integration
1. **Teacher Dashboard** (`src/components/teacher/AnalyticsOverview.tsx`):
   ```tsx
   <div>
       <p className="text-gold">Memorization Marathon Stats</p>
       <p className="text-2xl">{analytics?.total_sessions} Sessions</p>
       <p className="text-milk">Completed: {analytics?.completed_sessions}</p>
       <p className="text-milk">Average Score: {Math.round(analytics?.average_score)}</p>
       {analytics?.student_stats.map((student: any) => (
           <motion.div key={student.name} className="p-4 bg-white rounded-lg mt-2">
               <p className="font-bold font-amiri">{student.name}</p>
               <p className="font-lora">Completed: {student.completed_sessions}</p>
               <p className="font-lora">Approval Rate: {Math.round(student.approval_rate)}%</p>
               <p className="font-lora">Average Score: {Math.round(student.average_score)}</p>
           </motion.div>
       ))}
   </div>
   ```

2. **Admin Dashboard** (`src/app/admin/analytics/page.tsx`):
   ```tsx
   <p>Memorization Marathon Sessions: {analytics?.data_json.total_sessions}</p>
   <p>Completed: {analytics?.data_json.completed_sessions}</p>
   <p>Top Class: {analytics?.data_json.top_class?.name} ({analytics?.data_json.top_class?.competition_points} points)</p>
   ```

3. **Admin Analytics** (`app/Console/Commands/GenerateAnalyticsSnapshot.php`):
   ```php
   $data['total_sessions'] = MarathonSession::where('created_at', '>=', now()->subWeek())->count();
   $data['completed_sessions'] = MarathonSession::where('created_at', '>=', now()->subWeek())->where('status', 'completed')->count();
   ```

---

## Phase 5: Testing and Deployment
1. **Testing**:
   - Backend: `php artisan make:test MemorizationMarathonTest`:
     ```php
     public function test_start_marathon_session()
     {
         $student = User::factory()->create()->assignRole('student');
         $surah = Surah::factory()->create(['ayah_count' => 20]);
         $response = $this->actingAs($student, 'sanctum')->postJson('/api/student/games/memorization_marathon/start', [
             'surah_id' => $surah->id,
             'weeks' => 4,
         ]);
         $response->assertStatus(200)->assertJsonStructure(['session_id', 'marathon_session_id', 'surah']);
         $this->assertDatabaseHas('marathon_sessions', ['user_id' => $student->id, 'surah_id' => $surah->id]);
     }

     public function test_submit_milestone()
     {
         $student = User::factory()->create()->assignRole('student');
         $session = GameSession::factory()->create(['user_id' => $student->id]);
         $marathonSession = MarathonSession::factory()->create(['game_session_id' => $session->id, 'user_id' => $student->id]);
         $response = $this->actingAs($student, 'sanctum')->postJson("/api/student/games/memorization_marathon/sessions/{$session->id}/marathon/{$marathonSession->id}", [
             'milestone_number' => 1,
             'recitation' => UploadedFile::fake()->create('recitation.mp3', 100),
         ]);
         $response->assertStatus(200);
         $this->assertDatabaseHas('marathon_milestones', ['marathon_session_id' => $marathonSession->id]);
     }
     ```
   - Frontend: Jest for components:
     ```tsx
     test('displays memorization marathon', async () => {
         render(<MemorizationMarathon />);
         expect(screen.getByText('Memorization Marathon')).toBeInTheDocument();
         await waitFor(() => expect(screen.getByText('Select Surah')).toBeInTheDocument());
     });
     ```
2. **Deployment**:
   - Build frontend: `npm run build && npm run export`, copy `out/` to `al-fawz-backend/public/app`.
   - Ensure `.htaccess` routes `/dashboard/games/*` to `app/index.html`.
   - Add cron in cPanel: `* * * * * php /home/username/public_html/artisan queue:work --stop-when-empty`.

---

## Phase 6: Optimizations and Notes
- **Performance**:
  - Cache session and surah data for 24 hours.
  - Use lazy loading for milestone cards and recitation assets.
  - Optimize Whisper Tajweed jobs with retry logic (`tries: 3`).
- **Error Handling**:
  - Handle invalid surah selections or file uploads with user-friendly messages.
  - Queue milestone submissions offline, sync on reconnect.
- **Engagement** (Quranly-inspired):
  - Show “SubhanAllah, another milestone mastered!” for approved submissions.
  - Animate milestone unlocks with gold sparkles and confetti on marathon completion.
  - Award badges for completing multiple marathons (e.g., “Memorization Legend” for 3 completions).
- **UI Perfection**:
  - Progress tracker with glowing gold milestone markers.
  - Feedback cards with elegant typography for Whisper Tajweed notes.
  - Background with subtle Quranic calligraphy and pulsing animation.
- **Tracking**: Teachers see per-student completion rates and scores; admins track class engagement and completions.
- **Offline**: Store submissions and progress in IndexedDB for seamless syncing.

This implementation delivers a fully functional **Memorization Marathon** game with a stunning, spiritually enriching UI, integrated with the Game Center and existing systems. Only students who complete daily tasks can access it, ensuring habit-building. If you need UI mockups, additional enhancements (e.g., difficulty levels, group challenges), or further games, let me know!
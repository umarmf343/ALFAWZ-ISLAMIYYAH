# TRAE Build Preferences (Global)

```yaml
# trae.preferences.yaml
version: 1
owner: "AlFawz Qur’an Institute"
apply_to_all_projects: true

communication:
  language: "English"            # Always chat in English
  tone: "calm, clear, technical"
  confirmations: true            # Brief confirmation before executing destructive ops

codegen:
  function_level_comments: true  # Add function-level comments for all generated code
  docstrings: "Google"           # Use Google-style docstrings for TS/JS/PHP
  headers:
    - "/* AlFawz Qur’an Institute — generated with TRAE */"
    - "/* Author: Auto-scaffold (review required) */"
  line_length: 100
  tabs: 2
  semicolons: true

platforms:
  primary_os: "Windows"          # You are on Windows (Laragon / WSL optional)
  secondary_os: "macOS"          # Ensure all scripts work cross-platform
  shell:
    windows: "powershell"        # Prefer PowerShell for scripts (.ps1)
    macos: "bash"                # .sh fallback

git:
  conventional_commits: true
  sign_commits: false
  pr_template: ".github/pull_request_template.md"

security:
  secrets_from_env: true
  forbid_hardcoded_keys: true
  env_files:
    - "apps/api/.env"
    - "apps/web/.env.local"

quality:
  lint: true
  test: true
  typecheck: true
  coverage_min: 70

deployment:
  target: "cPanel"
  strategy: "Laravel API + Next.js static export to /public/app"
  windows_build:
    node_version: ">=20"
    php_version: ">=8.2"
    paths_note: "Use Laragon or XAMPP; ensure php and composer in PATH"
```

---

# TRAE Execution Contract (Agent Rules)

```yaml
# trae.contract.yaml
version: 1
rules:
  - Always reply in English.
  - When generating code, include function-level comments and brief module headers.
  - Prefer Windows-friendly steps; provide macOS equivalents when relevant.
  - Never hardcode API keys; read from env.
  - Before running migrations or file writes, print a one-line summary of impact.

fallbacks:
  - If Redis not available, use Laravel file cache.
  - If Node SSR is unavailable on cPanel, use Next.js static export.

done_definition:
  - "Laravel API accessible at /api/health returns 200 JSON"
  - "Next.js static exported to /public/app with index.html available"
  - "Cron jobs registered in cPanel and visible in logs"
```

---

# Repo Scaffolding Tasks (Windows-first)

```yaml
# trae.tasks.yaml
tasks:
  - id: create-monorepo
    title: "Create monorepo layout"
    run:
      - "mkdir -p apps/api apps/web scripts .github"
      - "echo '' > README.md"

  - id: laravel-new
    cwd: "apps"
    run:
      - "composer create-project laravel/laravel api"
      - "cd api && composer require laravel/sanctum spatie/laravel-permission league/flysystem-aws-s3-v3 guzzlehttp/guzzle"
      - "cd api && php artisan vendor:publish --provider='Laravel\\Sanctum\\SanctumServiceProvider'"

  - id: next-new
    cwd: "apps"
    run:
      - "powershell -Command \"npm create next-app@latest web -- --ts --eslint --tailwind --app --src --import-alias '@/*'\""

  - id: link-web-to-laravel
    run:
      - "echo Exported Next.js will be copied to apps/api/public/app"

  - id: windows-scripts
    run:
      - "mkdir -p scripts"
      - "Out-File -FilePath scripts/build-web.ps1 -InputObject 'cd apps/web; npm i; npm run build; npm run export; if (!(Test-Path ..\\api\\public\\app)) { mkdir ..\\api\\public\\app }; robocopy .\\out ..\\api\\public\\app /MIR'"
      - "Out-File -FilePath scripts/migrate-api.ps1 -InputObject 'cd apps/api; php artisan migrate --force'"
      - "Out-File -FilePath scripts/schedule-run.ps1 -InputObject 'cd apps/api; php artisan schedule:run'"

  - id: mac-scripts
    run:
      - "bash -lc 'cat > scripts/build-web.sh <<EOF\n#!/usr/bin/env bash\nset -e\ncd apps/web\nnpm i\nnpm run build\nnpm run export\nmkdir -p ../api/public/app\nrsync -a --delete out/ ../api/public/app/\nEOF\nchmod +x scripts/build-web.sh'"

  - id: git-init
    run:
      - "git init"
      - "git add ."
      - "git commit -m \"chore: scaffold monorepo (Laravel API + Next.js web)\""
```

> Run each `run` line in TRAE’s task runner. PowerShell files are used on Windows; bash scripts are included for macOS parity.

---

# Project-Local Preferences (checked into repo)

**1) `.editorconfig`**

```ini
root = true

[*]
charset = utf-8
end_of_line = lf
indent_style = space
indent_size = 2
insert_final_newline = true
max_line_length = 100
```

**2) ESLint/Prettier (apps/web)**

```json
// apps/web/.eslintrc.json
{
  "extends": ["next/core-web-vitals"],
  "rules": {
    "max-len": ["warn", { "code": 100 }],
    "no-console": ["warn", { "allow": ["warn", "error"] }]
  }
}
```

```json
// apps/web/.prettierrc
{ "semi": true, "singleQuote": false, "printWidth": 100 }
```

**3) PHP-CS-Fixer (apps/api)**

```php
// apps/api/.php-cs-fixer.php
<?php
$finder = PhpCsFixer\Finder::create()->in(__DIR__.'/app');
return (new PhpCsFixer\Config())
  ->setRiskyAllowed(true)
  ->setRules([
    '@PSR12' => true,
    'array_syntax' => ['syntax' => 'short'],
    'single_quote' => true,
  ])->setFinder($finder);
```

---

# Environment Templates (Windows-friendly)

**apps/api/.env.example**

```dotenv
APP_NAME=AlFawzQuran
APP_ENV=production
APP_KEY=
APP_DEBUG=false
APP_URL=https://yourdomain.com

# Database (cPanel MySQL/MariaDB)
DB_CONNECTION=mysql
DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=alfawz_quran
DB_USERNAME=cpaneluser_alfawz
DB_PASSWORD=yourpassword

# Cache & Queue (no Redis)
CACHE_DRIVER=file
QUEUE_CONNECTION=database
SESSION_DRIVER=file
SESSION_LIFETIME=120

# Filesystem
FILESYSTEM_DISK=s3
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=alfawz-quran
AWS_URL=
AWS_USE_PATH_STYLE_ENDPOINT=false

# External APIs
PAYSTACK_SECRET_KEY=
PAYSTACK_PUBLIC_KEY=
OPENAI_API_KEY=
QURAN_API_BASE=https://api.quran.com/api/v4

# Sanctum / CORS
SANCTUM_STATEFUL_DOMAINS=yourdomain.com
SESSION_DOMAIN=.yourdomain.com
```

**apps/web/.env.example**

```dotenv
NEXT_PUBLIC_APP_NAME=AlFawz Qur’an Institute
NEXT_PUBLIC_API_BASE=https://yourdomain.com/api
NEXT_PUBLIC_QURAN_API_BASE=https://api.quran.com/api/v4
```

---

# Code Conventions (function-level comments required)

**Laravel Example: health endpoint**

```php
// apps/api/routes/api.php
use Illuminate\Support\Facades\Route;

Route::get('/health', fn () => response()->json(['ok' => true, 'ts' => now()->toISOString()]));
```

```php
// apps/api/app/Http/Controllers/Quran/SurahController.php
<?php

namespace App\Http\Controllers\Quran;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Http;

class SurahController
{
    /**
     * Fetch surah metadata (cached via file cache).
     *
     * @param Request $request HTTP request (expects ?id=)
     * @return \Illuminate\Http\JsonResponse JSON payload with surah data
     */
    public function show(Request $request)
    {
        $id = (int) $request->query('id', 1);
        $key = "quran:surah:$id:v1";

        $data = Cache::remember($key, now()->addMinutes(30), function () use ($id) {
            $base = config('services.quran.base', env('QURAN_API_BASE'));
            $res = Http::get("$base/chapters/$id?language=en");
            return $res->json();
        });

        return response()->json($data);
    }
}
```

**Next.js Example: Hasanat counter hook**

```ts
// apps/web/src/lib/useHasanat.ts
/**
 * Compute hasanat for a given Arabic string.
 * Hasanat = number of Arabic letters * 10 (ignores diacritics and whitespace).
 * @param text Arabic text input
 * @returns number total hasanat
 */
export function computeHasanat(text: string): number {
  const base = text.normalize("NFKD").replace(/[\u064B-\u065F\u0670\u06D6-\u06ED]/g, "");
  const letters = base.match(/[\u0621-\u064A]/g)?.length ?? 0;
  return letters * 10;
}
```

---

# Windows-First Scripts (PowerShell)

**Build and export web → copy to Laravel**

```powershell
# scripts/build-web.ps1
# Builds Next.js and mirrors /out to Laravel public/app
param()
Write-Host "Building Next.js web..." -ForegroundColor Cyan
cd apps/web
npm install
npm run build
npm run export
cd ../..
if (!(Test-Path apps/api/public/app)) { New-Item -ItemType Directory -Path apps/api/public/app | Out-Null }
robocopy apps\web\out apps\api\public\app /MIR
Write-Host "Done. Web exported to api/public/app" -ForegroundColor Green
```

**Run migrations**

```powershell
# scripts/migrate-api.ps1
param()
cd apps/api
php artisan migrate --force
```

---

# cPanel Cron Setup (text to paste)

* **Every minute**: `php /home/USER/apps/api/artisan schedule:run >> /home/USER/logs/schedule.log 2>&1`
* **Queue worker (DB driver)**: `php /home/USER/apps/api/artisan queue:work --stop-when-empty >> /home/USER/logs/queue.log 2>&1`

> Replace `USER` with your cPanel username. Create `logs/` directory first.

---

# TRAE “Definition of Done” Checklist

* [ ] English-only replies enforced
* [ ] All generated code includes function-level comments
* [ ] Windows scripts tested (PowerShell) and macOS fallbacks exist
* [ ] Laravel `/api/health` returns 200
* [ ] Next.js static exported to `/public/app`
* [ ] cPanel cron jobs added and logs writing
* [ ] No secrets in repo; only `.env.example` committed

---

## Quick Start (Windows, Laragon friendly)

1. Install PHP 8.2, Composer, Node 20+ (Laragon ships PHP/Composer)
2. Run `trae.tasks.yaml` tasks in order (or paste commands into TRAE)
3. Copy `.env.example` to `.env` (API & Web), fill keys
4. `php artisan key:generate` in `apps/api`
5. `php artisan migrate` in `apps/api`
6. `./scripts/build-web.ps1` in PowerShell
7. Visit `http(s)://yourdomain.com/app/` (static web) and `http(s)://yourdomain.com/api/health`


# Laravel API (apps/api)

## 1) Routes

```php
// apps/api/routes/api.php
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Auth\AuthController;
use App\Http\Controllers\Quran\SurahController;
use App\Http\Controllers\Core\ClassController;
use App\Http\Controllers\Core\AssignmentController;
use App\Http\Controllers\Core\HotspotController;
use App\Http\Controllers\Core\SubmissionController;
use App\Http\Controllers\Core\FeedbackController;
use App\Http\Controllers\Core\LeaderboardController;
use App\Http\Controllers\Core\ProfileController;
use App\Http\Controllers\Core\PaymentController;

Route::get('/health', fn () => response()->json(['ok' => true, 'ts' => now()->toISOString()]));

Route::prefix('auth')->group(function () {
    Route::post('/register', [AuthController::class, 'register']);
    Route::post('/login',    [AuthController::class, 'login']);
    Route::post('/logout',   [AuthController::class, 'logout'])->middleware('auth:sanctum');
});

Route::middleware('auth:sanctum')->group(function () {
    // Quran
    Route::get('/quran/surah', [SurahController::class, 'show']); // ?id=

    // Profile & Teachers/Students
    Route::get('/me',          [ProfileController::class, 'me']);
    Route::get('/my-teachers', [ProfileController::class, 'myTeachers']);
    Route::get('/my-students', [ProfileController::class, 'myStudents']); // for teachers

    // Classes
    Route::apiResource('classes', ClassController::class)->only(['index','store','show','update','destroy']);
    Route::post('/classes/{class}/members', [ClassController::class, 'addMember']);
    Route::delete('/classes/{class}/members/{user}', [ClassController::class, 'removeMember']);

    // Assignments & Hotspots
    Route::apiResource('assignments', AssignmentController::class)->only(['index','store','show','update','destroy']);
    Route::post('/assignments/{assignment}/publish', [AssignmentController::class, 'publish']);
    Route::apiResource('assignments.hotspots', HotspotController::class)->shallow();

    // Submissions & Feedback
    Route::apiResource('submissions', SubmissionController::class)->only(['index','store','show','update']);
    Route::post('/submissions/{submission}/feedback', [FeedbackController::class, 'store']);

    // Leaderboard
    Route::get('/leaderboard', [LeaderboardController::class, 'index']); // ?scope=class|global&period=weekly|monthly

    // Payments (Paystack)
    Route::post('/payments/init',    [PaymentController::class, 'init']);
});
Route::post('/payments/webhook', [PaymentController::class, 'webhook']); // Paystack webhook
```

---

## 2) Migrations (essential tables)

```php
// apps/api/database/migrations/2025_01_01_000001_create_classes_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Create classes with teacher owner and level (1,2,3). */
    public function up(): void {
        Schema::create('classes', function (Blueprint $table) {
            $table->id();
            $table->foreignId('teacher_id')->constrained('users')->cascadeOnDelete();
            $table->string('title');
            $table->text('description')->nullable();
            $table->unsignedTinyInteger('level')->default(1); // 1,2,3
            $table->timestamps();
        });
    }
    public function down(): void { Schema::dropIfExists('classes'); }
};
```

```php
// apps/api/database/migrations/2025_01_01_000002_create_class_members_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Join table for class membership by role_in_class. */
    public function up(): void {
        Schema::create('class_members', function (Blueprint $table) {
            $table->id();
            $table->foreignId('class_id')->constrained('classes')->cascadeOnDelete();
            $table->foreignId('user_id')->constrained('users')->cascadeOnDelete();
            $table->enum('role_in_class', ['student','assistant'])->default('student');
            $table->timestamps();
            $table->unique(['class_id','user_id']);
        });
    }
    public function down(): void { Schema::dropIfExists('class_members'); }
};
```

```php
// apps/api/database/migrations/2025_01_01_000003_create_assignments_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Assignments sent by a teacher to a class or individuals. */
    public function up(): void {
        Schema::create('assignments', function (Blueprint $table) {
            $table->id();
            $table->foreignId('class_id')->nullable()->constrained('classes')->cascadeOnDelete();
            $table->foreignId('teacher_id')->constrained('users')->cascadeOnDelete();
            $table->string('title');
            $table->text('description')->nullable();
            $table->string('image_s3_url')->nullable(); // flip image base
            $table->dateTime('due_at')->nullable();
            $table->enum('status', ['draft','published'])->default('draft');
            $table->json('targets')->nullable(); // array of user_ids if not class-wide
            $table->timestamps();
        });
    }
    public function down(): void { Schema::dropIfExists('assignments'); }
};
```

```php
// apps/api/database/migrations/2025_01_01_000004_create_hotspots_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Hotspots annotated on an assignment image. */
    public function up(): void {
        Schema::create('hotspots', function (Blueprint $table) {
            $table->id();
            $table->foreignId('assignment_id')->constrained('assignments')->cascadeOnDelete();
            $table->string('title')->nullable();
            $table->text('tooltip')->nullable();
            $table->string('audio_s3_url')->nullable();
            $table->unsignedInteger('x');
            $table->unsignedInteger('y');
            $table->unsignedInteger('width');
            $table->unsignedInteger('height');
            $table->timestamps();
        });
    }
    public function down(): void { Schema::dropIfExists('hotspots'); }
};
```

```php
// apps/api/database/migrations/2025_01_01_000005_create_submissions_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Student submissions for an assignment. */
    public function up(): void {
        Schema::create('submissions', function (Blueprint $table) {
            $table->id();
            $table->foreignId('assignment_id')->constrained('assignments')->cascadeOnDelete();
            $table->foreignId('student_id')->constrained('users')->cascadeOnDelete();
            $table->enum('status', ['pending','graded'])->default('pending');
            $table->unsignedTinyInteger('score')->nullable(); // 0-100
            $table->json('rubric_json')->nullable(); // tajweed/fluency/memory
            $table->string('audio_s3_url')->nullable(); // student's recitation
            $table->timestamps();
            $table->unique(['assignment_id','student_id']);
        });
    }
    public function down(): void { Schema::dropIfExists('submissions'); }
};
```

```php
// apps/api/database/migrations/2025_01_01_000006_create_feedback_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Teacher feedback attached to a submission. */
    public function up(): void {
        Schema::create('feedback', function (Blueprint $table) {
            $table->id();
            $table->foreignId('submission_id')->constrained('submissions')->cascadeOnDelete();
            $table->foreignId('teacher_id')->constrained('users')->cascadeOnDelete();
            $table->text('note')->nullable();
            $table->string('audio_s3_url')->nullable();
            $table->timestamps();
        });
    }
    public function down(): void { Schema::dropIfExists('feedback'); }
};
```

```php
// apps/api/database/migrations/2025_01_01_000007_create_quran_progress_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Per-ayah progress & hasanat tracking. */
    public function up(): void {
        Schema::create('quran_progress', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained('users')->cascadeOnDelete();
            $table->unsignedSmallInteger('surah_id');
            $table->unsignedSmallInteger('ayah_id');
            $table->unsignedInteger('recited_count')->default(0);
            $table->float('memorized_confidence')->default(0); // 0..1
            $table->unsignedInteger('hasanat')->default(0);
            $table->timestamp('last_seen_at')->nullable();
            $table->timestamps();
            $table->unique(['user_id','surah_id','ayah_id']);
        });
    }
    public function down(): void { Schema::dropIfExists('quran_progress'); }
};
```

```php
// apps/api/database/migrations/2025_01_01_000008_create_srs_queue_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Spaced repetition queue per user & ayah pointer. */
    public function up(): void {
        Schema::create('srs_queue', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained('users')->cascadeOnDelete();
            $table->string('ayah_pointer'); // e.g. "2:255"
            $table->dateTime('due_at');
            $table->float('ease_factor')->default(2.5);
            $table->unsignedInteger('interval')->default(1); // days
            $table->unsignedSmallInteger('repetitions')->default(0);
            $table->timestamps();
            $table->unique(['user_id','ayah_pointer']);
        });
    }
    public function down(): void { Schema::dropIfExists('srs_queue'); }
};
```

```php
// apps/api/database/migrations/2025_01_01_000009_create_leaderboard_snapshots_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Cached leaderboard snapshots. */
    public function up(): void {
        Schema::create('leaderboard_snapshots', function (Blueprint $table) {
            $table->id();
            $table->enum('scope', ['class','global'])->default('global');
            $table->string('period'); // weekly_2025_36, monthly_2025_09
            $table->json('data_json');
            $table->timestamps();
            $table->unique(['scope','period']);
        });
    }
    public function down(): void { Schema::dropIfExists('leaderboard_snapshots'); }
};
```

```php
// apps/api/database/migrations/2025_01_01_000010_create_payments_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Paystack transaction logs. */
    public function up(): void {
        Schema::create('payments', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained('users')->cascadeOnDelete();
            $table->string('plan')->nullable();
            $table->unsignedInteger('amount'); // in kobo
            $table->string('currency', 10)->default('NGN');
            $table->string('paystack_ref')->unique();
            $table->enum('status', ['init','paid','failed'])->default('init');
            $table->json('webhook_payload')->nullable();
            $table->timestamps();
        });
    }
    public function down(): void { Schema::dropIfExists('payments'); }
};
```

---

## 3) Models (relationships)

```php
// apps/api/app/Models/Classroom.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Classroom extends Model
{
    protected $table = 'classes';
    protected $fillable = ['teacher_id','title','description','level'];

    /** The teacher who owns this class. */
    public function teacher() { return $this->belongsTo(User::class, 'teacher_id'); }

    /** Members (students/assistants) of the class. */
    public function members() { return $this->hasMany(ClassMember::class, 'class_id'); }

    /** Assignments belonging to this class. */
    public function assignments() { return $this->hasMany(Assignment::class, 'class_id'); }
}
```

```php
// apps/api/app/Models/ClassMember.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class ClassMember extends Model
{
    protected $fillable = ['class_id','user_id','role_in_class'];

    /** Parent class. */
    public function classroom() { return $this->belongsTo(Classroom::class, 'class_id'); }

    /** User linked to this membership. */
    public function user() { return $this->belongsTo(User::class); }
}
```

```php
// apps/api/app/Models/Assignment.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Assignment extends Model
{
    protected $fillable = [
        'class_id','teacher_id','title','description','image_s3_url','due_at','status','targets'
    ];
    protected $casts = ['targets' => 'array','due_at'=>'datetime'];

    /** Owning class (may be null if targeted). */
    public function classroom() { return $this->belongsTo(Classroom::class, 'class_id'); }

    /** Teacher who created the assignment. */
    public function teacher() { return $this->belongsTo(User::class, 'teacher_id'); }

    /** Hotspots on the assignment image. */
    public function hotspots() { return $this->hasMany(Hotspot::class); }
}
```

```php
// apps/api/app/Models/Hotspot.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Hotspot extends Model
{
    protected $fillable = [
        'assignment_id','title','tooltip','audio_s3_url','x','y','width','height'
    ];

    /** Parent assignment. */
    public function assignment() { return $this->belongsTo(Assignment::class); }
}
```

```php
// apps/api/app/Models/Submission.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Submission extends Model
{
    protected $fillable = [
        'assignment_id','student_id','status','score','rubric_json','audio_s3_url'
    ];
    protected $casts = ['rubric_json' => 'array'];

    /** Assignment submitted. */
    public function assignment() { return $this->belongsTo(Assignment::class); }

    /** Student who submitted. */
    public function student() { return $this->belongsTo(User::class, 'student_id'); }

    /** Feedback list. */
    public function feedback() { return $this->hasMany(Feedback::class); }
}
```

```php
// apps/api/app/Models/Feedback.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Feedback extends Model
{
    protected $fillable = ['submission_id','teacher_id','note','audio_s3_url'];

    /** Target submission. */
    public function submission() { return $this->belongsTo(Submission::class); }

    /** Teacher who authored the feedback. */
    public function teacher() { return $this->belongsTo(User::class, 'teacher_id'); }
}
```

```php
// apps/api/app/Models/QuranProgress.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class QuranProgress extends Model
{
    protected $fillable = [
        'user_id','surah_id','ayah_id','recited_count','memorized_confidence','hasanat','last_seen_at'
    ];
    protected $casts = ['last_seen_at'=>'datetime'];

    /** Owner user. */
    public function user() { return $this->belongsTo(User::class); }
}
```

---

## 4) Controllers (core endpoints)

```php
// apps/api/app/Http/Controllers/Auth/AuthController.php
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;

class AuthController extends Controller
{
    /**
     * Register a new user with role (student by default).
     * @param Request $request name, email, password
     */
    public function register(Request $request) {
        $data = $request->validate([
            'name'=>'required|string|max:120',
            'email'=>'required|email|unique:users,email',
            'password'=>'required|min:6',
            'role'=>'nullable|in:admin,teacher,student'
        ]);
        $user = User::create([
            'name'=>$data['name'],
            'email'=>$data['email'],
            'password'=>Hash::make($data['password']),
        ]);
        $user->assignRole($data['role'] ?? 'student');
        $token = $user->createToken('api')->plainTextToken;
        return response()->json(['user'=>$user, 'token'=>$token], 201);
    }

    /**
     * Login and issue Sanctum token.
     * @param Request $request email, password
     */
    public function login(Request $request) {
        $data = $request->validate([
            'email'=>'required|email',
            'password'=>'required'
        ]);
        $user = User::where('email', $data['email'])->first();
        if (!$user || !Hash::check($data['password'], $user->password)) {
            return response()->json(['message'=>'Invalid credentials'], 401);
        }
        $token = $user->createToken('api')->plainTextToken;
        return response()->json(['user'=>$user, 'token'=>$token]);
    }

    /** Revoke current token. */
    public function logout(Request $request) {
        $request->user()->currentAccessToken()->delete();
        return response()->json(['ok'=>true]);
    }
}
```

```php
// apps/api/app/Http/Controllers/Quran/SurahController.php
<?php

namespace App\Http\Controllers\Quran;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Http;

class SurahController extends Controller
{
    /**
     * Proxy a surah payload from Quran.com API with file caching.
     * @param Request $request expects ?id=
     */
    public function show(Request $request) {
        $id = (int) $request->query('id', 1);
        $key = "quran:surah:$id:v1";
        $base = config('services.quran.base', env('QURAN_API_BASE'));
        $data = Cache::remember($key, now()->addMinutes(30), function () use ($base, $id) {
            $meta = Http::get("$base/chapters/$id?language=en")->json();
            $verses = Http::get("$base/quran/verses/uthmani?chapter_number=$id")->json();
            return ['meta'=>$meta, 'verses'=>$verses];
        });
        return response()->json($data);
    }
}
```

```php
// apps/api/app/Http/Controllers/Core/ClassController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\Classroom;
use App\Models\ClassMember;
use App\Models\User;
use Illuminate\Http\Request;

class ClassController extends Controller
{
    /** List classes (teachers see their own; admins see all). */
    public function index(Request $request) {
        $u = $request->user();
        $q = Classroom::query();
        if ($u->hasRole('teacher')) $q->where('teacher_id', $u->id);
        return response()->json($q->latest()->paginate(20));
    }

    /** Create a new class owned by the current teacher. */
    public function store(Request $request) {
        $this->authorizeTeacher($request);
        $data = $request->validate([
            'title'=>'required|string|max:140',
            'description'=>'nullable|string',
            'level'=>'required|in:1,2,3'
        ]);
        $c = Classroom::create([
            'teacher_id'=>$request->user()->id,
            ...$data
        ]);
        return response()->json($c, 201);
    }

    /** Show a class with members. */
    public function show(Request $request, Classroom $class) {
        $this->authorizeView($request, $class);
        return response()->json($class->load(['teacher','members.user']));
    }

    /** Update class information. */
    public function update(Request $request, Classroom $class) {
        $this->authorizeOwner($request, $class);
        $data = $request->validate([
            'title'=>'sometimes|string|max:140',
            'description'=>'nullable|string',
            'level'=>'sometimes|in:1,2,3'
        ]);
        $class->update($data);
        return response()->json($class);
    }

    /** Delete a class. */
    public function destroy(Request $request, Classroom $class) {
        $this->authorizeOwner($request, $class);
        $class->delete();
        return response()->json(['ok'=>true]);
    }

    /** Add a student to class members. */
    public function addMember(Request $request, Classroom $class) {
        $this->authorizeOwner($request, $class);
        $data = $request->validate([
            'user_id'=>'required|exists:users,id',
            'role_in_class'=>'nullable|in:student,assistant'
        ]);
        $member = ClassMember::firstOrCreate([
            'class_id'=>$class->id, 'user_id'=>$data['user_id']
        ], ['role_in_class'=>$data['role_in_class'] ?? 'student']);
        return response()->json($member, 201);
    }

    /** Remove a user from class members. */
    public function removeMember(Request $request, Classroom $class, User $user) {
        $this->authorizeOwner($request, $class);
        ClassMember::where('class_id',$class->id)->where('user_id',$user->id)->delete();
        return response()->json(['ok'=>true]);
    }

    /** Guard: only teachers can create/update classes. */
    private function authorizeTeacher(Request $request): void {
        abort_unless($request->user()->hasRole('teacher') || $request->user()->hasRole('admin'), 403);
    }
    /** Guard: owner teacher or admin can manage. */
    private function authorizeOwner(Request $request, Classroom $class): void {
        abort_unless($request->user()->id === $class->teacher_id || $request->user()->hasRole('admin'), 403);
    }
    /** Guard: teacher owner, admin, or enrolled student can view. */
    private function authorizeView(Request $request, Classroom $class): void {
        $u = $request->user();
        if ($u->hasRole('admin') || $u->id === $class->teacher_id) return;
        $isMember = $class->members()->where('user_id',$u->id)->exists();
        abort_unless($isMember, 403);
    }
}
```

```php
// apps/api/app/Http/Controllers/Core/AssignmentController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\Assignment;
use App\Models\Classroom;
use Illuminate\Http\Request;

class AssignmentController extends Controller
{
    /** List assignments visible to current user (teacher or student). */
    public function index(Request $request) {
        $u = $request->user();
        if ($u->hasRole('teacher')) {
            $q = Assignment::where('teacher_id',$u->id)->latest();
        } else {
            $classIds = $u->classMemberships()->pluck('class_id');
            $q = Assignment::whereIn('class_id', $classIds)
                ->orWhereJsonContains('targets', $u->id)
                ->latest();
        }
        return response()->json($q->paginate(20));
    }

    /** Create a draft assignment; teacher-only. */
    public function store(Request $request) {
        abort_unless($request->user()->hasRole('teacher') || $request->user()->hasRole('admin'), 403);
        $data = $request->validate([
            'class_id'=>'nullable|exists:classes,id',
            'title'=>'required|string|max:160',
            'description'=>'nullable|string',
            'image_s3_url'=>'nullable|url',
            'due_at'=>'nullable|date',
            'targets'=>'nullable|array' // user ids
        ]);
        if ($data['class_id'] ?? null) {
            $class = Classroom::findOrFail($data['class_id']);
            abort_unless($class->teacher_id === $request->user()->id || $request->user()->hasRole('admin'), 403);
        }
        $a = Assignment::create([
            'teacher_id'=>$request->user()->id,
            'status'=>'draft',
            ...$data
        ]);
        return response()->json($a->fresh(), 201);
    }

    /** Show an assignment with hotspots. */
    public function show(Request $request, Assignment $assignment) {
        $this->authorizeView($request, $assignment);
        return response()->json($assignment->load('hotspots'));
    }

    /** Update assignment. */
    public function update(Request $request, Assignment $assignment) {
        $this->authorizeOwner($request, $assignment);
        $data = $request->validate([
            'title'=>'sometimes|string|max:160',
            'description'=>'nullable|string',
            'image_s3_url'=>'nullable|url',
            'due_at'=>'nullable|date',
            'targets'=>'nullable|array',
            'status'=>'nullable|in:draft,published'
        ]);
        $assignment->update($data);
        return response()->json($assignment->fresh('hotspots'));
    }

    /** Delete assignment. */
    public function destroy(Request $request, Assignment $assignment) {
        $this->authorizeOwner($request, $assignment);
        $assignment->delete();
        return response()->json(['ok'=>true]);
    }

    /** Publish draft assignment. */
    public function publish(Request $request, Assignment $assignment) {
        $this->authorizeOwner($request, $assignment);
        $assignment->update(['status'=>'published']);
        return response()->json($assignment);
    }

    /** Guard: only owner teacher/admin can manage. */
    private function authorizeOwner(Request $request, Assignment $assignment): void {
        abort_unless($request->user()->id === $assignment->teacher_id || $request->user()->hasRole('admin'), 403);
    }
    /** Guard: visible to teacher owner, admin, or class members/targets. */
    private function authorizeView(Request $request, Assignment $assignment): void {
        $u = $request->user();
        if ($u->hasRole('admin') || $u->id === $assignment->teacher_id) return;
        $inTargets = collect($assignment->targets ?? [])->contains($u->id);
        $inClass = $assignment->class_id
            ? $u->classMemberships()->where('class_id',$assignment->class_id)->exists()
            : false;
        abort_unless($inTargets || $inClass, 403);
    }
}
```

```php
// apps/api/app/Http/Controllers/Core/HotspotController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\Assignment;
use App\Models\Hotspot;
use Illuminate\Http\Request;

class HotspotController extends Controller
{
    /** Add hotspot to assignment image; teacher-only. */
    public function store(Request $request, Assignment $assignment) {
        $this->authorizeOwner($request, $assignment);
        $data = $request->validate([
            'title'=>'nullable|string|max:120',
            'tooltip'=>'nullable|string',
            'audio_s3_url'=>'nullable|url',
            'x'=>'required|integer|min:0','y'=>'required|integer|min:0',
            'width'=>'required|integer|min:1','height'=>'required|integer|min:1',
        ]);
        $hs = $assignment->hotspots()->create($data);
        return response()->json($hs, 201);
    }

    /** Update hotspot. */
    public function update(Request $request, Hotspot $hotspot) {
        $this->authorizeOwner($request, $hotspot->assignment);
        $data = $request->validate([
            'title'=>'nullable|string|max:120',
            'tooltip'=>'nullable|string',
            'audio_s3_url'=>'nullable|url',
            'x'=>'sometimes|integer|min:0','y'=>'sometimes|integer|min:0',
            'width'=>'sometimes|integer|min:1','height'=>'sometimes|integer|min:1',
        ]);
        $hotspot->update($data);
        return response()->json($hotspot);
    }

    /** Remove hotspot. */
    public function destroy(Request $request, Hotspot $hotspot) {
        $this->authorizeOwner($request, $hotspot->assignment);
        $hotspot->delete();
        return response()->json(['ok'=>true]);
    }

    /** Guard: only assignment owner or admin. */
    private function authorizeOwner(Request $request, Assignment $a): void {
        abort_unless($request->user()->id === $a->teacher_id || $request->user()->hasRole('admin'), 403);
    }
}
```

```php
// apps/api/app/Http/Controllers/Core/SubmissionController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\Assignment;
use App\Models\Submission;
use Illuminate\Http\Request;

class SubmissionController extends Controller
{
    /** List submissions: teachers see for their assignments; students see their own. */
    public function index(Request $request) {
        $u = $request->user();
        if ($u->hasRole('teacher')) {
            $q = Submission::whereHas('assignment', fn($a)=>$a->where('teacher_id',$u->id));
        } else {
            $q = Submission::where('student_id',$u->id);
        }
        return response()->json($q->with('assignment')->latest()->paginate(20));
    }

    /** Student creates/updates their submission (idempotent by assignment_id). */
    public function store(Request $request) {
        $u = $request->user();
        $data = $request->validate([
            'assignment_id'=>'required|exists:assignments,id',
            'audio_s3_url'=>'nullable|url'
        ]);
        $assignment = Assignment::findOrFail($data['assignment_id']);
        $sub = Submission::updateOrCreate([
            'assignment_id'=>$assignment->id, 'student_id'=>$u->id
        ], [
            'audio_s3_url'=>$data['audio_s3_url'] ?? null, 'status'=>'pending'
        ]);
        return response()->json($sub->load('assignment'), 201);
    }

    /** Teacher can grade a submission. */
    public function update(Request $request, Submission $submission) {
        $this->authorizeTeacher($request, $submission);
        $data = $request->validate([
            'score'=>'nullable|integer|min:0|max:100',
            'rubric_json'=>'nullable|array',
            'status'=>'nullable|in:pending,graded'
        ]);
        $submission->update($data);
        return response()->json($submission->fresh());
    }

    /** Guard: only the assignment owner teacher/admin can grade. */
    private function authorizeTeacher(Request $request, Submission $s): void {
        $u = $request->user();
        abort_unless($u->hasRole('admin') || $s->assignment->teacher_id === $u->id, 403);
    }
}
```

```php
// apps/api/app/Http/Controllers/Core/FeedbackController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\Submission;
use App\Models\Feedback;
use Illuminate\Http\Request;

class FeedbackController extends Controller
{
    /** Teacher leaves text/audio feedback on a submission. */
    public function store(Request $request, Submission $submission) {
        $u = $request->user();
        abort_unless($u->hasRole('admin') || $submission->assignment->teacher_id === $u->id, 403);
        $data = $request->validate([
            'note'=>'nullable|string',
            'audio_s3_url'=>'nullable|url'
        ]);
        $fb = Feedback::create([
            'submission_id'=>$submission->id,
            'teacher_id'=>$u->id,
            ...$data
        ]);
        return response()->json($fb, 201);
    }
}
```

```php
// apps/api/app/Http/Controllers/Core/ProfileController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\ClassMember;
use App\Models\Classroom;
use Illuminate\Http\Request;

class ProfileController extends Controller
{
    /** Return the current authenticated user, role, and simple stats. */
    public function me(Request $request) {
        $u = $request->user()->load('roles');
        return response()->json([
            'user'=>$u,
            'roles'=>$u->roles->pluck('name'),
        ]);
    }

    /** List teachers linked to the current student via class membership. */
    public function myTeachers(Request $request) {
        $u = $request->user();
        $classIds = ClassMember::where('user_id',$u->id)->pluck('class_id');
        $teachers = Classroom::whereIn('id',$classIds)->with('teacher')->get()->pluck('teacher')->unique('id')->values();
        return response()->json($teachers);
    }

    /** For teachers: list students they manage. */
    public function myStudents(Request $request) {
        $u = $request->user();
        abort_unless($u->hasRole('teacher') || $u->hasRole('admin'), 403);
        $classes = Classroom::where('teacher_id',$u->id)->pluck('id');
        $students = ClassMember::whereIn('class_id',$classes)
            ->where('role_in_class','student')
            ->with('user')->get()->pluck('user')->unique('id')->values();
        return response()->json($students);
    }
}
```

```php
// apps/api/app/Http/Controllers/Core/LeaderboardController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\LeaderboardSnapshot;
use Illuminate\Http\Request;

class LeaderboardController extends Controller
{
    /** Return a cached leaderboard snapshot. */
    public function index(Request $request) {
        $scope = $request->query('scope','global');
        $period = $request->query('period','weekly');
        $key = $period === 'monthly'
            ? now()->format('Y-m').':monthly'
            : now()->format('o-\WW').':weekly';

        $snap = LeaderboardSnapshot::where('scope',$scope)->where('period',$key)->first();
        return response()->json($snap ? $snap->data_json : ['entries'=>[]]);
    }
}
```

```php
// apps/api/app/Http/Controllers/Core/PaymentController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\Payment;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class PaymentController extends Controller
{
    /**
     * Initialize a Paystack transaction and return authorization URL.
     * @param Request $request amount (kobo), plan (string)
     */
    public function init(Request $request) {
        $u = $request->user();
        $data = $request->validate([
            'amount'=>'required|integer|min:100',
            'plan'=>'nullable|string'
        ]);
        $ref = 'PSK_'.uniqid();
        $payment = Payment::create([
            'user_id'=>$u->id, 'amount'=>$data['amount'], 'plan'=>$data['plan'] ?? null,
            'paystack_ref'=>$ref, 'status'=>'init', 'currency'=>'NGN'
        ]);

        $res = Http::withToken(env('PAYSTACK_SECRET_KEY'))
            ->post('https://api.paystack.co/transaction/initialize', [
                'email'=>$u->email, 'amount'=>$data['amount'], 'reference'=>$ref,
                'metadata'=>['user_id'=>$u->id, 'plan'=>$data['plan'] ?? null]
            ])->json();

        return response()->json(['ref'=>$ref, 'paystack'=>$res]);
    }

    /** Paystack webhook to verify and update status. */
    public function webhook(Request $request) {
        // NOTE: In production, verify signature: $request->header('x-paystack-signature')
        $payload = $request->all();
        Log::info('Paystack webhook', $payload);
        if (($payload['event'] ?? '') === 'charge.success') {
            $ref = $payload['data']['reference'] ?? null;
            if ($ref && ($p = Payment::where('paystack_ref',$ref)->first())) {
                $p->update(['status'=>'paid','webhook_payload'=>$payload]);
            }
        }
        return response()->json(['ok'=>true]);
    }
}
```

> **Windows note:** run `php artisan migrate --force` after placing migrations.

---

## 5) User model: roles + memberships helper

```php
// apps/api/app/Models/User.php (additions)
public function classMemberships() {
    return $this->hasMany(\App\Models\ClassMember::class, 'user_id');
}
```

> Make sure you installed **spatie/laravel-permission** and ran its migration. Seed roles `admin`, `teacher`, `student`.

---

# Next.js Web (apps/web)

## 1) Simple API client

```ts
// apps/web/src/lib/api.ts
/**
 * Lightweight API client for Laravel backend.
 * Reads base URL from NEXT_PUBLIC_API_BASE.
 */
export async function api<T>(path: string, options: RequestInit = {}): Promise<T> {
  const base = process.env.NEXT_PUBLIC_API_BASE!;
  const res = await fetch(`${base}${path}`, {
    headers: { "Content-Type": "application/json", ...(options.headers || {}) },
    credentials: "include",
    ...options,
  });
  if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
  return (await res.json()) as T;
}
```

## 2) Hasanat utility

```ts
// apps/web/src/lib/hasanat.ts
/**
 * Compute hasanat for a given Arabic string.
 * Hasanat = count(Arabic letters) * 10. Diacritics/whitespace ignored.
 */
export function computeHasanat(text: string): number {
  const base = text.normalize("NFKD").replace(/[\u064B-\u065F\u0670\u06D6-\u06ED]/g, "");
  const letters = base.match(/[\u0621-\u064A]/g)?.length ?? 0;
  return letters * 10;
}
```

## 3) Shared UI bits

```tsx
// apps/web/src/components/ProgressBar.tsx
"use client";
import React from "react";

/** Simple progress bar with label and percent value. */
export default function ProgressBar({ value, label }: { value: number; label?: string }) {
  const pct = Math.min(100, Math.max(0, Math.round(value)));
  return (
    <div className="w-full">
      {label && <div className="mb-1 text-sm">{label}</div>}
      <div className="w-full bg-gray-200 h-3 rounded">
        <div className="h-3 rounded bg-emerald-600" style={{ width: `${pct}%` }} />
      </div>
      <div className="text-xs mt-1">{pct}%</div>
    </div>
  );
}
```

```tsx
// apps/web/src/components/DailyCard.tsx
"use client";
import React from "react";

/** Routine card for Morning/Jumu'ah/Night with actions. */
export default function DailyCard({
  title, subtitle, onPlay, onMark, onBookmark,
}: {
  title: string; subtitle?: string;
  onPlay?: () => void; onMark?: () => void; onBookmark?: () => void;
}) {
  return (
    <div className="rounded-2xl p-4 shadow bg-white">
      <div className="font-semibold">{title}</div>
      {subtitle && <div className="text-sm text-gray-600 mb-3">{subtitle}</div>}
      <div className="flex gap-2">
        <button className="px-3 py-1 rounded bg-emerald-600 text-white" onClick={onPlay}>Play</button>
        <button className="px-3 py-1 rounded bg-gray-800 text-white" onClick={onMark}>Mark as Read</button>
        <button className="px-3 py-1 rounded border" onClick={onBookmark}>Bookmark</button>
      </div>
    </div>
  );
}
```

## 4) Pages

### Dashboard (Top greeting + daily 10-ayah target)

```tsx
// apps/web/src/app/page.tsx
import ProgressBar from "@/components/ProgressBar";

/** Dashboard: greeting, daily target, simple stats placeholders. */
export default function Dashboard() {
  const username = "Student";
  const dailyTarget = 10;
  const done = 4; // wire to backend progress later
  const pct = (done / dailyTarget) * 100;

  return (
    <main className="max-w-5xl mx-auto p-6">
      <h1 className="text-2xl font-bold">Assalamu Alaikum, {username}</h1>
      <section className="mt-6 rounded-2xl p-4 bg-[#FAF7F2]">
        <div className="mb-2 font-semibold">Daily Recitation Target</div>
        <div className="flex items-center gap-4">
          <ProgressBar value={pct} label={`Today: ${done}/${dailyTarget} ayah`} />
          <button className="px-4 py-2 rounded bg-[#7A001F] text-white">Continue Reading</button>
        </div>
      </section>

      <section className="mt-8 grid md:grid-cols-3 gap-4">
        <div className="rounded-2xl p-4 shadow bg-white">
          <div className="font-semibold mb-1">Hasanat Today</div>
          <div className="text-3xl">+320</div>
        </div>
        <div className="rounded-2xl p-4 shadow bg-white">
          <div className="font-semibold mb-1">Ayah of the Day</div>
          <div className="text-sm text-gray-700">“Allah! There is no deity except Him, the Ever-Living...”</div>
        </div>
        <div className="rounded-2xl p-4 shadow bg-white">
          <div className="font-semibold mb-1">Reading Right Now</div>
          <div className="text-sm text-gray-700">Al-Baqarah • Ayah 255</div>
        </div>
      </section>
    </main>
  );
}
```

### Reader (Surah fetch via API proxy)

```tsx
// apps/web/src/app/reader/page.tsx
"use client";
import { useEffect, useState } from "react";
import { api } from "@/lib/api";

/** Quran Reader page: loads a surah (id=1 default) from backend proxy. */
export default function Reader() {
  const [surah, setSurah] = useState<any>(null);

  useEffect(() => {
    api<any>("/quran/surah?id=1").then(setSurah).catch(console.error);
  }, []);

  return (
    <main className="max-w-3xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">Quran Reader</h1>
      {!surah && <div>Loading...</div>}
      {surah && (
        <div className="rounded-2xl p-4 shadow bg-white">
          <div className="font-semibold mb-3">{surah.meta?.chapter?.name_arabic} ({surah.meta?.chapter?.name_simple})</div>
          <div className="space-y-4">
            {surah.verses?.verses?.map((v: any) => (
              <div key={v.id} className="border-b pb-3">
                <div className="text-xl leading-[2.2rem]">{v.text_uthmani}</div>
              </div>
            ))}
          </div>
        </div>
      )}
    </main>
  );
}
```

### Memorization (SRS stub)

```tsx
// apps/web/src/app/memorize/page.tsx
/** Memorization panel: simple SRS placeholder UI. */
export default function Memorize() {
  return (
    <main className="max-w-3xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">Memorization</h1>
      <div className="rounded-2xl p-4 shadow bg-white">
        <div className="mb-2 font-semibold">Reviews Due Today</div>
        <div className="text-gray-600 text-sm">Your due ayahs will appear here based on SRS.</div>
      </div>
    </main>
  );
}
```

### Leaderboard

```tsx
// apps/web/src/app/leaderboard/page.tsx
"use client";
import { useEffect, useState } from "react";
import { api } from "@/lib/api";

/** Leaderboard page: loads cached snapshot. */
export default function Leaderboard() {
  const [data, setData] = useState<any>({ entries: [] });
  useEffect(() => { api<any>("/leaderboard?scope=global&period=weekly").then(setData); }, []);
  return (
    <main className="max-w-3xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">Leaderboard</h1>
      <div className="rounded-2xl p-4 shadow bg-white">
        {(data.entries ?? []).length === 0 && <div className="text-sm text-gray-600">No entries yet.</div>}
        <ul className="divide-y">
          {(data.entries ?? []).map((e: any, i: number) => (
            <li key={i} className="py-3 flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-7 h-7 rounded-full bg-gray-200 grid place-items-center">{i+1}</div>
                <div>
                  <div className="font-semibold">{e.name}</div>
                  <div className="text-xs text-gray-600">{e.country}</div>
                </div>
              </div>
              <div className="text-right">
                <div className="font-semibold">{e.hasanat} hasanat</div>
                <div className="text-xs text-gray-600">{e.badge}</div>
              </div>
            </li>
          ))}
        </ul>
      </div>
    </main>
  );
}
```

### Profile

```tsx
// apps/web/src/app/profile/page.tsx
"use client";
import { useEffect, useState } from "react";
import { api } from "@/lib/api";

/** Profile page: shows roles and linked teachers/students. */
export default function Profile() {
  const [me, setMe] = useState<any>(null);
  const [teachers, setTeachers] = useState<any[]>([]);
  const [students, setStudents] = useState<any[]>([]);

  useEffect(() => {
    api<any>("/me").then(setMe);
    api<any[]>("/my-teachers").then(setTeachers).catch(()=>{});
    api<any[]>("/my-students").then(setStudents).catch(()=>{});
  }, []);

  return (
    <main className="max-w-3xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">Profile</h1>
      {!me && <div>Loading...</div>}
      {me && (
        <div className="space-y-6">
          <div className="rounded-2xl p-4 shadow bg-white">
            <div className="font-semibold">{me.user.name}</div>
            <div className="text-sm text-gray-600">{me.user.email}</div>
            <div className="mt-1 text-xs">Roles: {me.roles.join(", ")}</div>
          </div>
          <div className="rounded-2xl p-4 shadow bg-white">
            <div className="font-semibold mb-2">My Teachers</div>
            <ul className="text-sm list-disc pl-5">
              {teachers.map((t) => <li key={t.id}>{t.name} ({t.email})</li>)}
            </ul>
          </div>
          {students.length > 0 && (
            <div className="rounded-2xl p-4 shadow bg-white">
              <div className="font-semibold mb-2">My Students</div>
              <ul className="text-sm list-disc pl-5">
                {students.map((s) => <li key={s.id}>{s.name} ({s.email})</li>)}
              </ul>
            </div>
          )}
        </div>
      )}
    </main>
  );
}
```

---

# Seeders (roles + demo users)

```php
// apps/api/database/seeders/RolesSeeder.php
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Spatie\Permission\Models\Role;

class RolesSeeder extends Seeder
{
    /** Seed base roles for the app. */
    public function run(): void {
        foreach (['admin','teacher','student'] as $r) {
            Role::firstOrCreate(['name'=>$r]);
        }
    }
}
```

```php
// apps/api/database/seeders/DemoUsersSeeder.php
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\User;
use Illuminate\Support\Facades\Hash;

class DemoUsersSeeder extends Seeder
{
    /** Create demo admin, teacher, student accounts. */
    public function run(): void {
        $admin = User::firstOrCreate(['email'=>'admin@alfawz.local'], [
            'name'=>'Admin', 'password'=>Hash::make('password')
        ]); $admin->assignRole('admin');

        $teacher = User::firstOrCreate(['email'=>'teacher@alfawz.local'], [
            'name'=>'Teacher', 'password'=>Hash::make('password')
        ]); $teacher->assignRole('teacher');

        $student = User::firstOrCreate(['email'=>'student@alfawz.local'], [
            'name'=>'Student', 'password'=>Hash::make('password')
        ]); $student->assignRole('student');
    }
}
```

> Run `php artisan db:seed --class=RolesSeeder` then `php artisan db:seed --class=DemoUsersSeeder`.

---

# Windows Quick Run (recap)

1. Copy code, update `.env` for **apps/api** and **apps/web**
2. `cd apps/api && php artisan key:generate && php artisan migrate --force`
3. `php artisan db:seed --class=RolesSeeder && php artisan db:seed --class=DemoUsersSeeder`
4. PowerShell: `./scripts/build-web.ps1`
5. Hit `http://yourdomain.com/api/health` and `http://yourdomain.com/app/`

---

## What you get now

* **Auth (Sanctum)**: register/login/logout working
* **Classes**: create/update, add/remove members, list
* **Assignments**: draft/publish, image URL, **hotspots** CRUD
* **Submissions**: student submit, teacher grade, **feedback** audio/text
* **Quran Reader**: proxied **Quran.com** surah fetch with file cache
* **Profile**: **my teachers / my students** works
* **Leaderboard**: snapshot stub (ready to fill via cron)
* **Next.js UI**: Dashboard, Reader, Memorize, Leaderboard, Profile pages


# 1) Laravel API — S3 Signed Uploads + Whisper Pipeline

## 1.1 Migrations

```php
// apps/api/database/migrations/2025_01_02_000011_create_recitations_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Holds student recitations and transcription status/results. */
    public function up(): void {
        Schema::create('recitations', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained('users')->cascadeOnDelete();
            $table->unsignedSmallInteger('surah_id')->nullable();
            $table->unsignedSmallInteger('ayah_from')->nullable();
            $table->unsignedSmallInteger('ayah_to')->nullable();
            $table->string('s3_key')->nullable();
            $table->string('s3_url')->nullable();
            $table->enum('status', ['init','uploaded','queued','processing','done','error'])->default('init');
            $table->json('transcript_json')->nullable();     // whisper transcript payload
            $table->json('feedback_json')->nullable();       // computed errors/timing/highlights
            $table->text('error_message')->nullable();
            $table->timestamps();
        });
    }
    public function down(): void { Schema::dropIfExists('recitations'); }
};
```

## 1.2 Model

```php
// apps/api/app/Models/Recitation.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Recitation extends Model
{
    protected $fillable = [
        'user_id','surah_id','ayah_from','ayah_to','s3_key','s3_url','status',
        'transcript_json','feedback_json','error_message'
    ];
    protected $casts = [
        'transcript_json'=>'array',
        'feedback_json'=>'array',
    ];

    /** Owning user. */
    public function user() { return $this->belongsTo(User::class); }
}
```

## 1.3 Controller: S3 presign, finalize, status

```php
// apps/api/app/Http/Controllers/Core/RecitationController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\Recitation;
use Aws\S3\S3Client;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use App\Jobs\TranscribeRecitationJob;

class RecitationController extends Controller
{
    /**
     * Issue a pre-signed S3 PUT URL so the browser can upload audio securely.
     * @param Request $request expects: content_type (audio/mpeg|audio/webm|audio/mp4...), surah_id, ayah_from, ayah_to
     */
    public function initUpload(Request $request) {
        $u = $request->user();
        $data = $request->validate([
            'content_type'=>'required|string|max:100',
            'surah_id'=>'nullable|integer|min:1|max:114',
            'ayah_from'=>'nullable|integer|min:1',
            'ayah_to'=>'nullable|integer|min:1',
        ]);

        // Validate MIME (light allowlist)
        abort_unless(preg_match('/^audio\\/(mpeg|mp4|webm|ogg|x-wav|wav)$/', $data['content_type']), 422);

        // Create DB record
        $key = 'recitations/'.$u->id.'/'.Str::uuid().'.audio';
        $rec = Recitation::create([
            'user_id'=>$u->id,
            'surah_id'=>$data['surah_id'] ?? null,
            'ayah_from'=>$data['ayah_from'] ?? null,
            'ayah_to'=>$data['ayah_to'] ?? null,
            's3_key'=>$key,
            'status'=>'init',
        ]);

        // Build PUT presign with AWS SDK
        /** @var \League\Flysystem\AwsS3V3\AwsS3V3Adapter $adapter */
        $adapter = Storage::disk('s3')->getAdapter();
        /** @var S3Client $client */
        $client = $adapter->getClient();
        $bucket = config('filesystems.disks.s3.bucket');

        $cmd = $client->getCommand('PutObject', [
            'Bucket'=>$bucket,
            'Key'=>$key,
            'ContentType'=>$data['content_type'],
            'ACL'=>'private'
        ]);
        $requestUrl = (string) $client->createPresignedRequest($cmd, '+15 minutes')->getUri();

        return response()->json([
            'recitation_id'=>$rec->id,
            'put_url'=>$requestUrl,
            'key'=>$key,
        ]);
    }

    /**
     * Mark upload complete and enqueue Whisper transcription.
     * @param Request $request expects: recitation_id
     */
    public function complete(Request $request) {
        $u = $request->user();
        $data = $request->validate(['recitation_id'=>'required|exists:recitations,id']);
        $rec = Recitation::where('id',$data['recitation_id'])->where('user_id',$u->id)->firstOrFail();

        // Generate GET signed URL for playback
        $url = Storage::disk('s3')->temporaryUrl($rec->s3_key, now()->addHours(6));
        $rec->update(['s3_url'=>$url, 'status'=>'queued']);

        // Dispatch queue job (DB driver, cPanel cron)
        TranscribeRecitationJob::dispatch($rec->id);

        return response()->json(['ok'=>true, 'recitation'=>$rec->fresh()]);
    }

    /**
     * Polling endpoint to get transcription/feedback status.
     * @param int $id recitation id
     */
    public function status(Request $request, int $id) {
        $rec = Recitation::where('id',$id)->where('user_id',$request->user()->id)->firstOrFail();
        // Renew signed URL if close to expiry
        if ($rec->s3_key && (!$rec->s3_url || now()->diffInMinutes($rec->updated_at) > 300)) {
            $rec->update(['s3_url'=>Storage::disk('s3')->temporaryUrl($rec->s3_key, now()->addHours(6))]);
        }
        return response()->json($rec);
    }
}
```

## 1.4 Job: Whisper transcription + simple alignment stub

```php
// apps/api/app/Jobs/TranscribeRecitationJob.php
<?php

namespace App\Jobs;

use App\Models\Recitation;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Storage;

class TranscribeRecitationJob implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    public int $recitationId;

    /** Queue a recitation to be transcribed with Whisper. */
    public function __construct(int $recitationId) { $this->recitationId = $recitationId; }

    /** Execute the job: download from S3, send to Whisper, store transcript & feedback. */
    public function handle(): void
    {
        $rec = Recitation::find($this->recitationId);
        if (!$rec) return;

        $rec->update(['status'=>'processing']);

        try {
            // Download audio stream (signed URL refreshed if needed)
            $audio = Storage::disk('s3')->read($rec->s3_key);

            // Call OpenAI Whisper (transcriptions)
            // NOTE: Use your preferred endpoint; here we demonstrate multipart form
            $resp = Http::withToken(env('OPENAI_API_KEY'))
                ->asMultipart()
                ->post('https://api.openai.com/v1/audio/transcriptions', [
                    ['name'=>'model','contents'=>'whisper-1'],
                    ['name'=>'file','contents'=>$audio,'filename'=>'recitation.webm','headers'=>['Content-Type'=>'audio/webm']],
                    ['name'=>'response_format','contents'=>'verbose_json'],
                    ['name'=>'timestamp_granularities[]','contents'=>'word']
                ]);

            $json = $resp->json();

            // Very simple feedback stub — replace with DTW/Levenshtein later
            $feedback = [
                'overall_score'=>85,
                'missed_words'=>[],
                'timing_lag'=>0.2,
                'notes'=>'Prototype scoring; integrate proper Arabic alignment.'
            ];

            $rec->update([
                'status'=>'done',
                'transcript_json'=>$json,
                'feedback_json'=>$feedback,
            ]);
        } catch (\Throwable $e) {
            $rec->update(['status'=>'error','error_message'=>$e->getMessage()]);
        }
    }
}
```

> **Queue & Cron (recap)**
> cPanel cron every minute:
> `php /home/USER/apps/api/artisan schedule:run >> /home/USER/logs/schedule.log 2>&1`
> In `app/Console/Kernel.php` ensure `schedule->command('queue:work --stop-when-empty')->everyMinute();` or run a separate cron for `queue:work`.

## 1.5 Routes (additions)

```php
// apps/api/routes/api.php (append inside auth:sanctum group)
use App\Http\Controllers\Core\RecitationController;

Route::post('/recitation/upload/init',   [RecitationController::class, 'initUpload']);
Route::post('/recitation/upload/complete',[RecitationController::class, 'complete']);
Route::get('/recitation/{id}/status',    [RecitationController::class, 'status']);
```

---

# 2) Next.js — Recorder, Upload Flow, Daily Routine UI, Hotspot Flip Viewer

## 2.1 AudioRecorder component (browser MediaRecorder → S3 PUT)

```tsx
// apps/web/src/components/AudioRecorder.tsx
"use client";
import React, { useEffect, useRef, useState } from "react";
import { api } from "@/lib/api";

/**
 * AudioRecorder handles in-browser recording and upload to S3 via pre-signed PUT.
 * Emits recitationId for status polling.
 */
export default function AudioRecorder({
  surahId, ayahFrom, ayahTo, onUploaded,
}: {
  surahId?: number; ayahFrom?: number; ayahTo?: number;
  onUploaded?: (recitationId: number) => void;
}) {
  const [rec, setRec] = useState<MediaRecorder | null>(null);
  const [chunks, setChunks] = useState<Blob[]>([]);
  const [recording, setRecording] = useState(false);
  const streamRef = useRef<MediaStream | null>(null);

  /** Request mic permission and create MediaRecorder */
  async function start() {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    streamRef.current = stream;
    const mr = new MediaRecorder(stream, { mimeType: "audio/webm" });
    mr.ondataavailable = (e) => e.data.size && setChunks((c) => [...c, e.data]);
    mr.onstop = async () => { await upload(); };
    mr.start();
    setRec(mr); setRecording(true);
  }

  /** Stop recording safely */
  function stop() {
    rec?.stop();
    streamRef.current?.getTracks().forEach((t) => t.stop());
    setRecording(false);
  }

  /** Upload the recorded blob to S3 via backend pre-sign, then finalize. */
  async function upload() {
    const blob = new Blob(chunks, { type: "audio/webm" });
    setChunks([]);

    // Get pre-signed PUT
    const init = await api<{ recitation_id: number; put_url: string; key: string }>(
      "/recitation/upload/init",
      {
        method: "POST",
        body: JSON.stringify({
          content_type: "audio/webm",
          surah_id: surahId,
          ayah_from: ayahFrom,
          ayah_to: ayahTo,
        }),
      }
    );

    // PUT to S3
    await fetch(init.put_url, {
      method: "PUT",
      headers: { "Content-Type": "audio/webm" },
      body: blob,
    });

    // Notify backend the upload is complete; enqueue Whisper
    const done = await api<{ ok: boolean; recitation: any }>(
      "/recitation/upload/complete",
      {
        method: "POST",
        body: JSON.stringify({ recitation_id: init.recitation_id }),
      }
    );

    onUploaded?.(done.recitation.id);
  }

  return (
    <div className="flex items-center gap-3">
      {!recording ? (
        <button className="px-4 py-2 rounded bg-emerald-600 text-white" onClick={start}>
          Start Recording
        </button>
      ) : (
        <button className="px-4 py-2 rounded bg-red-600 text-white" onClick={stop}>
          Stop & Upload
        </button>
      )}
    </div>
  );
}
```

## 2.2 RecitationStatus component (poll status)

```tsx
// apps/web/src/components/RecitationStatus.tsx
"use client";
import React, { useEffect, useState } from "react";
import { api } from "@/lib/api";

/** Polls the backend for Whisper transcription status and shows feedback. */
export default function RecitationStatus({ id }: { id: number }) {
  const [data, setData] = useState<any>(null);

  useEffect(() => {
    let timer: any;
    const load = async () => {
      const res = await api<any>(`/recitation/${id}/status`);
      setData(res);
      if (res.status !== "done" && res.status !== "error") {
        timer = setTimeout(load, 2500);
      }
    };
    load();
    return () => timer && clearTimeout(timer);
  }, [id]);

  if (!data) return <div className="text-sm text-gray-600">Waiting…</div>;
  if (data.status === "error") return <div className="text-red-600">Error: {data.error_message}</div>;
  if (data.status !== "done") return <div className="text-sm">Status: {data.status}…</div>;

  return (
    <div className="text-sm">
      <div className="font-semibold mb-1">Transcription Ready</div>
      <audio controls src={data.s3_url} className="w-full mb-2" />
      <pre className="bg-gray-50 p-2 rounded overflow-auto">{JSON.stringify(data.feedback_json, null, 2)}</pre>
    </div>
  );
}
```

## 2.3 Daily Routine UI (Morning / Jumu’ah / Night)

```tsx
// apps/web/src/app/routine/page.tsx
"use client";
import React, { useMemo } from "react";
import DailyCard from "@/components/DailyCard";

/** Daily Routine UI with context-aware suggestions (local time). */
export default function Routine() {
  const now = new Date();
  const day = now.getDay(); // 5 => Friday
  const hour = now.getHours();

  const cards = useMemo(() => {
    const list: Array<{title:string;subtitle:string}> = [];

    // Morning suggestions
    if (hour >= 4 && hour <= 11) {
      list.push({
        title: "Morning • Ayat al-Kursi + Last 2 of Baqarah",
        subtitle: "Start your day with light and protection",
      });
    }

    // Friday (Jumu’ah)
    if (day === 5) {
      list.push({
        title: "Jumu’ah • Surah Al-Kahf",
        subtitle: "“Whoever recites Surah Al-Kahf on Friday...”",
      });
    }

    // Night routine
    if (hour >= 19 || hour <= 2) {
      list.push({
        title: "Night • Mulk + Ikhlas • Falaq • Nas",
        subtitle: "Wind down with a protective recitation",
      });
    }

    return list;
  }, [day, hour]);

  return (
    <main className="max-w-3xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">Daily Routine</h1>
      <div className="grid gap-4">
        {cards.map((c, idx) => (
          <DailyCard
            key={idx}
            title={c.title}
            subtitle={c.subtitle}
            onPlay={() => alert("Play audio sequence…")}
            onMark={() => alert("Marked as read ✓")}
            onBookmark={() => alert("Bookmarked!")}
          />
        ))}
        {cards.length === 0 && (
          <div className="rounded-2xl p-4 shadow bg-white text-sm text-gray-600">
            Suggestions will appear based on time and day.
          </div>
        )}
      </div>
    </main>
  );
}
```

## 2.4 Teacher Hotspot Flip Viewer

```tsx
// apps/web/src/app/assignments/[id]/page.tsx
"use client";
import React, { useEffect, useState } from "react";
import { api } from "@/lib/api";

/**
 * Displays the assignment flip image with clickable hotspots.
 * Students & teachers can preview and play associated audio per hotspot.
 */
export default function AssignmentViewer({ params }: { params: { id: string } }) {
  const [data, setData] = useState<any>(null);

  useEffect(() => {
    api<any>(`/assignments/${params.id}`).then(setData).catch(console.error);
  }, [params.id]);

  if (!data) return <main className="max-w-4xl mx-auto p-6">Loading…</main>;

  const { image_s3_url, hotspots = [] } = data;

  return (
    <main className="max-w-4xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">{data.title}</h1>

      {!image_s3_url ? (
        <div className="text-sm text-gray-600">No image attached to this assignment.</div>
      ) : (
        <div className="relative inline-block rounded-lg overflow-hidden shadow">
          {/* Flip page (static single image; extend to multi-page flipbook later) */}
          <img src={image_s3_url} alt="assignment" className="max-w-full select-none block" />

          {/* Hotspot overlays */}
          {hotspots.map((h: any) => (
            <button
              key={h.id}
              title={h.tooltip || h.title || "Hotspot"}
              className="absolute border-2 border-emerald-500/80 bg-emerald-500/10 hover:bg-emerald-500/20 rounded"
              style={{ left: h.x, top: h.y, width: h.width, height: h.height }}
              onClick={() => {
                if (h.audio_s3_url) {
                  const a = new Audio(h.audio_s3_url);
                  a.play();
                } else {
                  alert(h.tooltip || h.title || "Hotspot");
                }
              }}
            />
          ))}
        </div>
      )}

      <div className="mt-6 rounded-2xl p-4 bg-white shadow">
        <div className="font-semibold mb-2">Hotspots</div>
        <ul className="text-sm list-disc pl-5">
          {hotspots.map((h: any) => (
            <li key={h.id}>
              <span className="font-medium">{h.title || `Hotspot #${h.id}`}</span>{" "}
              — {h.tooltip || "No description"}{" "}
              {h.audio_s3_url && (
                <button
                  className="ml-2 text-emerald-700 underline"
                  onClick={() => new Audio(h.audio_s3_url).play()}
                >
                  Play audio
                </button>
              )}
            </li>
          ))}
          {hotspots.length === 0 && <li>No hotspots defined.</li>}
        </ul>
      </div>
    </main>
  );
}
```

## 2.5 Reader + Recorder demo page

```tsx
// apps/web/src/app/reader/recite/page.tsx
"use client";
import React, { useState } from "react";
import AudioRecorder from "@/components/AudioRecorder";
import RecitationStatus from "@/components/RecitationStatus";

/** Simple flow: record, upload, then poll for Whisper feedback. */
export default function Recite() {
  const [rid, setRid] = useState<number | null>(null);

  return (
    <main className="max-w-3xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">Recite & Get Feedback</h1>
      <AudioRecorder surahId={1} ayahFrom={1} ayahTo={7} onUploaded={setRid} />
      <div className="mt-4">
        {rid ? <RecitationStatus id={rid} /> : <div className="text-sm text-gray-600">Record to begin.</div>}
      </div>
    </main>
  );
}
```

---

# 3) Console Kernel — Schedules (leaderboard & SRS precompute)

```php
// apps/api/app/Console/Kernel.php (add to schedule method)
protected function schedule(\Illuminate\Console\Scheduling\Schedule $schedule): void
{
    // Run queued jobs frequently using DB driver.
    $schedule->command('queue:work --stop-when-empty')->everyMinute();

    // Snapshot leaderboards (hourly)
    $schedule->call(function () {
        // TODO: compute real snapshots; here we stub
        \App\Models\LeaderboardSnapshot::updateOrCreate(
            ['scope'=>'global','period'=>now()->format('o-\WW').':weekly'],
            ['data_json'=>['entries'=>[]]]
        );
    })->hourly();

    // Precompute SRS (nightly)
    $schedule->call(function () {
        // TODO: fill srs_queue from quran_progress stats
        // Keep light for shared hosting
    })->dailyAt('01:00');
}
```

---

# 4) Windows Run Notes (recap)

1. **Migrate**:
   `cd apps/api && php artisan migrate --force`

2. **Build Web**:
   `powershell ./scripts/build-web.ps1`

3. **Queue + Schedule (cPanel)**:

   * `php /home/USER/apps/api/artisan schedule:run >> /home/USER/logs/schedule.log 2>&1` (every minute)
   * or add another cron:
     `php /home/USER/apps/api/artisan queue:work --stop-when-empty >> /home/USER/logs/queue.log 2>&1`

4. **ENV**: set `OPENAI_API_KEY`, S3 credentials, `PAYSTACK_*`, `QURAN_API_BASE`.



# 1) Database: flipbooks, hasanat totals, bookmarks, indexes

## 1.1 Users: total hasanat counter

```php
// apps/api/database/migrations/2025_01_03_000012_add_hasnat_total_to_users.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Add overall hasanat_total to users for fast leaderboards. */
    public function up(): void {
        Schema::table('users', function (Blueprint $table) {
            $table->unsignedBigInteger('hasanat_total')->default(0)->after('password');
            $table->string('country', 2)->nullable()->after('hasanat_total'); // optional for leaderboard flag
        });
    }
    public function down(): void {
        Schema::table('users', function (Blueprint $table) {
            $table->dropColumn(['hasanat_total','country']);
        });
    }
};
```

## 1.2 Assignment pages (multi-page flipbooks)

```php
// apps/api/database/migrations/2025_01_03_000013_create_assignment_pages_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Multi-page flipbook support for assignments. */
    public function up(): void {
        Schema::create('assignment_pages', function (Blueprint $table) {
            $table->id();
            $table->foreignId('assignment_id')->constrained('assignments')->cascadeOnDelete();
            $table->unsignedInteger('page_index'); // 0-based ordering
            $table->string('image_s3_url');        // public/signed URL
            $table->timestamps();
            $table->unique(['assignment_id','page_index']);
        });
    }
    public function down(): void { Schema::dropIfExists('assignment_pages'); }
};
```

## 1.3 Hotspots → link to page (optional)

```php
// apps/api/database/migrations/2025_01_03_000014_update_hotspots_add_page_id.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Allow hotspots to be attached to a specific page of a flipbook. */
    public function up(): void {
        Schema::table('hotspots', function (Blueprint $table) {
            $table->foreignId('assignment_page_id')->nullable()->after('assignment_id')
                  ->constrained('assignment_pages')->cascadeOnDelete();
        });
    }
    public function down(): void {
        Schema::table('hotspots', function (Blueprint $table) {
            $table->dropConstrainedForeignId('assignment_page_id');
        });
    }
};
```

## 1.4 Bookmarks (optional but handy)

```php
// apps/api/database/migrations/2025_01_03_000015_create_bookmarks_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Store per-user bookmarks to resume reading quickly. */
    public function up(): void {
        Schema::create('bookmarks', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained('users')->cascadeOnDelete();
            $table->unsignedSmallInteger('surah_id');
            $table->unsignedSmallInteger('ayah_id');
            $table->timestamps();
            $table->unique(['user_id','surah_id','ayah_id']);
        });
    }
    public function down(): void { Schema::dropIfExists('bookmarks'); }
};
```

## 1.5 Indexes for progress queries

```php
// apps/api/database/migrations/2025_01_03_000016_add_index_to_quran_progress.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Speed up progress lookups. */
    public function up(): void {
        Schema::table('quran_progress', function (Blueprint $table) {
            $table->index(['user_id','last_seen_at']);
        });
    }
    public function down(): void {
        Schema::table('quran_progress', function (Blueprint $table) {
            $table->dropIndex(['user_id','last_seen_at']);
        });
    }
};
```

---

# 2) Models & Services

## 2.1 Models

```php
// apps/api/app/Models/AssignmentPage.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class AssignmentPage extends Model
{
    protected $fillable = ['assignment_id','page_index','image_s3_url'];

    /** Parent assignment. */
    public function assignment() { return $this->belongsTo(Assignment::class); }

    /** Hotspots on this page. */
    public function hotspots() { return $this->hasMany(Hotspot::class); }
}
```

```php
// apps/api/app/Models/Assignment.php (add relations)
public function pages() { return $this->hasMany(\App\Models\AssignmentPage::class)->orderBy('page_index'); }
```

```php
// apps/api/app/Models/Hotspot.php (add relation)
public function page() { return $this->belongsTo(\App\Models\AssignmentPage::class, 'assignment_page_id'); }
```

```php
// apps/api/app/Models/Bookmark.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Bookmark extends Model
{
    protected $fillable = ['user_id','surah_id','ayah_id'];
    /** Owner user. */
    public function user() { return $this->belongsTo(User::class); }
}
```

## 2.2 Services

```php
// apps/api/app/Services/Hasanat.php
<?php

namespace App\Services;

/**
 * Hasanat service computes reward points for Arabic text.
 * Rule: hasanat = number_of_arabic_letters * 10 (ignoring diacritics/whitespace).
 */
class Hasanat
{
    /** Compute hasanat from raw Arabic text. */
    public static function compute(string $arabic): int
    {
        $normalized = \Normalizer::normalize($arabic, \Normalizer::FORM_KD) ?? $arabic;
        $noDiacritics = preg_replace('/[\x{064B}-\x{065F}\x{0670}\x{06D6}-\x{06ED}]/u', '', $normalized);
        preg_match_all('/[\x{0621}-\x{064A}]/u', $noDiacritics, $m);
        $letters = count($m[0] ?? []);
        return $letters * 10;
    }
}
```

```php
// apps/api/app/Services/Srs.php
<?php

namespace App\Services;

use Carbon\Carbon;

/**
 * Minimal SM-2-like SRS functions for ayah reviews.
 * Stores ease_factor, interval (days), repetitions, due_at.
 */
class Srs
{
    /** Calculate next review parameters from a quality score (0..5). */
    public static function next(float $ease, int $interval, int $reps, int $quality): array
    {
        // Fail resets
        if ($quality < 3) {
            return [max(1.3, $ease - 0.2), 1, 0, now()->addDays(1)];
        }

        // Update EF (SM-2 formula)
        $newEase = $ease + (0.1 - (5 - $quality) * (0.08 + (5 - $quality) * 0.02));
        $newEase = max(1.3, $newEase);

        $newReps = $reps + 1;
        $newInterval = $newReps == 1 ? 1 : ($newReps == 2 ? 6 : (int) round($interval * $newEase));

        return [$newEase, $newInterval, $newReps, now()->addDays($newInterval)];
    }
}
```

---

# 3) Controllers: flipbook pages, bookmarks, progress/hasanat, SRS + leaderboard

## 3.1 Assignment pages CRUD (teacher-only)

```php
// apps/api/app/Http/Controllers/Core/AssignmentPageController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\Assignment;
use App\Models\AssignmentPage;
use Illuminate\Http\Request;

class AssignmentPageController extends Controller
{
    /**
     * Add a page to an assignment flipbook (teacher/admin).
     * @param Request $request expects image_s3_url, page_index
     */
    public function store(Request $request, Assignment $assignment) {
        $this->authorizeOwner($request, $assignment);
        $data = $request->validate([
            'image_s3_url'=>'required|url',
            'page_index'=>'required|integer|min:0'
        ]);
        $page = $assignment->pages()->create($data);
        return response()->json($page, 201);
    }

    /** Update page (reorder or change image). */
    public function update(Request $request, AssignmentPage $page) {
        $this->authorizeOwner($request, $page->assignment);
        $data = $request->validate([
            'image_s3_url'=>'nullable|url',
            'page_index'=>'nullable|integer|min:0'
        ]);
        $page->update($data);
        return response()->json($page);
    }

    /** Delete a page and cascading hotspots. */
    public function destroy(Request $request, AssignmentPage $page) {
        $this->authorizeOwner($request, $page->assignment);
        $page->delete();
        return response()->json(['ok'=>true]);
    }

    /** Guard helper for teacher/admin ownership. */
    private function authorizeOwner(Request $request, Assignment $a): void {
        $u = $request->user();
        abort_unless($u->hasRole('admin') || $a->teacher_id === $u->id, 403);
    }
}
```

> **Routes (append):**

```php
// apps/api/routes/api.php (inside auth:sanctum group)
use App\Http\Controllers\Core\AssignmentPageController;

Route::post('/assignments/{assignment}/pages', [AssignmentPageController::class, 'store']);
Route::patch('/assignment-pages/{page}', [AssignmentPageController::class, 'update']);
Route::delete('/assignment-pages/{page}', [AssignmentPageController::class, 'destroy']);
```

## 3.2 Bookmarks

```php
// apps/api/app/Http/Controllers/Core/BookmarkController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\Bookmark;
use Illuminate\Http\Request;

class BookmarkController extends Controller
{
    /** Toggle a bookmark for current user. */
    public function toggle(Request $request) {
        $u = $request->user();
        $data = $request->validate([
            'surah_id'=>'required|integer|min:1|max:114',
            'ayah_id'=>'required|integer|min:1'
        ]);
        $found = Bookmark::where('user_id',$u->id)->where($data)->first();
        if ($found) { $found->delete(); return response()->json(['bookmarked'=>false]); }
        Bookmark::create(['user_id'=>$u->id, ...$data]);
        return response()->json(['bookmarked'=>true]);
    }

    /** List bookmarks for the current user. */
    public function index(Request $request) {
        return response()->json(
            Bookmark::where('user_id',$request->user()->id)->orderBy('updated_at','desc')->get()
        );
    }
}
```

> **Routes (append):**

```php
// apps/api/routes/api.php (inside auth:sanctum group)
use App\Http\Controllers\Core\BookmarkController;
Route::get('/bookmarks', [BookmarkController::class, 'index']);
Route::post('/bookmarks/toggle', [BookmarkController::class, 'toggle']);
```

## 3.3 Progress & Hasanat aggregation (+light SRS hook)

```php
// apps/api/app/Http/Controllers/Core/ProgressController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\QuranProgress;
use App\Services\Hasanat;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class ProgressController extends Controller
{
    /**
     * Tick progress for an ayah (called when user completes reading/reciting one ayah).
     * Increments recited_count, computes hasanat from provided Arabic text, and bumps user's hasanat_total.
     * @param Request $request expects: surah_id, ayah_id, arabic_text
     */
    public function tick(Request $request) {
        $u = $request->user();
        $data = $request->validate([
            'surah_id'=>'required|integer|min:1|max:114',
            'ayah_id'=>'required|integer|min:1',
            'arabic_text'=>'required|string'
        ]);

        $points = Hasanat::compute($data['arabic_text']);

        return DB::transaction(function () use ($u, $data, $points) {
            $p = QuranProgress::firstOrCreate([
                'user_id'=>$u->id,
                'surah_id'=>$data['surah_id'],
                'ayah_id'=>$data['ayah_id']
            ], []);
            $p->recited_count++;
            $p->hasanat += $points;
            $p->last_seen_at = now();
            $p->save();

            $u->increment('hasanat_total', $points);

            return response()->json([
                'ok'=>true,
                'gained'=>$points,
                'hasanat_total'=>$u->fresh()->hasanat_total,
                'progress'=>$p
            ]);
        });
    }

    /** Simple summary for dashboard (today / week / all). */
    public function summary(Request $request) {
        $u = $request->user();
        $today = QuranProgress::where('user_id',$u->id)->whereDate('updated_at', today())->get();
        $week  = QuranProgress::where('user_id',$u->id)->whereBetween('updated_at', [now()->startOfWeek(), now()->endOfWeek()])->get();
        $all   = QuranProgress::where('user_id',$u->id)->get();

        $agg = fn($c) => [
            'verses'=> $c->sum('recited_count'),
            'hasanat'=> $c->sum('hasanat'),
        ];

        return response()->json([
            'today'=>$agg($today),
            'week'=>$agg($week),
            'all'=>$agg($all),
            'hasanat_total'=>$u->hasanat_total,
        ]);
    }
}
```

> **Routes (append):**

```php
// apps/api/routes/api.php (inside auth:sanctum group)
use App\Http\Controllers\Core\ProgressController;
Route::post('/progress/tick', [ProgressController::class, 'tick']);
Route::get('/progress/summary', [ProgressController::class, 'summary']);
```

## 3.4 Leaderboard snapshot job (real data)

```php
// apps/api/app/Jobs/BuildLeaderboardSnapshotJob.php
<?php

namespace App\Jobs;

use App\Models\LeaderboardSnapshot;
use App\Models\User;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;

class BuildLeaderboardSnapshotJob implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    public string $scope; // 'global'
    public string $period; // weekly_YYYY_WW | monthly_YYYY_MM

    /** Build a snapshot for a scope+period. */
    public function __construct(string $scope, string $period)
    {
        $this->scope = $scope;
        $this->period = $period;
    }

    /** Compute snapshot from users.hasanat_total (top 50). */
    public function handle(): void
    {
        $entries = User::select('id','name','hasanat_total','country')
            ->orderByDesc('hasanat_total')->limit(50)->get()
            ->map(fn($u)=>[
                'user_id'=>$u->id,
                'name'=>$u->name,
                'country'=>$u->country ?? 'NG',
                'hasanat'=>$u->hasanat_total,
                'badge'=>$u->hasanat_total > 100000 ? 'Hafidh (in progress)' : 'Student'
            ])->values()->all();

        LeaderboardSnapshot::updateOrCreate(
            ['scope'=>$this->scope, 'period'=>$this->period],
            ['data_json'=>['entries'=>$entries]]
        );
    }
}
```

> **Schedule it:**

```php
// apps/api/app/Console/Kernel.php (replace the earlier stub)
protected function schedule(\Illuminate\Console\Scheduling\Schedule $schedule): void
{
    // Process queued jobs with DB driver
    $schedule->command('queue:work --stop-when-empty')->everyMinute();

    // Weekly snapshot (every Friday night 23:55)
    $schedule->call(function () {
        dispatch(new \App\Jobs\BuildLeaderboardSnapshotJob('global', now()->format('weekly_%G_%V')));
    })->weeklyOn(5, '23:55'); // Friday

    // Monthly snapshot (last day 23:55)
    $schedule->call(function () {
        dispatch(new \App\Jobs\BuildLeaderboardSnapshotJob('global', now()->format('monthly_%Y_%m')));
    })->monthlyOn(now()->endOfMonth()->day, '23:55');
}
```

---

# 4) Next.js: Flipbook (multi-page) + Dashboard stats

## 4.1 Flipbook component (with hotspots per page)

```tsx
// apps/web/src/components/Flipbook.tsx
"use client";
import React, { useMemo, useState } from "react";

/**
 * Flipbook renders an image per page with overlayed hotspots.
 * Allows prev/next navigation; hotspots are clickable and may play audio.
 */
export default function Flipbook({
  pages,
  hotspots
}: {
  pages: { id: number; page_index: number; image_s3_url: string }[];
  hotspots: { id: number; assignment_page_id?: number; x: number; y: number; width: number; height: number; title?: string; tooltip?: string; audio_s3_url?: string }[];
}) {
  const [idx, setIdx] = useState(0);
  const current = pages[idx];
  const pageHotspots = useMemo(
    () => hotspots.filter(h => (h.assignment_page_id ?? 0) === current?.id),
    [hotspots, current?.id]
  );

  return (
    <div className="w-full">
      <div className="flex items-center justify-between mb-2">
        <button
          className="px-3 py-1 rounded border"
          onClick={() => setIdx(i => Math.max(0, i - 1))}
          disabled={idx === 0}
        >
          ◀ Prev
        </button>
        <div className="text-sm">Page {idx + 1} / {pages.length}</div>
        <button
          className="px-3 py-1 rounded border"
          onClick={() => setIdx(i => Math.min(pages.length - 1, i + 1))}
          disabled={idx >= pages.length - 1}
        >
          Next ▶
        </button>
      </div>

      {current ? (
        <div className="relative inline-block rounded-lg overflow-hidden shadow">
          <img src={current.image_s3_url} alt={`page-${current.page_index}`} className="max-w-full select-none block" />
          {pageHotspots.map((h) => (
            <button
              key={h.id}
              title={h.tooltip || h.title || "Hotspot"}
              className="absolute border-2 border-emerald-500/80 bg-emerald-500/10 hover:bg-emerald-500/20 rounded"
              style={{ left: h.x, top: h.y, width: h.width, height: h.height }}
              onClick={() => {
                if (h.audio_s3_url) {
                  const a = new Audio(h.audio_s3_url);
                  a.play();
                } else {
                  alert(h.tooltip || h.title || "Hotspot");
                }
              }}
            />
          ))}
        </div>
      ) : (
        <div className="text-sm text-gray-600">No pages.</div>
      )}
    </div>
  );
}
```

## 4.2 Updated Assignment Viewer (uses Flipbook)

```tsx
// apps/web/src/app/assignments/[id]/page.tsx
"use client";
import React, { useEffect, useState } from "react";
import { api } from "@/lib/api";
import Flipbook from "@/components/Flipbook";

/** Displays multi-page assignment with page-scoped hotspots. */
export default function AssignmentViewer({ params }: { params: { id: string } }) {
  const [data, setData] = useState<any>(null);

  useEffect(() => {
    api<any>(`/assignments/${params.id}`).then(setData).catch(console.error);
  }, [params.id]);

  if (!data) return <main className="max-w-4xl mx-auto p-6">Loading…</main>;

  return (
    <main className="max-w-4xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">{data.title}</h1>

      {data.pages?.length ? (
        <Flipbook pages={data.pages} hotspots={data.hotspots || []} />
      ) : (
        <div className="rounded-2xl p-4 shadow bg-white text-sm text-gray-600">
          No pages yet. Ask your teacher to add pages to this assignment.
        </div>
      )}

      <div className="mt-6 rounded-2xl p-4 bg-white shadow">
        <div className="font-semibold mb-2">All Hotspots</div>
        <ul className="text-sm list-disc pl-5">
          {(data.hotspots || []).map((h: any) => (
            <li key={h.id}>
              <span className="font-medium">{h.title || `Hotspot #${h.id}`}</span>{" "}
              — {h.tooltip || "No description"}
            </li>
          ))}
          {(data.hotspots || []).length === 0 && <li>No hotspots defined.</li>}
        </ul>
      </div>
    </main>
  );
}
```

> **Backend change:** return pages with assignment. Update `AssignmentController@show`:

```php
// apps/api/app/Http/Controllers/Core/AssignmentController.php (inside show)
return response()->json($assignment->load(['hotspots','pages']));
```

## 4.3 Dashboard stats: today/week/all

```tsx
// apps/web/src/app/page.tsx (replace content with live stats)
"use client";
import ProgressBar from "@/components/ProgressBar";
import { useEffect, useState } from "react";
import { api } from "@/lib/api";

/** Dashboard: greeting + live summaries from /progress/summary */
export default function Dashboard() {
  const username = "Student";
  const dailyTarget = 10;
  const [sum, setSum] = useState<any>(null);

  useEffect(() => { api<any>("/progress/summary").then(setSum).catch(console.error); }, []);

  const done = sum?.today?.verses ?? 0;
  const pct = (done / dailyTarget) * 100;

  return (
    <main className="max-w-5xl mx-auto p-6">
      <h1 className="text-2xl font-bold">Assalamu Alaikum, {username}</h1>

      <section className="mt-6 rounded-2xl p-4 bg-[#FAF7F2]">
        <div className="mb-2 font-semibold">Daily Recitation Target</div>
        <div className="flex items-center gap-4">
          <ProgressBar value={pct} label={`Today: ${done}/${dailyTarget} ayah`} />
          <button className="px-4 py-2 rounded bg-[#7A001F] text-white">Continue Reading</button>
        </div>
      </section>

      <section className="mt-8 grid md:grid-cols-3 gap-4">
        <div className="rounded-2xl p-4 shadow bg-white">
          <div className="font-semibold mb-1">Hasanat Today</div>
          <div className="text-3xl">+{sum?.today?.hasanat ?? 0}</div>
        </div>
        <div className="rounded-2xl p-4 shadow bg-white">
          <div className="font-semibold mb-1">This Week</div>
          <div className="text-sm">Verses: {sum?.week?.verses ?? 0}</div>
          <div className="text-sm">Hasanat: {sum?.week?.hasanat ?? 0}</div>
        </div>
        <div className="rounded-2xl p-4 shadow bg-white">
          <div className="font-semibold mb-1">All Time</div>
          <div className="text-sm">Hasanat Total: {sum?.hasanat_total ?? 0}</div>
        </div>
      </section>
    </main>
  );
}
```

---

# 5) Reader: “tick” progress example (front-end helper)

```tsx
// apps/web/src/components/VerseLine.tsx
"use client";
import React from "react";
import { api } from "@/lib/api";

/**
 * Renders one ayah and lets the user "Complete" it to earn hasanat.
 * Calls /progress/tick to update stats.
 */
export default function VerseLine({
  surahId, ayahId, text
}: { surahId: number; ayahId: number; text: string }) {

  async function completeAyah() {
    await api("/progress/tick", {
      method: "POST",
      body: JSON.stringify({ surah_id: surahId, ayah_id: ayahId, arabic_text: text })
    });
    alert("Ayah recorded. Hasanat added.");
  }

  return (
    <div className="border-b pb-3">
      <div className="text-xl leading-[2.2rem]">{text}</div>
      <button className="mt-2 px-3 py-1 rounded bg-emerald-600 text-white" onClick={completeAyah}>
        Mark Complete
      </button>
    </div>
  );
}
```

> **Use VerseLine inside Reader page (swap the verse map):**

```tsx
// apps/web/src/app/reader/page.tsx (replace verse render block)
{surah.verses?.verses?.map((v: any) => (
  <VerseLine
    key={v.id}
    surahId={surah.meta?.chapter?.id}
    ayahId={v.verse_number}
    text={v.text_uthmani}
  />
))}
```

---

# 6) Windows scripts (optional helpers)

**Seed roles & demo users quickly**

```powershell
# scripts/seed.ps1
param()
cd apps/api
php artisan db:seed --class=RolesSeeder
php artisan db:seed --class=DemoUsersSeeder
```

**One-shot queue worker for local dev**

```powershell
# scripts/queue-once.ps1
param()
cd apps/api
php artisan queue:work --stop-when-empty


# 1) Laravel API — Assets, Hotspot Editor save, SRS, Notifications, Premium

## 1.1 General asset presign (images/audio for assignments & hotspots)

```php
// apps/api/app/Http/Controllers/Core/AssetController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Aws\S3\S3Client;

/**
 * Issues pre-signed S3 PUT URLs for images/audio used in assignments/hotspots.
 * Keeps secrets server-side and generates short-lived upload links.
 */
class AssetController extends Controller
{
    /** Issue a presigned PUT for an asset (image|audio). */
    public function initUpload(Request $request) {
        $u = $request->user();
        $data = $request->validate([
            'content_type'=>'required|string|max:100',
            'kind'=>'required|in:image,audio,other'
        ]);

        // Lightweight allowlist
        $ok = [
            'image/jpeg','image/png','image/webp','image/svg+xml',
            'audio/mpeg','audio/mp4','audio/webm','audio/ogg','audio/x-wav','audio/wav'
        ];
        abort_unless(in_array($data['content_type'], $ok), 422);

        // Build a namespaced key per user
        $ext = $this->extFromMime($data['content_type']);
        $key = "assets/{$u->id}/".Str::uuid().".$ext";

        /** @var \League\Flysystem\AwsS3V3\AwsS3V3Adapter $adapter */
        $adapter = Storage::disk('s3')->getAdapter();
        /** @var S3Client $client */
        $client = $adapter->getClient();
        $bucket = config('filesystems.disks.s3.bucket');

        $cmd = $client->getCommand('PutObject', [
            'Bucket'=>$bucket,
            'Key'=>$key,
            'ContentType'=>$data['content_type'],
            'ACL'=>'private'
        ]);
        $putUrl = (string)$client->createPresignedRequest($cmd, '+15 minutes')->getUri();

        // A short-lived GET url for immediate preview (the asset won’t exist until uploaded)
        $getUrl = Storage::disk('s3')->temporaryUrl($key, now()->addHours(6));

        return response()->json([
            'key'=>$key,
            'put_url'=>$putUrl,
            'get_url'=>$getUrl,
        ]);
    }

    /** Map limited MIME types to safe extensions. */
    private function extFromMime(string $mime): string {
        return match($mime) {
            'image/jpeg' => 'jpg',
            'image/png' => 'png',
            'image/webp' => 'webp',
            'image/svg+xml' => 'svg',
            'audio/mpeg' => 'mp3',
            'audio/mp4' => 'm4a',
            'audio/webm' => 'webm',
            'audio/ogg' => 'ogg',
            'audio/x-wav', 'audio/wav' => 'wav',
            default => 'bin'
        };
    }
}
```

**Route (auth\:sanctum):**

```php
// apps/api/routes/api.php
use App\Http\Controllers\Core\AssetController;
Route::post('/assets/upload/init', [AssetController::class, 'initUpload']);
```

## 1.2 Hotspots save/update/delete (used by the editor)

```php
// apps/api/app/Http/Controllers/Core/HotspotController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\Assignment;
use App\Models\Hotspot;
use Illuminate\Http\Request;

/**
 * CRUD for hotspots: rectangles with optional tooltip/audio mapped to assignment pages.
 */
class HotspotController extends Controller
{
    /** List hotspots for an assignment (teacher or assigned students). */
    public function index(Request $request, Assignment $assignment) {
        $this->authorizeView($request, $assignment);
        return response()->json($assignment->hotspots()->orderBy('id','asc')->get());
    }

    /** Create a hotspot on an assignment (teacher/admin). */
    public function store(Request $request, Assignment $assignment) {
        $this->authorizeOwner($request, $assignment);
        $data = $request->validate([
            'assignment_page_id'=>'nullable|exists:assignment_pages,id',
            'x'=>'required|numeric|min:0',
            'y'=>'required|numeric|min:0',
            'width'=>'required|numeric|min:1',
            'height'=>'required|numeric|min:1',
            'title'=>'nullable|string|max:120',
            'tooltip'=>'nullable|string|max:500',
            'audio_s3_url'=>'nullable|url'
        ]);
        $data['assignment_id'] = $assignment->id;
        $h = Hotspot::create($data);
        return response()->json($h, 201);
    }

    /** Update a hotspot. */
    public function update(Request $request, Hotspot $hotspot) {
        $this->authorizeOwner($request, $hotspot->assignment);
        $data = $request->validate([
            'x'=>'nullable|numeric|min:0',
            'y'=>'nullable|numeric|min:0',
            'width'=>'nullable|numeric|min:1',
            'height'=>'nullable|numeric|min:1',
            'title'=>'nullable|string|max:120',
            'tooltip'=>'nullable|string|max:500',
            'audio_s3_url'=>'nullable|url'
        ]);
        $hotspot->update($data);
        return response()->json($hotspot);
    }

    /** Delete a hotspot. */
    public function destroy(Request $request, Hotspot $hotspot) {
        $this->authorizeOwner($request, $hotspot->assignment);
        $hotspot->delete();
        return response()->json(['ok'=>true]);
    }

    /** Allow teacher/admin to modify; students may only view if assigned. */
    private function authorizeOwner(Request $request, Assignment $a): void {
        $u = $request->user();
        abort_unless($u->hasRole('admin') || $a->teacher_id === $u->id, 403);
    }
    private function authorizeView(Request $request, Assignment $a): void {
        $u = $request->user();
        if ($u->hasRole('admin') || $a->teacher_id === $u->id) return;
        abort_unless($a->class?->members()->where('user_id',$u->id)->exists(), 403);
    }
}
```

**Routes:**

```php
// apps/api/routes/api.php
use App\Http\Controllers\Core\HotspotController;
Route::get('/assignments/{assignment}/hotspots', [HotspotController::class,'index']);
Route::post('/assignments/{assignment}/hotspots', [HotspotController::class,'store']);
Route::patch('/hotspots/{hotspot}', [HotspotController::class,'update']);
Route::delete('/hotspots/{hotspot}', [HotspotController::class,'destroy']);
```

## 1.3 SRS endpoints (fetch due; submit review quality)

```php
// apps/api/app/Http/Controllers/Core/SrsController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\SrsQueue;
use App\Services\Srs;
use Illuminate\Http\Request;

/**
 * Endpoints for spaced repetition reviews per ayah.
 * - GET /srs/due => items due today
 * - POST /srs/review => submit quality score to schedule next interval
 */
class SrsController extends Controller
{
    /** Return items due now for the current user (limit 50). */
    public function due(Request $request) {
        $u = $request->user();
        $items = SrsQueue::where('user_id',$u->id)
            ->where('due_at','<=', now())
            ->orderBy('due_at','asc')->limit(50)->get();
        return response()->json($items);
    }

    /**
     * Submit a quality score (0..5) for an SRS item; computes next due_at.
     * @param srs_id, quality
     */
    public function review(Request $request) {
        $u = $request->user();
        $data = $request->validate([
            'srs_id'=>'required|exists:srs_queue,id',
            'quality'=>'required|integer|min:0|max:5'
        ]);
        $item = SrsQueue::where('id',$data['srs_id'])->where('user_id',$u->id)->firstOrFail();

        [$ef, $interval, $reps, $next] = Srs::next(
            $item->ease_factor, $item->interval, $item->repetitions, $data['quality']
        );

        $item->update([
            'ease_factor'=>$ef,
            'interval'=>$interval,
            'repetitions'=>$reps,
            'due_at'=>$next,
            'last_quality'=>$data['quality']
        ]);

        return response()->json($item->fresh());
    }
}
```

**Routes:**

```php
// apps/api/routes/api.php
use App\Http\Controllers\Core\SrsController;
Route::get('/srs/due', [SrsController::class,'due']);
Route::post('/srs/review', [SrsController::class,'review']);
```

> Ensure `SrsQueue` model exists with fields: `user_id, surah_id, ayah_id, ease_factor (float, default 2.5), interval (int), repetitions (int), due_at (datetime), last_quality (int|null)`.

## 1.4 Notifications (email fallback for routine reminders)

```php
// apps/api/app/Mail/RoutineReminderMail.php
<?php

namespace App\Mail;

use Illuminate\Bus\Queueable;
use Illuminate\Mail\Mailable;
use Illuminate\Queue\SerializesModels;

/** Simple routine reminder email using Markdown. */
class RoutineReminderMail extends Mailable
{
    use Queueable, SerializesModels;

    public string $title;
    public string $body;

    public function __construct(string $title, string $body) {
        $this->title = $title; $this->body = $body;
    }

    public function build() {
        return $this->subject($this->title)->markdown('emails.routine', [
            'title'=>$this->title, 'body'=>$this->body
        ]);
    }
}
```

```php
// apps/api/resources/views/emails/routine.blade.php
@component('mail::message')
# {{ $title }}

{{ $body }}

@component('mail::button', ['url' => config('app.url')])
Open AlFawz Qur’an Institute
@endcomponent

BarakAllahu feek,<br>
AlFawz Team
@endcomponent
```

```php
// apps/api/app/Http/Controllers/Core/NotificationController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Mail\RoutineReminderMail;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Mail;

/** Sends immediate email reminder as a fallback to PWA notifications. */
class NotificationController extends Controller
{
    /** Send a simple routine reminder email to the current user. */
    public function sendEmail(Request $request) {
        $u = $request->user();
        $data = $request->validate([
            'title'=>'required|string|max:120',
            'body'=>'required|string|max:1000',
        ]);
        Mail::to($u->email)->queue(new RoutineReminderMail($data['title'], $data['body']));
        return response()->json(['ok'=>true]);
    }
}
```

**Route:**

```php
// apps/api/routes/api.php
use App\Http\Controllers\Core\NotificationController;
Route::post('/notify/email', [NotificationController::class,'sendEmail']);
```

## 1.5 Premium gating

### Migration

```php
// apps/api/database/migrations/2025_01_04_000017_add_premium_to_users.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Add premium flags to users for gating features. */
    public function up(): void {
        Schema::table('users', function (Blueprint $t) {
            $t->boolean('is_premium')->default(false)->after('country');
            $t->string('plan')->nullable()->after('is_premium');
        });
    }
    public function down(): void {
        Schema::table('users', function (Blueprint $t) {
            $t->dropColumn(['is_premium','plan']);
        });
    }
};
```

### Middleware

```php
// apps/api/app/Http/Middleware/EnsurePremium.php
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;

/** Blocks access to premium-only endpoints when user is not premium. */
class EnsurePremium
{
    public function handle(Request $request, Closure $next) {
        $u = $request->user();
        abort_if(!$u || !$u->is_premium, 402, 'Premium required'); // 402 Payment Required
        return $next($request);
    }
}
```

**Register & use (example):**

```php
// apps/api/app/Http/Kernel.php (routeMiddleware)
'premium' => \App\Http\Middleware\EnsurePremium::class,
```

Then protect routes like: `Route::get('/srs/due', ...)->middleware('premium');` (optional).

---

# 2) Next.js — Hotspot Editor (Fabric.js), SRS UI, Audio Player, Notifications, Paystack

## 2.1 Hotspot Editor (Fabric.js)

```tsx
// apps/web/src/app/teacher/assignments/[id]/editor/page.tsx
"use client";
import React, { useEffect, useRef, useState } from "react";
import { fabric } from "fabric";
import { api } from "@/lib/api";

/**
 * Teacher Hotspot Editor:
 * - Loads the first page image as canvas background.
 * - Allows drawing rectangles; each rect maps to a hotspot.
 * - Right panel edits tooltip/title and uploads audio via S3 PUT.
 */
export default function HotspotEditor({ params }: { params: { id: string } }) {
  const [assignment, setAssignment] = useState<any>(null);
  const [selected, setSelected] = useState<any>(null);
  const [uploading, setUploading] = useState(false);
  const canvasRef = useRef<fabric.Canvas | null>(null);
  const containerRef = useRef<HTMLDivElement | null>(null);

  /** Load assignment with pages & hotspots. */
  useEffect(() => {
    api<any>(`/assignments/${params.id}`).then(setAssignment);
  }, [params.id]);

  /** Initialize Fabric canvas with background image. */
  useEffect(() => {
    if (!assignment?.pages?.length) return;
    const imgUrl = assignment.pages[0].image_s3_url; // choose page 0; can extend to picker

    const can = new fabric.Canvas("hotspot-canvas", { selection: true });
    canvasRef.current = can;

    fabric.Image.fromURL(imgUrl, (img) => {
      // Fit image within container width
      const maxW = 900;
      const scale = Math.min(1, maxW / (img.width || maxW));
      img.scale(scale);
      can.setWidth((img.width || maxW) * scale);
      can.setHeight((img.height || 600) * scale);
      can.setBackgroundImage(img, can.renderAll.bind(can));
    }, { crossOrigin: "anonymous" });

    // Add existing hotspots
    (assignment.hotspots || []).forEach((h: any) => {
      const rect = new fabric.Rect({
        left: h.x, top: h.y, width: h.width, height: h.height,
        fill: "rgba(16,185,129,0.15)", stroke: "rgba(16,185,129,0.8)", strokeWidth: 2
      });
      // Attach metadata
      // @ts-ignore
      rect._hotspot = h;
      can.add(rect);
    });

    can.on("selection:created", (e) => setSelected(e.selected?.[0] || null));
    can.on("selection:updated", (e) => setSelected(e.selected?.[0] || null));
    can.on("selection:cleared", () => setSelected(null));

    return () => { can.dispose(); };
  }, [assignment]);

  /** Draw a new rectangle hotspot. */
  function drawRect() {
    const can = canvasRef.current!;
    const rect = new fabric.Rect({
      left: 50, top: 50, width: 120, height: 60,
      fill: "rgba(16,185,129,0.15)", stroke: "rgba(16,185,129,0.8)", strokeWidth: 2
    });
    // @ts-ignore
    rect._hotspot = { title: "", tooltip: "", audio_s3_url: "" };
    can.add(rect).setActiveObject(rect);
  }

  /** Save currently selected rectangle as a hotspot. */
  async function saveSelected() {
    if (!selected || !assignment) return;
    // @ts-ignore
    const meta = selected._hotspot || {};
    const payload = {
      assignment_page_id: assignment.pages[0].id,
      x: selected.left, y: selected.top, width: selected.width * selected.scaleX, height: selected.height * selected.scaleY,
      title: meta.title, tooltip: meta.tooltip, audio_s3_url: meta.audio_s3_url || null
    };

    if (meta.id) {
      const updated = await api(`/hotspots/${meta.id}`, { method: "PATCH", body: JSON.stringify(payload) });
      // @ts-ignore
      selected._hotspot = updated;
      alert("Hotspot updated.");
    } else {
      const created = await api(`/assignments/${assignment.id}/hotspots`, { method: "POST", body: JSON.stringify(payload) });
      // @ts-ignore
      selected._hotspot = created;
      alert("Hotspot created.");
    }
  }

  /** Delete selected hotspot. */
  async function deleteSelected() {
    if (!selected?._hotspot?.id) return;
    await api(`/hotspots/${selected._hotspot.id}`, { method: "DELETE" });
    canvasRef.current?.remove(selected);
    setSelected(null);
  }

  /** Upload audio for hotspot using presigned PUT. */
  async function uploadAudio(e: React.ChangeEvent<HTMLInputElement>) {
    const file = e.target.files?.[0];
    if (!file || !selected) return;
    setUploading(true);
    try {
      const init = await api<any>("/assets/upload/init", {
        method: "POST",
        body: JSON.stringify({ content_type: file.type, kind: "audio" })
      });
      await fetch(init.put_url, { method: "PUT", headers: { "Content-Type": file.type }, body: file });
      // @ts-ignore
      selected._hotspot = { ...(selected._hotspot || {}), audio_s3_url: init.get_url };
      alert("Audio uploaded. Save hotspot to persist.");
    } finally {
      setUploading(false);
    }
  }

  /** Update metadata fields on selected object. */
  function setMeta(key: "title"|"tooltip", val: string) {
    if (!selected) return;
    // @ts-ignore
    selected._hotspot = { ...(selected._hotspot || {}), [key]: val };
    setSelected({ ...selected }); // trigger re-render
  }

  return (
    <main className="p-6 max-w-6xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">Hotspot Editor</h1>
      {!assignment?.pages?.length ? (
        <div className="text-sm text-gray-600">Add a page to this assignment first.</div>
      ) : (
        <div className="grid md:grid-cols-[1fr,320px] gap-6">
          <div ref={containerRef}>
            <canvas id="hotspot-canvas" />
          </div>

          <aside className="rounded-2xl p-4 bg-white shadow h-fit">
            <div className="flex items-center justify-between mb-3">
              <div className="font-semibold">Properties</div>
              <button className="px-3 py-1 rounded border" onClick={drawRect}>+ Rect</button>
            </div>

            {selected ? (
              <>
                <div className="mb-2">
                  <label className="text-xs uppercase text-gray-500">Title</label>
                  <input
                    className="w-full border rounded px-3 py-2"
                    value={selected._hotspot?.title || ""}
                    onChange={(e)=>setMeta("title", e.target.value)}
                  />
                </div>
                <div className="mb-2">
                  <label className="text-xs uppercase text-gray-500">Tooltip</label>
                  <textarea
                    className="w-full border rounded px-3 py-2"
                    rows={3}
                    value={selected._hotspot?.tooltip || ""}
                    onChange={(e)=>setMeta("tooltip", e.target.value)}
                  />
                </div>

                <div className="mb-3">
                  <label className="text-xs uppercase text-gray-500">Audio (optional)</label>
                  <input type="file" accept="audio/*" onChange={uploadAudio} disabled={uploading} />
                  {selected._hotspot?.audio_s3_url && (
                    <audio className="mt-2 w-full" controls src={selected._hotspot.audio_s3_url} />
                  )}
                </div>

                <div className="flex gap-2">
                  <button className="px-4 py-2 rounded bg-emerald-600 text-white" onClick={saveSelected}>Save</button>
                  <button className="px-4 py-2 rounded bg-red-600 text-white" onClick={deleteSelected}>Delete</button>
                </div>
              </>
            ) : (
              <div className="text-sm text-gray-600">Select a rectangle to edit its properties.</div>
            )}
          </aside>
        </div>
      )}
    </main>
  );
}
```

> Install Fabric.js: `npm i fabric`

## 2.2 SRS UI — Due list & review quality

```tsx
// apps/web/src/app/memorize/page.tsx
"use client";
import React, { useEffect, useState } from "react";
import { api } from "@/lib/api";

/**
 * Memorization queue viewer: shows due items and lets user grade (0..5).
 * Calls backend to compute next interval.
 */
export default function Memorize() {
  const [items, setItems] = useState<any[]>([]);
  const [busy, setBusy] = useState(false);

  async function load() {
    const res = await api<any[]>("/srs/due");
    setItems(res);
  }
  useEffect(()=>{ load(); }, []);

  /** Submit a quality score and refresh the list. */
  async function review(id: number, q: number) {
    setBusy(true);
    try {
      await api("/srs/review", { method: "POST", body: JSON.stringify({ srs_id: id, quality: q }) });
      await load();
    } finally { setBusy(false); }
  }

  return (
    <main className="max-w-3xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">Memorization Reviews</h1>
      <div className="rounded-2xl p-4 bg-white shadow">
        {items.length === 0 ? (
          <div className="text-sm text-gray-600">No items due right now. Great job!</div>
        ) : items.map((it)=>(
          <div key={it.id} className="border-b py-3">
            <div className="font-medium">Surah {it.surah_id} • Ayah {it.ayah_id}</div>
            <div className="text-xs text-gray-600 mb-2">EF {it.ease_factor.toFixed(2)} • Interval {it.interval}d • Reps {it.repetitions}</div>
            <div className="flex gap-2">
              {[0,1,2,3,4,5].map((q)=>(
                <button key={q} disabled={busy}
                        className="px-3 py-1 rounded border hover:bg-gray-50"
                        onClick={()=>review(it.id, q)}>
                  {q}
                </button>
              ))}
            </div>
          </div>
        ))}
      </div>
    </main>
  );
}
```

## 2.3 Audio Player with AB loop & speed

```tsx
// apps/web/src/components/VerseAudioPlayer.tsx
"use client";
import React, { useEffect, useRef, useState } from "react";

/**
 * Simple audio player with AB loop and playback rate control.
 * Supply a per-ayah audio URL (from Qur'an API or cached S3).
 */
export default function VerseAudioPlayer({ src }: { src: string }) {
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const [rate, setRate] = useState(1);
  const [a, setA] = useState<number | null>(null);
  const [b, setB] = useState<number | null>(null);
  const [active, setActive] = useState(false);

  /** Tick checker for AB loop boundaries. */
  useEffect(() => {
    const el = audioRef.current;
    if (!el) return;
    const onTime = () => {
      if (active && a !== null && b !== null && el.currentTime >= b) el.currentTime = a;
    };
    el.addEventListener("timeupdate", onTime);
    return () => el.removeEventListener("timeupdate", onTime);
  }, [a, b, active]);

  /** Update playback rate on change. */
  useEffect(()=>{ if (audioRef.current) audioRef.current.playbackRate = rate; }, [rate]);

  return (
    <div className="rounded-2xl p-3 bg-white shadow">
      <audio ref={audioRef} controls src={src} className="w-full mb-2" />

      <div className="flex items-center gap-3 text-sm">
        <button className="px-2 py-1 border rounded" onClick={() => setA(audioRef.current?.currentTime || 0)}>Set A</button>
        <button className="px-2 py-1 border rounded" onClick={() => setB(audioRef.current?.currentTime || 0)}>Set B</button>
        <button className="px-2 py-1 border rounded" onClick={() => setActive((v)=>!v)}>
          {active ? "Disable Loop" : "Enable Loop"}
        </button>
        <div className="ml-auto flex items-center gap-2">
          <span>Speed</span>
          <input type="range" min={0.5} max={1.5} step={0.05} value={rate}
                 onChange={(e)=>setRate(parseFloat(e.target.value))}/>
          <span>{rate.toFixed(2)}×</span>
        </div>
      </div>
      {a !== null && b !== null && (
        <div className="mt-1 text-xs text-gray-600">Loop {a.toFixed(1)}s → {b.toFixed(1)}s</div>
      )}
    </div>
  );
}
```

## 2.4 Routine Notifications (PWA + email fallback)

**Service worker & registration**

```ts
// apps/web/public/sw.js
// Minimal SW for caching and receiving push later. Currently used for showing notifications.
self.addEventListener("install", (e) => self.skipWaiting());
self.addEventListener("activate", (e) => self.clients.claim());
```

```tsx
// apps/web/src/app/layout.tsx (add registration once globally)
"use client";
import { useEffect } from "react";

export default function RootLayout({ children }: { children: React.ReactNode }) {
  useEffect(() => {
    // Register SW for notifications
    if ("serviceWorker" in navigator) {
      navigator.serviceWorker.register("/sw.js").catch(console.error);
    }
  }, []);
  return <html lang="en"><body>{children}</body></html>;
}
```

**UI to trigger local notification or send email fallback**

```tsx
// apps/web/src/components/RoutineNotify.tsx
"use client";
import React from "react";
import { api } from "@/lib/api";

/**
 * Provides two options:
 * - Local browser notification (immediate, requires permission).
 * - Email fallback by calling Laravel to queue an email.
 */
export default function RoutineNotify() {
  /** Show a local notification via the Notifications API. */
  async function notifyLocal() {
    if (!("Notification" in window)) return alert("Notifications not supported.");
    const perm = await Notification.requestPermission();
    if (perm !== "granted") return alert("Notification permission denied.");
    navigator.serviceWorker.getRegistration().then((reg) => {
      reg?.showNotification("Time to Recite • Daily 10 Ayahs", {
        body: "Tap to open and continue your daily target.",
        icon: "/icons/icon-192.png",
      });
    });
  }

  /** Send an email reminder via backend. */
  async function notifyEmail() {
    await api("/notify/email", {
      method: "POST",
      body: JSON.stringify({
        title: "Daily Recitation Reminder",
        body: "Assalamu Alaikum — remember to complete your daily 10 ayahs today."
      })
    });
    alert("Email reminder sent.");
  }

  return (
    <div className="flex gap-3">
      <button className="px-4 py-2 rounded bg-emerald-600 text-white" onClick={notifyLocal}>
        Notify on this device
      </button>
      <button className="px-4 py-2 rounded bg-[#7A001F] text-white" onClick={notifyEmail}>
        Send email reminder
      </button>
    </div>
  );
}
```

**Use in Daily Routine page**

```tsx
// apps/web/src/app/routine/page.tsx (append near top toolbar)
import RoutineNotify from "@/components/RoutineNotify";
// ...
<div className="mb-4"><RoutineNotify /></div>
```

> For true background push at scheduled times, add Web Push + VAPID later; this UI gives immediate local notification and a one-click email fallback today.

## 2.5 Paystack Checkout + Premium gating

**Payment button**

```tsx
// apps/web/src/components/PaystackButton.tsx
"use client";
import React, { useState } from "react";
import { api } from "@/lib/api";

/**
 * Initializes a Paystack transaction on the server
 * then redirects the browser to authorization_url.
 */
export default function PaystackButton({ plan, amount, currency="NGN" }:{
  plan: string; amount: number; currency?: string;
}) {
  const [busy, setBusy] = useState(false);

  async function start() {
    setBusy(true);
    try {
      const res = await api<any>("/payments/init", {
        method: "POST",
        body: JSON.stringify({ plan, amount, currency })
      });
      const url = res?.data?.authorization_url || res?.authorization_url || res?.url;
      if (!url) return alert("Unable to start Paystack checkout.");
      window.location.href = url;
    } finally { setBusy(false); }
  }

  return (
    <button className="px-4 py-2 rounded bg-black text-white" disabled={busy} onClick={start}>
      {busy ? "Starting..." : "Upgrade to Premium"}
    </button>
  );
}
```

**Premium guard (client util)**

```ts
// apps/web/src/lib/premium.ts
/**
 * Client-side helper to gate premium features.
 * You can fetch /me to check flags, or hydrate via session.
 */
export async function ensurePremium(): Promise<boolean> {
  const res = await fetch(process.env.NEXT_PUBLIC_API_BASE + "/me", {
    credentials: "include", headers: { "Accept":"application/json" }
  }).then(r=>r.json()).catch(()=>null);
  return !!res?.is_premium;
}
```

**Example usage:**

```tsx
// apps/web/src/app/premium/page.tsx
"use client";
import React, { useEffect, useState } from "react";
import PaystackButton from "@/components/PaystackButton";
import { ensurePremium } from "@/lib/premium";

export default function Premium() {
  const [isPremium, setIsPremium] = useState(false);
  useEffect(()=>{ ensurePremium().then(setIsPremium); }, []);
  return (
    <main className="max-w-2xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">Premium</h1>
      {isPremium ? (
        <div className="rounded-2xl p-4 bg-emerald-50 border border-emerald-200">
          You already have Premium — enjoy advanced SRS, badges, and analytics.
        </div>
      ) : (
        <>
          <p className="mb-4 text-sm text-gray-700">
            Unlock advanced memorization tools, badges, and analytics.
          </p>
          <PaystackButton plan="premium_monthly" amount={3000} />
        </>
      )}
    </main>
  );
}
```

---

# 3) Quick wiring notes (Windows/Laragon/cPanel)

* **Install packages**

  * Web: `npm i fabric`
  * API: ensure `league/flysystem-aws-s3-v3`, `guzzlehttp/guzzle`, mail driver configured (`.env` `MAIL_MAILER=smtp` etc.)

* **Migrate**

  ```
  cd apps/api
  php artisan migrate --force
  ```

* **Cron (every minute)**

  ```
  php /home/USER/apps/api/artisan schedule:run >> /home/USER/logs/schedule.log 2>&1


# 0) Small prerequisites you’ll need once

## 0.1 Web API helper (used by prior snippets)

```ts
// apps/web/src/lib/api.ts
export async function api<T=any>(path: string, init?: RequestInit): Promise<T> {
  // Add defaults: JSON, credentials, and API base
  const headers = new Headers(init?.headers || {});
  if (!headers.has("Content-Type") && init?.body) headers.set("Content-Type", "application/json");
  const res = await fetch(`${process.env.NEXT_PUBLIC_API_BASE}${path}`, {
    credentials: "include",
    ...init,
    headers
  });
  if (!res.ok) throw new Error(await res.text());
  return res.json() as Promise<T>;
}
```

## 0.2 `/me` endpoint (check premium/roles quickly)

```php
// apps/api/routes/api.php (inside auth:sanctum group)
Route::get('/me', fn(\Illuminate\Http\Request $r) => response()->json([
    'id'=>$r->user()->id,
    'name'=>$r->user()->name,
    'email'=>$r->user()->email,
    'country'=>$r->user()->country,
    'is_premium'=>$r->user()->is_premium ?? false,
    'roles'=>$r->user()->getRoleNames() ?? [],
]));
```

---

# 1) Flipbook Page Picker (Teacher)

## 1.1 Add simple page manager (list/add/reorder/delete)

```tsx
// apps/web/src/app/teacher/assignments/[id]/pages/page.tsx
"use client";
import React, { useEffect, useState } from "react";
import { api } from "@/lib/api";

/** Teacher page manager: add/remove pages and reorder by index. */
export default function PageManager({ params }: { params: { id: string } }) {
  const [a, setA] = useState<any>(null);
  const [busy, setBusy] = useState(false);

  async function load() { setA(await api(`/assignments/${params.id}`)); }
  useEffect(()=>{ load(); }, [params.id]);

  /** Add a new page from uploaded image (uses /assets/upload/init flow). */
  async function addPage(file: File) {
    setBusy(true);
    try {
      const init = await api<any>("/assets/upload/init", {
        method:"POST", body:JSON.stringify({ content_type:file.type, kind:"image" })
      });
      await fetch(init.put_url, { method:"PUT", headers:{ "Content-Type": file.type }, body:file });
      await api(`/assignments/${a.id}/pages`, {
        method:"POST",
        body:JSON.stringify({ image_s3_url:init.get_url, page_index: (a.pages?.length ?? 0) })
      });
      await load();
    } finally { setBusy(false); }
  }

  /** Update a page index (simple swap). */
  async function move(id:number, dir:number) {
    const idx = a.pages.findIndex((p:any)=>p.id===id);
    const next = idx + dir;
    if (next < 0 || next >= a.pages.length) return;
    const pCur = a.pages[idx], pNext = a.pages[next];
    await api(`/assignment-pages/${pCur.id}`, { method:"PATCH", body:JSON.stringify({ page_index: next }) });
    await api(`/assignment-pages/${pNext.id}`, { method:"PATCH", body:JSON.stringify({ page_index: idx }) });
    await load();
  }

  /** Delete a page. */
  async function del(id:number) {
    if (!confirm("Delete this page?")) return;
    await api(`/assignment-pages/${id}`, { method:"DELETE" });
    await load();
  }

  return (
    <main className="max-w-4xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">Assignment Pages</h1>
      {!a ? "Loading…" : (
        <>
          <div className="flex items-center gap-3 mb-4">
            <input type="file" accept="image/*" disabled={busy}
                   onChange={(e)=>e.target.files?.[0] && addPage(e.target.files[0])}/>
            <a href={`/teacher/assignments/${a.id}/editor`} className="px-3 py-2 border rounded">Open Hotspot Editor</a>
          </div>

          <div className="grid gap-4">
            {a.pages?.sort((x:any,y:any)=>x.page_index - y.page_index).map((p:any)=>(
              <div key={p.id} className="p-3 rounded-2xl bg-white shadow flex gap-3 items-center">
                <img src={p.image_s3_url} className="w-32 h-32 object-contain rounded border" alt="page"/>
                <div className="flex-1">
                  <div className="font-semibold">Page {p.page_index+1}</div>
                  <div className="text-xs text-gray-600">{p.image_s3_url}</div>
                </div>
                <div className="flex gap-2">
                  <button className="px-3 py-1 border rounded" onClick={()=>move(p.id,-1)}>↑</button>
                  <button className="px-3 py-1 border rounded" onClick={()=>move(p.id, 1)}>↓</button>
                  <button className="px-3 py-1 rounded bg-red-600 text-white" onClick={()=>del(p.id)}>Delete</button>
                </div>
              </div>
            ))}
            {!a.pages?.length && <div className="text-sm text-gray-600">No pages yet.</div>}
          </div>
        </>
      )}
    </main>
  );
}
```

---

# 2) Quran Audio Manifest (server cache + per-ayah URLs)

We’ll add a backend controller that **caches** chapter audio URLs (per-ayah) using Laravel **file cache** and proxies the public Quran API (e.g., api.quran.com). Adjust base/edition to your choice.

## 2.1 Config .env

```
QURAN_API_BASE=https://api.quran.com/api/v4
QURAN_AUDIO_EDITION=ar.alafasy  # example
```

## 2.2 Controller

```php
// apps/api/app/Http/Controllers/Core/QuranAudioController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Http;

/**
 * Returns per-ayah audio URLs for a given chapter (surah).
 * Results are cached (file cache) to reduce API calls on shared hosting.
 */
class QuranAudioController extends Controller
{
    /** GET /api/quran/audio/{surah}?edition=ar.alafasy */
    public function chapter(Request $request, int $surah) {
        $edition = $request->query('edition', env('QURAN_AUDIO_EDITION','ar.alafasy'));
        $key = "quran:audio:$edition:$surah";
        $ttl = now()->addHours(6);

        $data = Cache::remember($key, $ttl, function () use ($surah, $edition) {
            $base = rtrim(env('QURAN_API_BASE','https://api.quran.com/api/v4'), '/');
            // Fetch recitation by surah (ayah-by-ayah URLs)
            $res = Http::get("$base/chapters/$surah/verses", [
                'language'=>'ar', 'fields'=>'audio_url', 'per_page'=>300
            ]);
            $json = $res->json();
            $verses = $json['verses'] ?? [];
            // Map minimal manifest
            return [
                'surah'=>$surah,
                'count'=>count($verses),
                'items'=>array_map(function($v){
                    return [
                        'ayah'=>$v['verse_key'] ?? '',
                        'audio_url'=>$v['audio']['url'] ?? null,
                        'text_uthmani'=>$v['text_uthmani'] ?? null,
                        'verse_number'=>$v['verse_number'] ?? null
                    ];
                }, $verses)
            ];
        });

        return response()->json($data);
    }
}
```

**Route:**

```php
// apps/api/routes/api.php
use App\Http\Controllers\Core\QuranAudioController;
Route::get('/quran/audio/{surah}', [QuranAudioController::class,'chapter']);
```

## 2.3 Web component to play one ayah

```tsx
// apps/web/src/components/AyahRow.tsx
"use client";
import VerseAudioPlayer from "@/components/VerseAudioPlayer";

/** Renders ayah line with per-ayah audio player. */
export default function AyahRow({ v }: { v: any }) {
  return (
    <div className="border-b py-3">
      <div className="text-xl leading-[2.2rem] mb-2">{v.text_uthmani}</div>
      {v.audio_url && <VerseAudioPlayer src={v.audio_url} />}
    </div>
  );
}
```

**Use in a simple page:**

```tsx
// apps/web/src/app/reader/audio/[surah]/page.tsx
"use client";
import React, { useEffect, useState } from "react";
import { api } from "@/lib/api";
import AyahRow from "@/components/AyahRow";

/** Audio reader page for a chapter with cached per-ayah URLs. */
export default function AudioReader({ params }: { params:{ surah:string } }) {
  const [m, setM] = useState<any>(null);
  useEffect(()=>{ api(`/quran/audio/${params.surah}`).then(setM); }, [params.surah]);
  return (
    <main className="max-w-3xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">Surah {params.surah} — Audio</h1>
      {!m ? "Loading…" : m.items?.map((v:any)=> <AyahRow key={v.verse_number} v={v} />)}
    </main>
  );
}
```

---

# 3) PWA Install + Offline Cache (UI shell + recent surahs & audio)

## 3.1 Manifest

```json
// apps/web/public/manifest.json
{
  "name": "AlFawz Qur’an Institute",
  "short_name": "AlFawz",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#FAF7F2",
  "theme_color": "#7A001F",
  "icons": [
    { "src": "/icons/icon-192.png", "sizes": "192x192", "type": "image/png" },
    { "src": "/icons/icon-512.png", "sizes": "512x512", "type": "image/png" }
  ]
}
```

Add icons at `public/icons/`.

## 3.2 Service Worker: cache shell + last reads

```js
// apps/web/public/sw.js
const CACHE = "alfawz-v1";
const SHELL = ["/","/manifest.json","/icons/icon-192.png","/icons/icon-512.png"];

// Install & pre-cache shell
self.addEventListener("install", (e) => {
  e.waitUntil(caches.open(CACHE).then((c)=>c.addAll(SHELL)));
  self.skipWaiting();
});

// Claim on activate
self.addEventListener("activate", (e) => { e.waitUntil(self.clients.claim()); });

// Cache-First for GET requests on /quran/audio and audio files
self.addEventListener("fetch", (e) => {
  const url = new URL(e.request.url);
  const isAudioAPI = url.pathname.includes("/api/quran/audio/");
  const isAudioFile = e.request.destination === "audio";

  if (e.request.method === "GET" && (isAudioAPI || isAudioFile)) {
    e.respondWith(
      caches.open(CACHE).then(async (c) => {
        const hit = await c.match(e.request);
        if (hit) return hit;
        const res = await fetch(e.request);
        if (res.ok) c.put(e.request, res.clone());
        return res;
      })
    );
  }
});
```

## 3.3 Add manifest & SW to layout

```tsx
// apps/web/src/app/layout.tsx
export default function RootLayout({ children }: { children: React.ReactNode }) {
  // ... keep the service worker register effect you already added
  return (
    <html lang="en">
      <head>
        <link rel="manifest" href="/manifest.json" />
        <meta name="theme-color" content="#7A001F" />
      </head>
      <body>{children}</body>
    </html>
  );
}
```

---

# 4) Role-Based Menus + Class Level Filter (UI)

## 4.1 Simple role gate & top nav

```tsx
// apps/web/src/components/TopNav.tsx
"use client";
import React, { useEffect, useState } from "react";
import { api } from "@/lib/api";

/** Top navigation shows teacher/admin menus if role permits. */
export default function TopNav() {
  const [me, setMe] = useState<any>(null);
  useEffect(()=>{ api("/me").then(setMe).catch(()=>{}); }, []);

  const isTeacher = me?.roles?.includes("teacher") || me?.roles?.includes("admin");

  return (
    <nav className="w-full bg-white border-b">
      <div className="max-w-6xl mx-auto px-4 py-3 flex items-center gap-4">
        <a href="/" className="font-bold">AlFawz</a>
        <a href="/reader">Reader</a>
        <a href="/memorize">Memorize</a>
        <a href="/leaderboard">Leaderboard</a>
        {isTeacher && (
          <>
            <a href="/teacher/classes">Classes</a>
            <a href="/teacher/assignments">Assignments</a>
          </>
        )}
        <div className="ml-auto"><a href="/premium" className="text-[#7A001F]">Premium</a></div>
      </div>
    </nav>
  );
}
```

**Use it in root layout (body top).**

## 4.2 Class Level filter example

```tsx
// apps/web/src/app/leaderboard/page.tsx
"use client";
import React, { useEffect, useState } from "react";
import { api } from "@/lib/api";

/** Leaderboard with class-level filter (Level 1/2/3). */
export default function Leaderboard() {
  const [level, setLevel] = useState<number|undefined>(undefined);
  const [rows, setRows] = useState<any[]>([]);

  useEffect(()=> {
    // Demo: using snapshots/global; extend with ?level= param on server later
    api<any>("/leaderboard?scope=global&period=weekly").then((d)=>{
      setRows(d?.entries || d?.data_json?.entries || []);
    }).catch(()=>{});
  }, []);

  const filtered = level ? rows.filter((r)=> (r.level??1)===level) : rows;

  return (
    <main className="max-w-3xl mx-auto p-6">
      <div className="flex items-center gap-3 mb-4">
        <h1 className="text-2xl font-bold">Leaderboard</h1>
        <select className="ml-auto border rounded px-2 py-1" value={level ?? ""} onChange={(e)=>setLevel(e.target.value?Number(e.target.value):undefined)}>
          <option value="">All Levels</option>
          <option value="1">Level 1</option>
          <option value="2">Level 2</option>
          <option value="3">Level 3</option>
        </select>
      </div>

      <div className="rounded-2xl bg-white shadow">
        {filtered.map((r:any, i:number)=>(
          <div key={r.user_id} className="flex items-center gap-3 border-b p-3">
            <div className="w-8 text-right">{i+1}</div>
            <div className="w-7">{r.country ?? "NG"}</div>
            <div className="flex-1">{r.name}</div>
            <div className="font-mono">{r.hasanat}</div>
            <div className="text-xs text-gray-600 ml-3">{r.badge}</div>
          </div>
        ))}
        {!filtered.length && <div className="p-3 text-sm text-gray-600">No entries.</div>}
      </div>
    </main>
  );
}
```

---

# 5) Paystack Server: init + webhook (idempotent)

## 5.1 Controller

```php
// apps/api/app/Http/Controllers/Core/PaymentController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\Payment;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

/**
 * Handles Paystack initialization and webhook verification.
 * DB driver queues/email can be used for receipts.
 */
class PaymentController extends Controller
{
    /** POST /payments/init {plan, amount, currency} -> {authorization_url} */
    public function init(Request $request) {
        $u = $request->user();
        $data = $request->validate([
            'plan'=>'required|string|max:80',
            'amount'=>'required|integer|min:100',
            'currency'=>'nullable|string|max:4'
        ]);
        $payload = [
            'email'=>$u->email,
            'amount'=>$data['amount'] * 100, // Kobo
            'currency'=>$data['currency'] ?? 'NGN',
            'metadata'=>['user_id'=>$u->id, 'plan'=>$data['plan']]
        ];
        $resp = Http::withToken(env('PAYSTACK_SECRET'))
            ->post('https://api.paystack.co/transaction/initialize', $payload)
            ->json();

        // Persist initialization for idempotency
        Payment::create([
            'user_id'=>$u->id,
            'plan'=>$data['plan'],
            'amount'=>$data['amount'],
            'currency'=>$payload['currency'],
            'paystack_ref'=>$resp['data']['reference'] ?? null,
            'status'=>'initialized',
            'webhook_payload'=>$resp
        ]);

        return response()->json($resp);
    }

    /** POST /payments/webhook (Paystack calls here) */
    public function webhook(Request $request) {
        $signature = $request->header('x-paystack-signature');
        $secret = env('PAYSTACK_SECRET');
        $payload = $request->getContent();

        // Verify signature
        if (!$signature || (hash_hmac('sha512', $payload, $secret) !== $signature)) {
            Log::warning('Paystack webhook signature mismatch');
            return response()->json(['ok'=>false], 401);
        }

        $body = $request->json()->all();
        $event = $body['event'] ?? '';
        $data  = $body['data'] ?? [];
        $ref   = $data['reference'] ?? null;

        // Find payment by reference
        $p = Payment::where('paystack_ref', $ref)->first();
        if (!$p) return response()->json(['ok'=>true]); // ignore unknown

        // Idempotent update
        if ($event === 'charge.success') {
            $p->status = 'paid';
            $p->webhook_payload = $body;
            $p->save();

            // Upgrade user to premium
            $u = $p->user;
            if ($u && !$u->is_premium) {
                $u->is_premium = true;
                $u->plan = $p->plan;
                $u->save();
            }
        }

        return response()->json(['ok'=>true]);
    }
}
```

**Routes:**

```php
// apps/api/routes/api.php
use App\Http\Controllers\Core\PaymentController;
Route::post('/payments/init', [PaymentController::class,'init'])->middleware('auth:sanctum');
Route::post('/payments/webhook', [PaymentController::class,'webhook']); // no auth; secured by signature
```

---

# 6) SRSQueue Model + Migration (missing primitive)

## 6.1 Migration

```php
// apps/api/database/migrations/2025_01_04_000018_create_srs_queue_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Create SRS queue table to track per-ayah reviews. */
    public function up(): void {
        Schema::create('srs_queue', function (Blueprint $t) {
            $t->id();
            $t->foreignId('user_id')->constrained('users')->cascadeOnDelete();
            $t->unsignedSmallInteger('surah_id');
            $t->unsignedSmallInteger('ayah_id');
            $t->float('ease_factor')->default(2.5);
            $t->integer('interval')->default(0); // days
            $t->integer('repetitions')->default(0);
            $t->dateTime('due_at')->index();
            $t->unsignedTinyInteger('last_quality')->nullable();
            $t->timestamps();
            $t->unique(['user_id','surah_id','ayah_id']);
        });
    }
    public function down(): void { Schema::dropIfExists('srs_queue'); }
};
```

## 6.2 Model

```php
// apps/api/app/Models/SrsQueue.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class SrsQueue extends Model
{
    protected $table = 'srs_queue';
    protected $fillable = [
        'user_id','surah_id','ayah_id','ease_factor','interval','repetitions','due_at','last_quality'
    ];
    protected $casts = [
        'due_at'=>'datetime',
        'ease_factor'=>'float',
    ];
    public function user(){ return $this->belongsTo(User::class); }
}
```

> Populate initial SRS items nightly from `quran_progress` (e.g., add newly “seen” ayahs with due\_at = today).

---

# 7) Reader “Install PWA” prompt

```tsx
// apps/web/src/components/InstallPWA.tsx
"use client";
import React, { useEffect, useState } from "react";

/** Shows an Install prompt when beforeinstallprompt is fired. */
export default function InstallPWA() {
  const [deferred, setDeferred] = useState<any>(null);
  useEffect(() => {
    const onBI = (e: any) => { e.preventDefault(); setDeferred(e); };
    window.addEventListener("beforeinstallprompt", onBI);
    return () => window.removeEventListener("beforeinstallprompt", onBI);
  }, []);
  if (!deferred) return null;
  return (
    <button
      className="px-3 py-1 rounded border"
      onClick={async () => { deferred.prompt(); setDeferred(null); }}
    >
      Install App
    </button>
  );
}
```

Add to your top bar (e.g., `TopNav` right side).


# 1) Polygon Hotspots (DB + API + Konva.js Editor)

## 1.1 DB migration — support `shape` + `points_json`

```php
// apps/api/database/migrations/2025_01_05_000019_update_hotspots_add_polygon.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Add shape type and polygon points support to hotspots. */
    public function up(): void {
        Schema::table('hotspots', function (Blueprint $t) {
            $t->enum('shape', ['rect','polygon'])->default('rect')->after('assignment_page_id');
            $t->json('points_json')->nullable()->after('shape'); // e.g., [[x,y],[x,y],...]
        });
    }
    public function down(): void {
        Schema::table('hotspots', function (Blueprint $t) {
            $t->dropColumn(['shape','points_json']);
        });
    }
};
```

## 1.2 API — accept/save polygons (rects still supported)

```php
// apps/api/app/Http/Controllers/Core/HotspotController.php (replace validation blocks)
$data = $request->validate([
    'assignment_page_id'=>'nullable|exists:assignment_pages,id',
    'shape'=>'nullable|in:rect,polygon',
    'x'=>'nullable|numeric|min:0',
    'y'=>'nullable|numeric|min:0',
    'width'=>'nullable|numeric|min:1',
    'height'=>'nullable|numeric|min:1',
    'points_json'=>'nullable|array',     // array of [x,y]
    'points_json.*'=>'array|size:2',
    'title'=>'nullable|string|max:120',
    'tooltip'=>'nullable|string|max:500',
    'audio_s3_url'=>'nullable|url'
]);

// Ensure geometry depending on shape
$shape = $data['shape'] ?? 'rect';
if ($shape === 'rect') {
    foreach (['x','y','width','height'] as $k) abort_unless(isset($data[$k]), 422, "Missing $k for rect");
    $data['points_json'] = null;
} else {
    abort_unless(!empty($data['points_json']), 422, 'points_json required for polygon');
    $data['x']=$data['y']=$data['width']=$data['height']=null;
}
$data['shape'] = $shape;
```

> Apply this logic in both `store()` and `update()`.

## 1.3 Konva.js Editor (rectangle + polygon draw)

```tsx
// apps/web/src/app/teacher/assignments/[id]/konva/page.tsx
"use client";
import React, { useEffect, useRef, useState } from "react";
import { Stage, Layer, Image as KImage, Rect, Line } from "react-konva";
import useImage from "use-image";
import { api } from "@/lib/api";

/**
 * Hotspot Editor (Konva):
 * - Draw rectangles or polygons on the page image.
 * - Attach title/tooltip/audio; save via Hotspot API.
 */
export default function KonvaEditor({ params }: { params: { id: string } }) {
  const [assignment, setAssignment] = useState<any>(null);
  const [mode, setMode] = useState<"rect"|"polygon">("rect");
  const [rects, setRects] = useState<any[]>([]);
  const [polys, setPolys] = useState<any[]>([]);
  const [activePoly, setActivePoly] = useState<number | null>(null); // index in polys
  const [sel, setSel] = useState<any>(null);

  useEffect(()=>{ api<any>(`/assignments/${params.id}`).then(setAssignment); }, [params.id]);

  const page = assignment?.pages?.[0];
  const [bg] = useImage(page?.image_s3_url || "");

  /** Seed from backend hotspots once loaded. */
  useEffect(() => {
    if (!assignment) return;
    const inRects = (assignment.hotspots || []).filter((h:any)=>h.shape!=="polygon");
    const inPolys = (assignment.hotspots || []).filter((h:any)=>h.shape==="polygon");
    setRects(inRects);
    setPolys(inPolys);
  }, [assignment]);

  /** Add a new rectangle hotspot placeholder. */
  function addRect() {
    setRects(r => [...r, { x: 40, y: 40, width: 120, height: 60, title:"", tooltip:"" }]);
  }

  /** Start a polygon; click on canvas adds points; double-click to finish. */
  function startPoly() {
    setPolys(p => [...p, { points_json: [], title:"", tooltip:"" }]);
    setActivePoly((polys?.length ?? 0));
  }

  /** Handle stage click to add polygon point in "polygon" mode. */
  function onStageClick(e:any) {
    if (mode !== "polygon" || activePoly===null) return;
    const pos = e.target.getStage().getPointerPosition();
    setPolys(prev => {
      const copy = [...prev];
      copy[activePoly].points_json = [...(copy[activePoly].points_json||[]), [pos.x, pos.y]];
      return copy;
    });
  }

  /** Finish polygon creation. */
  function finishPoly() { setActivePoly(null); }

  /** Save rectangle or polygon to API. */
  async function save(h:any, kind:"rect"|"polygon", idx:number) {
    const payload:any = {
      assignment_page_id: page.id,
      title: h.title || "",
      tooltip: h.tooltip || "",
      shape: kind
    };
    if (kind === "rect") {
      payload.x = h.x; payload.y = h.y; payload.width = h.width; payload.height = h.height;
    } else {
      payload.points_json = h.points_json;
    }
    if (h.id) {
      const updated = await api(`/hotspots/${h.id}`, { method:"PATCH", body:JSON.stringify(payload) });
      updateLocal(kind, idx, updated);
    } else {
      const created = await api(`/assignments/${assignment.id}/hotspots`, { method:"POST", body:JSON.stringify(payload) });
      updateLocal(kind, idx, created);
    }
    alert("Saved.");
  }

  /** Update local array after save. */
  function updateLocal(kind:"rect"|"polygon", idx:number, val:any) {
    if (kind === "rect") setRects(a => a.map((x,i)=> i===idx ? val : x));
    else setPolys(a => a.map((x,i)=> i===idx ? val : x));
  }

  return (
    <main className="max-w-6xl mx-auto p-6">
      <div className="flex items-center gap-3 mb-3">
        <h1 className="text-2xl font-bold">Hotspot Editor (Konva)</h1>
        <div className="ml-auto flex gap-2">
          <button className={`px-3 py-1 border rounded ${mode==='rect'?'bg-gray-100':''}`} onClick={()=>setMode("rect")}>Rect</button>
          <button className={`px-3 py-1 border rounded ${mode==='polygon'?'bg-gray-100':''}`} onClick={()=>setMode("polygon")}>Polygon</button>
          {mode==='rect' && <button className="px-3 py-1 border rounded" onClick={addRect}>+ Rect</button>}
          {mode==='polygon' && <>
            <button className="px-3 py-1 border rounded" onClick={startPoly}>Start Poly</button>
            <button className="px-3 py-1 border rounded" onClick={finishPoly} disabled={activePoly===null}>Finish</button>
          </>}
        </div>
      </div>

      <div className="grid md:grid-cols-[1fr,320px] gap-6">
        <div className="rounded-2xl bg-white shadow overflow-auto">
          {page && (
            <Stage width={Math.min(900, bg?.width || 900)} height={bg?.height || 600} onMouseDown={onStageClick}>
              <Layer>
                {bg && <KImage image={bg} />}
                {rects.map((r, i)=>(
                  <Rect key={`r${i}`} {...r}
                        stroke="rgba(16,185,129,0.9)" strokeWidth={2} fill="rgba(16,185,129,0.15)"
                        draggable
                        onDragEnd={(e)=> setRects(a => a.map((x,idx)=> idx===i ? {...x, x:e.target.x(), y:e.target.y()} : x))}
                        onTransformEnd={(e)=> {
                          const node:any = e.target;
                          const nw = node.width() * node.scaleX();
                          const nh = node.height() * node.scaleY();
                          node.scaleX(1); node.scaleY(1);
                          setRects(a => a.map((x,idx)=> idx===i ? {...x, width:nw, height:nh, x:node.x(), y:node.y()} : x));
                        }}
                        onClick={()=> setSel({ kind:'rect', idx:i })}
                  />
                ))}
                {polys.map((p, i)=>(
                  <Line key={`p${i}`}
                        points={(p.points_json||[]).flat()}
                        stroke="rgba(245,158,11,0.9)" fill="rgba(245,158,11,0.15)" closed
                        onClick={()=> setSel({ kind:'polygon', idx:i })}
                  />
                ))}
                {activePoly!==null && (
                  <Line points={(polys[activePoly]?.points_json||[]).flat()} stroke="rgba(99,102,241,0.9)" />
                )}
              </Layer>
            </Stage>
          )}
        </div>

        <aside className="rounded-2xl p-4 bg-white shadow h-fit">
          <div className="font-semibold mb-2">Properties</div>
          {!sel && <div className="text-sm text-gray-600">Select a rectangle or polygon.</div>}
          {!!sel && (() => {
            const isRect = sel.kind === 'rect';
            const list = isRect ? rects : polys;
            const setList = isRect ? setRects : setPolys;
            const h = list[sel.idx];
            return (
              <div>
                <label className="text-xs uppercase text-gray-500">Title</label>
                <input className="w-full border rounded px-3 py-2 mb-2"
                  value={h.title||""}
                  onChange={(e)=> setList((a:any[]) => a.map((x,i)=> i===sel.idx ? {...x, title:e.target.value} : x))} />
                <label className="text-xs uppercase text-gray-500">Tooltip</label>
                <textarea className="w-full border rounded px-3 py-2 mb-3"
                  rows={3}
                  value={h.tooltip||""}
                  onChange={(e)=> setList((a:any[]) => a.map((x,i)=> i===sel.idx ? {...x, tooltip:e.target.value} : x))} />
                <div className="flex gap-2">
                  <button className="px-3 py-1 rounded bg-emerald-600 text-white"
                          onClick={()=> save(h, isRect?'rect':'polygon', sel.idx)}>Save</button>
                </div>
              </div>
            );
          })()}
        </aside>
      </div>
    </main>
  );
}
```

> Install: `npm i react-konva konva use-image`

---

# 2) Class Levels (DB + Leaderboard filter on server)

## 2.1 DB migration — add `level` to users and classes

```php
// apps/api/database/migrations/2025_01_05_000020_add_level_to_users_and_classes.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Add learning level (1..3) to users & classes. */
    public function up(): void {
        Schema::table('users', function (Blueprint $t) {
            $t->unsignedTinyInteger('level')->default(1)->after('plan'); // 1,2,3
        });
        Schema::table('classes', function (Blueprint $t) {
            $t->unsignedTinyInteger('level')->default(1)->after('teacher_id');
        });
    }
    public function down(): void {
        Schema::table('users', fn(Blueprint $t) => $t->dropColumn('level'));
        Schema::table('classes', fn(Blueprint $t) => $t->dropColumn('level'));
    }
};
```

## 2.2 Leaderboard endpoint with `level` filter (uses snapshots if present)

```php
// apps/api/app/Http/Controllers/Core/LeaderboardController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\LeaderboardSnapshot;
use App\Models\User;
use Illuminate\Http\Request;

/**
 * Returns leaderboard entries, optionally filtered by level.
 * Uses latest snapshot if available; otherwise queries live.
 */
class LeaderboardController extends Controller
{
    /** GET /leaderboard?scope=global&period=weekly&level=2 */
    public function index(Request $r) {
        $scope = $r->query('scope','global');
        $period = $r->query('period', 'weekly_'.now()->format('%G_%V'));
        $level = (int) $r->query('level', 0);

        $snap = LeaderboardSnapshot::where('scope',$scope)->where('period',$period)->first();
        $entries = $snap ? ($snap->data_json['entries'] ?? []) : User::select('id as user_id','name','hasanat_total as hasanat','country','level')
            ->orderByDesc('hasanat_total')->limit(50)->get()->map(fn($u)=>[
                'user_id'=>$u->user_id ?? $u->id,
                'name'=>$u->name,
                'country'=>$u->country ?? 'NG',
                'hasanat'=>$u->hasanat_total ?? $u->hasanat,
                'level'=>$u->level ?? 1,
                'badge'=>($u->hasanat_total ?? 0) > 100000 ? 'Hafidh (in progress)' : 'Student'
            ])->values()->all();

        if ($level > 0) {
            $entries = array_values(array_filter($entries, fn($e)=> ($e['level'] ?? 1) == $level));
        }
        return response()->json(['entries'=>$entries]);
    }
}
```

**Route:**

```php
// apps/api/routes/api.php
use App\Http\Controllers\Core\LeaderboardController;
Route::get('/leaderboard', [LeaderboardController::class,'index'])->middleware('auth:sanctum');
```

> Your Next.js leaderboard page already filters client-side; now switch to server-side via `?level=…`.

---

# 3) Multi-Page Flip with Thumbnails (improved reader)

```tsx
// apps/web/src/components/FlipbookPro.tsx
"use client";
import React, { useMemo, useState } from "react";

/**
 * Enhanced Flipbook with CSS "flip" transition and page thumbnails.
 * Works with pre-uploaded pages; no external libs.
 */
export default function FlipbookPro({
  pages, hotspotsByPage
}: {
  pages: { id:number; page_index:number; image_s3_url:string }[];
  hotspotsByPage: Record<number, any[]>;
}) {
  const [idx, setIdx] = useState(0);
  const current = pages[idx];
  const pageHotspots = useMemo(()=> hotspotsByPage[current?.id] || [], [hotspotsByPage, current?.id]);

  return (
    <div className="w-full">
      <div className="flex items-center justify-between mb-2">
        <button className="px-3 py-1 rounded border" onClick={()=>setIdx(i=>Math.max(0,i-1))} disabled={idx===0}>◀ Prev</button>
        <div className="text-sm">Page {idx+1}/{pages.length}</div>
        <button className="px-3 py-1 rounded border" onClick={()=>setIdx(i=>Math.min(pages.length-1,i+1))} disabled={idx>=pages.length-1}>Next ▶</button>
      </div>

      <div className="relative perspective-[1200px] h-auto">
        <div className="transition-transform duration-500 [transform-style:preserve-3d]"
             style={{ transform: `rotateY(${(idx%2===0)?0:0}deg)` }}>
          <div className="relative inline-block rounded-lg overflow-hidden shadow will-change-transform">
            <img src={current.image_s3_url} alt="" className="max-w-full block select-none" />
            {pageHotspots.map((h:any)=>(
              <button key={h.id} className={`absolute ${h.shape==='polygon'?'':''} border-2 border-emerald-500/80 bg-emerald-500/10`}
                      style={ h.shape==='rect' ? { left:h.x, top:h.y, width:h.width, height:h.height } : undefined }
                      title={h.tooltip || h.title || 'Hotspot'}
                      onClick={()=> h.audio_s3_url ? new Audio(h.audio_s3_url).play() : alert(h.tooltip || h.title || 'Hotspot') }/>
            ))}
          </div>
        </div>
      </div>

      <div className="mt-3 flex gap-2 overflow-x-auto">
        {pages.map((p,i)=>(
          <button key={p.id} onClick={()=>setIdx(i)}
                  className={`border rounded ${i===idx?'ring-2 ring-[#7A001F]':''}`}>
            <img src={p.image_s3_url} alt="" className="h-20 object-contain block"/>
          </button>
        ))}
      </div>
    </div>
  );
}
```

> On your assignment view page, build `hotspotsByPage` from `assignment.hotspots`.

```tsx
// apps/web/src/app/assignments/[id]/page.tsx (replace Flipbook usage)
import FlipbookPro from "@/components/FlipbookPro";
// ...
const byPage = Object.groupBy(data.hotspots || [], (h:any)=> h.assignment_page_id || 0);
<FlipbookPro pages={data.pages} hotspotsByPage={byPage as any} />
```

---

# 4) Quran Text + Translation (server cache + ETag)

## 4.1 Controller with strong caching headers

```php
// apps/api/app/Http/Controllers/Core/QuranTextController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Http;

/**
 * Returns a surah text with translation from Quran API.
 * Adds Cache-Control and ETag to leverage CDN and browser caches.
 */
class QuranTextController extends Controller
{
    /** GET /quran/surah/{id}?lang=en&edition=uthmani */
    public function surah(Request $r, int $id) {
        $lang = $r->query('lang','en');
        $edition = $r->query('edition','uthmani');
        $key = "quran:surah:$id:$lang:$edition";
        $ttl = now()->addHours(12);

        $payload = Cache::remember($key, $ttl, function () use ($id, $lang, $edition) {
            $base = rtrim(env('QURAN_API_BASE','https://api.quran.com/api/v4'),'/');
            $verses = Http::get("$base/chapters/$id/verses", [
                'language'=>$lang, 'fields'=>'text_uthmani', 'per_page'=>300,
            ])->json()['verses'] ?? [];
            $translation = Http::get("$base/verses/by_chapter/$id", [
                'language'=>$lang, 'fields'=>'translation', 'per_page'=>300,
            ])->json()['verses'] ?? [];
            return ['surah'=>$id, 'verses'=>$verses, 'translation'=>$translation];
        });

        $etag = '"'.sha1(json_encode($payload)).'"';
        if ($r->headers->get('If-None-Match') === $etag) {
            return response('', 304)->header('ETag', $etag)->header('Cache-Control', 'public, max-age=21600, stale-while-revalidate=600');
        }
        return response()->json($payload)
            ->header('ETag', $etag)
            ->header('Cache-Control', 'public, max-age=21600, stale-while-revalidate=600');
    }
}
```

**Route:**

```php
// apps/api/routes/api.php
use App\Http\Controllers\Core\QuranTextController;
Route::get('/quran/surah/{id}', [QuranTextController::class,'surah']);
```

## 4.2 Reader toggle (text + translation)

```tsx
// apps/web/src/app/reader/text/[surah]/page.tsx
"use client";
import React, { useEffect, useState } from "react";
import { api } from "@/lib/api";
import VerseLine from "@/components/VerseLine";

/** Text reader with translation toggle using cached API + ETag. */
export default function TextReader({ params }: { params:{ surah:string } }) {
  const [data, setData] = useState<any>(null);
  const [showTr, setShowTr] = useState(true);

  useEffect(()=>{ api(`/quran/surah/${params.surah}?lang=en`).then(setData); }, [params.surah]);

  const pairs = (data?.verses || []).map((v:any, i:number) => ({ v, tr: data?.translation?.[i] }));

  return (
    <main className="max-w-3xl mx-auto p-6">
      <div className="flex items-center gap-3 mb-4">
        <h1 className="text-2xl font-bold">Surah {params.surah}</h1>
        <label className="ml-auto text-sm flex items-center gap-2">
          <input type="checkbox" checked={showTr} onChange={(e)=>setShowTr(e.target.checked)} />
          Show translation
        </label>
      </div>
      {!pairs.length ? "Loading…" : pairs.map((row, idx)=>(
        <div key={idx} className="mb-4">
          <VerseLine surahId={Number(params.surah)} ayahId={idx+1} text={row.v?.text_uthmani || ""} />
          {showTr && <div className="text-sm text-gray-700 mt-1">{row.tr?.translation_text || row.tr?.text || ""}</div>}
        </div>
      ))}
    </main>
  );
}
```

---

# 5) Tie Leaderboard page to server filter

```tsx
// apps/web/src/app/leaderboard/page.tsx (replace load logic)
useEffect(()=> {
  const q = new URLSearchParams();
  q.set("scope","global"); q.set("period","weekly");
  if (level) q.set("level", String(level));
  api<any>(`/leaderboard?${q.toString()}`).then((d)=> setRows(d.entries || []));
}, [level]);
```

---

# 6) Quick .env examples (API + Web)

```
# apps/api/.env (important bits)
APP_NAME=AlFawz
APP_ENV=production
APP_KEY=base64:GENERATE_WITH_ARTISAN
APP_URL=https://yourdomain.com

LOG_CHANNEL=stack
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=alfawz
DB_USERNAME=alfawz_user
DB_PASSWORD=yourpass

FILESYSTEM_DISK=s3
AWS_ACCESS_KEY_ID=...
AWS_SECRET_ACCESS_KEY=...
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=your-bucket
AWS_URL=
AWS_USE_PATH_STYLE_ENDPOINT=false

MAIL_MAILER=smtp
MAIL_HOST=smtp.yourhost.com
MAIL_PORT=587
MAIL_USERNAME=no-reply@yourdomain.com
MAIL_PASSWORD=yourpass
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=no-reply@yourdomain.com
MAIL_FROM_NAME="AlFawz"

PAYSTACK_SECRET=sk_live_xxxxx
QURAN_API_BASE=https://api.quran.com/api/v4
QURAN_AUDIO_EDITION=ar.alafasy
```

```
# apps/web/.env.local
NEXT_PUBLIC_API_BASE=https://yourdomain.com/api


# 1) Laravel — Data Model for Recitations & Feedback

## 1.1 Migration: `recitations` table

```php
// apps/api/database/migrations/2025_01_06_000021_create_recitations_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Create recitations table to track uploads, ASR, and Tajweed feedback. */
    public function up(): void {
        Schema::create('recitations', function (Blueprint $t) {
            $t->id();
            $t->foreignId('user_id')->constrained('users')->cascadeOnDelete();
            $t->unsignedSmallInteger('surah_id');      // target surah
            $t->unsignedSmallInteger('from_ayah');     // start ayah
            $t->unsignedSmallInteger('to_ayah');       // end ayah
            $t->string('s3_key');                      // uploaded audio key
            $t->integer('duration_ms')->nullable();    // filled post ASR if known
            $t->enum('status', ['queued','processing','done','failed'])->default('queued');
            $t->json('transcript_json')->nullable();   // raw ASR output (segments/words + times)
            $t->json('feedback_json')->nullable();     // computed Tajweed feedback (highlights, scores)
            $t->text('error_message')->nullable();
            $t->timestamps();
            $t->index(['user_id','surah_id']);
        });
    }
    public function down(): void {
        Schema::dropIfExists('recitations');
    }
};
```

## 1.2 Model

```php
// apps/api/app/Models/Recitation.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

/**
 * Recitation: represents a user's recitation upload and the computed ASR + Tajweed feedback.
 */
class Recitation extends Model
{
    protected $fillable = [
        'user_id','surah_id','from_ayah','to_ayah','s3_key',
        'duration_ms','status','transcript_json','feedback_json','error_message'
    ];
    protected $casts = [
        'transcript_json' => 'array',
        'feedback_json'   => 'array',
    ];
    public function user(){ return $this->belongsTo(User::class); }
}
```

---

# 2) Laravel — Whisper + Tajweed Services

## 2.1 OpenAI Whisper client (word timestamps)

```php
// apps/api/app/Services/OpenAIWhisperClient.php
<?php

namespace App\Services;

use GuzzleHttp\Client;
use Illuminate\Support\Facades\Storage;

/**
 * Wraps calls to OpenAI Whisper API.
 * - Downloads S3 file to a temp path
 * - Submits as multipart/form-data
 * - Requests word-level timestamps via verbose_json + timestamp_granularities
 */
class OpenAIWhisperClient
{
    private Client $http;

    public function __construct()
    {
        $this->http = new Client([
            'base_uri' => 'https://api.openai.com/v1/',
            'timeout'  => 120
        ]);
    }

    /**
     * Transcribe an S3 object (private) with Whisper to verbose JSON (segments + words).
     * @param string $s3Key  The object key for S3 storage.
     * @return array         Decoded JSON with segments and word timestamps.
     */
    public function transcribeS3(string $s3Key): array
    {
        // Download to temp (safer for multipart upload)
        $tmp = tempnam(sys_get_temp_dir(), 'rec-');
        file_put_contents($tmp, Storage::disk('s3')->get($s3Key));

        $resp = $this->http->post('audio/transcriptions', [
            'headers' => ['Authorization' => 'Bearer '.env('OPENAI_API_KEY')],
            'multipart' => [
                ['name'=>'model', 'contents'=>'whisper-1'],
                ['name'=>'response_format', 'contents'=>'verbose_json'],
                ['name'=>'timestamp_granularities[]', 'contents'=>'word'],
                ['name'=>'file', 'contents'=> fopen($tmp, 'r'), 'filename'=>'audio.webm']
            ]
        ]);

        @unlink($tmp);
        return json_decode((string)$resp->getBody(), true) ?: [];
    }
}
```

> Make sure `.env` has `OPENAI_API_KEY=sk-...`

## 2.2 QuranSource service (fetch canonical ayah text)

```php
// apps/api/app/Services/QuranSource.php
<?php

namespace App\Services;

use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Http;

/**
 * Fetches canonical Arabic text (Uthmani) for a surah range, cached via file store.
 */
class QuranSource
{
    /** Return array of ayahs with {ayah: "2:255", text: "..."} for [from..to] within surah. */
    public function getAyahs(int $surahId, int $fromAyah, int $toAyah): array
    {
        $key = "quran:uthmani:{$surahId}";
        $data = Cache::remember($key, now()->addHours(12), function () use ($surahId) {
            $base = rtrim(env('QURAN_API_BASE','https://api.quran.com/api/v4'),'/');
            $res = Http::get("$base/chapters/$surahId/verses", [
                'language'=>'ar','fields'=>'text_uthmani,verse_key','per_page'=>300
            ])->json();
            $verses = $res['verses'] ?? [];
            return array_map(fn($v)=>[
                'ayah'=>$v['verse_key'] ?? "{$surahId}:?",
                'text'=>$v['text_uthmani'] ?? ''
            ], $verses);
        });

        $slice = [];
        foreach ($data as $i=>$row) {
            $num = $i+1;
            if ($num >= $fromAyah && $num <= $toAyah) {
                $slice[] = ['ayah'=>"{$surahId}:{$num}", 'text'=>$row['text']];
            }
        }
        return $slice;
    }
}
```

## 2.3 TajweedAnalyzer (alignment + rules)

```php
// apps/api/app/Services/TajweedAnalyzer.php
<?php

namespace App\Services;

/**
 * TajweedAnalyzer:
 * - Normalizes Arabic text
 * - Tokenizes into words
 * - Aligns expected vs recognized tokens (Levenshtein-style DP)
 * - Detects omissions/insertions/substitutions
 * - Applies rule heuristics (Noon/Meem, Madd, Qalqalah) and marks spans
 * Returns feedback JSON with per-word timings & highlights.
 */
class TajweedAnalyzer
{
    /** Normalize Qur’anic Arabic: remove tatweel/punct, keep diacritics for rules. */
    public static function norm(string $s): string {
        $s = preg_replace('/[ـۣۚۛۗۘۙۜ۟۠ۢۤۥۧۨ۩۪ۭ۫۬]/u','',$s); // Quranic marks (keep tanwin/harakat below)
        $s = preg_replace('/[^\p{Arabic}\sًٌٍَُِّْٰـ]/u','',$s); // Arabic letters + diacritics + space
        $s = preg_replace('/\s+/u',' ',trim($s));
        return $s;
    }

    /** Split text into tokens preserving Arabic words (with diacritics). */
    public static function tokens(string $s): array {
        $s = self::norm($s);
        return preg_split('/\s+/u', $s, -1, PREG_SPLIT_NO_EMPTY) ?: [];
    }

    /** Align expected tokens with ASR tokens. Returns array of ops: match|sub|ins|del. */
    public static function align(array $gold, array $asr): array {
        $n = count($gold); $m = count($asr);
        $dp = array_fill(0, $n+1, array_fill(0, $m+1, 0));
        $path = array_fill(0, $n+1, array_fill(0, $m+1, ''));
        for ($i=0;$i<=$n;$i++) $dp[$i][0] = $i;
        for ($j=0;$j<=$m;$j++) $dp[0][j] = $j;

        for ($i=1;$i<=$n;$i++){
            for ($j=1;$j<=$m;$j++){
                $cost = self::similar($gold[$i-1], $asr[$j-1]) ? 0 : 1;
                $choices = [
                    [$dp[$i-1][$j]+1,'del'],
                    [$dp[$i][$j-1]+1,'ins'],
                    [$dp[$i-1][$j-1]+$cost, $cost? 'sub':'match']
                ];
                usort($choices, fn($a,$b)=>$a[0]<=>$b[0]);
                [$dp[$i][$j], $path[$i][$j]] = $choices[0];
            }
        }
        // Backtrack
        $ops = [];
        $i=$n; $j=$m;
        while ($i>0 || $j>0) {
            $op = $path[$i][$j] ?? ($i>0?'del':'ins');
            if ($op==='match' || $op==='sub') { $ops[] = [$op,$i-1,$j-1]; $i--; $j--; }
            elseif ($op==='del') { $ops[] = ['del',$i-1,null]; $i--; }
            else { $ops[] = ['ins',null,$j-1]; $j--; }
        }
        return array_reverse($ops);
    }

    /** Arabic-aware similarity: exact or base letters equal ignoring harakat. */
    public static function similar(string $a, string $b): bool {
        $ba = self::stripHarakat($a); $bb = self::stripHarakat($b);
        return $ba === $bb;
    }

    /** Remove harakat keeping base letters. */
    public static function stripHarakat(string $s): string {
        return preg_replace('/[ًٌٍَُِّْٰ]/u','', $s);
    }

    /**
     * Detect Noon/Meem Sakinah, Madd, Qalqalah contexts in a verse (gold),
     * then evaluate loosely against ASR token sequence and timings.
     */
    public static function tajweedHints(array $goldTok): array {
        $lettersQalqalah = ['ق','ط','ب','ج','د']; // قطب جد
        $hints = [];
        for ($i=0;$i<count($goldTok);$i++){
            $w = $goldTok[$i];

            // 1) Noon Sakinah / Tanween context (simple text pattern check)
            if (preg_match('/نْ/u', $w) || preg_match('/[ًٌٍ]$/u', $w)) {
                $next = $goldTok[$i+1] ?? '';
                $rule = self::noonRule($next);
                $hints[] = ['type'=>'noon_sakinah','index'=>$i,'rule'=>$rule];
            }

            // 2) Meem Sakinah
            if (preg_match('/مْ/u', $w)) {
                $next = $goldTok[$i+1] ?? '';
                $rule = self::meemRule($next);
                $hints[] = ['type'=>'meem_sakinah','index'=>$i,'rule'=>$rule];
            }

            // 3) Qalqalah when letter in sukun (very rough text proxy)
            if (preg_match('/['.implode('', $lettersQalqalah).']ْ/u', $w)) {
                $hints[] = ['type'=>'qalqalah','index'=>$i];
            }

            // 4) Madd triggers (hamzah or shaddah following long vowel)
            if (preg_match('/[اوي]ْ?$/u', self::stripHarakat($w))) {
                $next = $goldTok[$i+1] ?? '';
                $rule = self::maddRule($w, $next);
                if ($rule) $hints[] = ['type'=>'madd','index'=>$i,'rule'=>$rule];
            }
        }
        return $hints;
    }

    /** Classify Noon Sakinah/Tanween rule by next letter. */
    private static function noonRule(string $nextWord): string {
        $nxt = self::stripHarakat(mb_substr(self::norm($nextWord),0,1));
        if ($nxt==='' ) return 'unknown';
        if (preg_match('/[ءهعحغخ]/u', $nxt)) return 'izhar';
        if (preg_match('/[يومن]/u', $nxt)) return 'idgham_ghunnah';
        if (preg_match('/[لر]/u', $nxt)) return 'idgham_no_ghunnah';
        if (preg_match('/[ب]/u', $nxt)) return 'iqlab';
        return 'ikhfa';
    }

    /** Classify Meem Sakinah rule by next letter. */
    private static function meemRule(string $nextWord): string {
        $nxt = self::stripHarakat(mb_substr(self::norm($nextWord),0,1));
        if ($nxt==='م') return 'idgham_shafawi';
        if ($nxt==='ب') return 'ikhfa_shafawi';
        return 'izhar_shafawi';
    }

    /** Identify Madd category by local pattern (simplified): wajib/muttasil, munfasil, laazim. */
    private static function maddRule(string $w, string $next): ?string {
        $a = self::norm($w); $b = self::norm($next);
        $hasLong = preg_match('/[اوي]/u', self::stripHarakat($a));
        if (!$hasLong) return null;
        $withinHamzah = preg_match('/[ء]/u', $a);
        $nextHamzah   = preg_match('/^[ء]/u', $b);
        $nextShaddah  = preg_match('/^[\p{Arabic}]ّ/u', $b);
        if ($withinHamzah) return 'madd_muttasil';      // same word hamzah
        if ($nextHamzah)   return 'madd_munfasil';      // next word hamzah
        if ($nextShaddah)  return 'madd_laazim';        // followed by shaddah
        return 'madd_tabeei';                            // natural madd (2)
    }

    /**
     * Compute feedback structure:
     * - ops from alignment
     * - map ASR words with timestamps to gold tokens
     * - annotate rule hints with "suspected_mistake" when alignment suggests issues
     * - estimate Madd lengths vs baseline (rough “harakat” timing)
     */
    public function analyze(array $ayahs, array $asrWords): array
    {
        // Combine ayah texts into gold token list with ayah index mapping
        $gold = []; $ayahMap = [];
        foreach ($ayahs as $i => $row) {
            $toks = self::tokens($row['text']);
            foreach ($toks as $k=>$tk) {
                $ayahMap[count($gold)] = ['ayah'=>$row['ayah'], 'idx_in_ayah'=>$k];
                $gold[] = $tk;
            }
        }

        // ASR tokens (already Arabic words) with timestamps [{w, start, end}]
        $asrTok = array_map(fn($x)=> $x['w'], $asrWords);

        // Align
        $ops = self::align($gold, $asrTok);

        // Tajweed hints from gold
        $hints = self::tajweedHints($gold);

        // Map ops to highlights
        $highlights = [];   // per gold index: {type: correct|sub|del, ...}
        $wordTimes  = [];   // per gold index: {start,end} when matched/sub
        foreach ($ops as [$op,$i,$j]) {
            if ($op==='match') { $highlights[$i] = ['type'=>'correct']; $wordTimes[$i] = $asrWords[$j] ?? null; }
            elseif ($op==='sub') { $highlights[$i] = ['type'=>'sub', 'asr'=>$asrTok[$j]??null]; $wordTimes[$i] = $asrWords[$j] ?? null; }
            elseif ($op==='del') { $highlights[$i] = ['type'=>'del']; }
            elseif ($op==='ins') { /* insertion doesn’t map to gold index */ }
        }

        // Estimate “harakah” baseline: average per-token duration of matched words
        $durations = [];
        foreach ($wordTimes as $i=>$wt) if ($wt && isset($wt['start'],$wt['end'])) $durations[] = max(0, ($wt['end'] - $wt['start']));
        $base = !empty($durations) ? array_sum($durations) / count($durations) : 0.35; // ~350ms fallback

        // Evaluate hints; flag suspect mistakes (heuristic)
        foreach ($hints as &$h) {
            $i = $h['index']; $span = $wordTimes[$i] ?? null;
            $h['ayah'] = $ayahMap[$i]['ayah'] ?? null;

            if ($h['type']==='madd' && $span) {
                $len = ($span['end'] - $span['start']);
                $ratio = $base>0 ? $len / $base : 1;
                $h['duration_s'] = round($len,2);
                $h['ratio'] = round($ratio,2);
                // crude targets: tabeei >= ~2, munfasil/muttasil ~4, laazim ~6 (relative to base)
                $target = match($h['rule']) {
                    'madd_tabeei' => 1.7,
                    'madd_munfasil','madd_muttasil' => 3.2,
                    'madd_laazim' => 4.5,
                    default => 1.6
                };
                if ($ratio < $target) $h['suspected_mistake'] = 'short_madd';
            }

            if (in_array($h['type'], ['noon_sakinah','meem_sakinah'])) {
                // If alignment shows substitution at index i, suspect improper application
                if (($highlights[$i]['type'] ?? '') === 'sub' || ($highlights[$i]['type'] ?? '') === 'del') {
                    $h['suspected_mistake'] = 'rule_application';
                }
            }

            if ($h['type']==='qalqalah' && $span) {
                // If duration is extremely short (no “bounce”), flag. Very heuristic.
                $len = ($span['end'] - $span['start']);
                if ($len < $base*0.5) $h['suspected_mistake'] = 'weak_qalqalah';
            }
        }

        // Build per-ayah structured feedback for UI
        $byAyah = [];
        foreach ($gold as $i=>$tok) {
            $a = $ayahMap[$i]['ayah'];
            $byAyah[$a] ??= ['tokens'=>[],'mistakes'=>[]];
            $byAyah[$a]['tokens'][] = [
                't'=>$tok,
                'hl'=>$highlights[$i] ?? ['type'=>'unknown'],
                'time'=>$wordTimes[$i] ?? null,
            ];
        }
        foreach ($hints as $h) {
            $a = $h['ayah'] ?? ($ayahs[0]['ayah'] ?? '??');
            $byAyah[$a] ??= ['tokens'=>[],'mistakes'=>[]];
            $byAyah[$a]['mistakes'][] = $h;
        }

        // Compute simple scores
        $total = count($gold);
        $correct = count(array_filter($highlights, fn($x)=>($x['type']??'')==='correct'));
        $subs = count(array_filter($highlights, fn($x)=>($x['type']??'')==='sub'));
        $dels = count(array_filter($highlights, fn($x)=>($x['type']??'')==='del'));
        $accuracy = $total>0 ? max(0, round(100*($correct - 0.5*$subs - 1.0*$dels)/$total)) : 0;

        return [
            'summary'=>[
                'accuracy'=>$accuracy,
                'words_total'=>$total,
                'correct'=>$correct,
                'substitutions'=>$subs,
                'omissions'=>$dels
            ],
            'ayahs'=>$byAyah
        ];
    }
}
```

---

# 3) Laravel — Recitation Pipeline (Controller + Job)

## 3.1 Controller

```php
// apps/api/app/Http/Controllers/Core/RecitationController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\Recitation;
use App\Services\OpenAIWhisperClient;
use App\Services\QuranSource;
use App\Services\TajweedAnalyzer;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Bus;

/**
 * RecitationController:
 * - submit() creates a Recitation row and dispatches processing job
 * - status() returns status + feedback JSON when ready
 */
class RecitationController extends Controller
{
    /** POST /recitation/submit: User submits metadata after uploading to S3 using presign. */
    public function submit(Request $r) {
        $u = $r->user();
        $data = $r->validate([
            'surah_id'=>'required|integer|min:1|max:114',
            'from_ayah'=>'required|integer|min:1',
            'to_ayah'=>'required|integer|min:1|gte:from_ayah',
            's3_key'=>'required|string'
        ]);
        $rec = Recitation::create([
            'user_id'=>$u->id,
            'surah_id'=>$data['surah_id'],
            'from_ayah'=>$data['from_ayah'],
            'to_ayah'=>$data['to_ayah'],
            's3_key'=>$data['s3_key'],
            'status'=>'queued'
        ]);

        Bus::dispatch(new \App\Jobs\ProcessRecitationJob($rec->id));
        return response()->json(['id'=>$rec->id, 'status'=>'queued']);
    }

    /** GET /recitation/{id}/status: returns state + feedback when done. */
    public function status(Request $r, Recitation $recitation) {
        abort_unless($recitation->user_id === $r->user()->id || $r->user()->hasRole('teacher') || $r->user()->hasRole('admin'), 403);
        return response()->json([
            'status'=>$recitation->status,
            'feedback'=>$recitation->feedback_json,
            'transcript'=>$recitation->transcript_json,
            'error'=>$recitation->error_message
        ]);
    }
}
```

**Routes:**

```php
// apps/api/routes/api.php
use App\Http\Controllers\Core\RecitationController;
Route::post('/recitation/submit', [RecitationController::class,'submit'])->middleware('auth:sanctum');
Route::get('/recitation/{recitation}/status', [RecitationController::class,'status'])->middleware('auth:sanctum');
```

## 3.2 Queue Job

```php
// apps/api/app/Jobs/ProcessRecitationJob.php
<?php

namespace App\Jobs;

use App\Models\Recitation;
use App\Services\OpenAIWhisperClient;
use App\Services\QuranSource;
use App\Services\TajweedAnalyzer;
use Exception;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;

/**
 * Processes a Recitation:
 * 1) Call Whisper for word-level timestamps
 * 2) Get canonical ayah texts
 * 3) Align tokens and compute Tajweed feedback
 * 4) Save transcript + feedback JSON
 */
class ProcessRecitationJob implements ShouldQueue
{
    use Dispatchable, Queueable;

    public function __construct(public int $recitationId) {}

    public function handle(OpenAIWhisperClient $whisper, QuranSource $source): void
    {
        $rec = Recitation::findOrFail($this->recitationId);
        $rec->update(['status'=>'processing']);

        try {
            // 1) ASR
            $asr = $whisper->transcribeS3($rec->s3_key);
            // Expect $asr['segments'][..]['words'] = [{word, start, end}]
            $words = [];
            foreach (($asr['segments'] ?? []) as $seg) {
                foreach (($seg['words'] ?? []) as $w) {
                    // Normalize Arabic token
                    $words[] = [
                        'w' => $w['word'] ?? '',
                        'start' => (float)($w['start'] ?? $seg['start'] ?? 0),
                        'end'   => (float)($w['end']   ?? $seg['end']   ?? 0),
                    ];
                }
            }
            $durationMs = 0;
            if (!empty($asr['segments'])) {
                $last = end($asr['segments']);
                $durationMs = (int) (1000 * (($last['end'] ?? 0) - ($asr['segments'][0]['start'] ?? 0)));
            }

            // 2) Canonical ayahs
            $ayahs = $source->getAyahs($rec->surah_id, $rec->from_ayah, $rec->to_ayah);

            // 3) Analyze & score
            $an = new TajweedAnalyzer();
            $feedback = $an->analyze($ayahs, $words);

            // 4) Save
            $rec->update([
                'duration_ms'=>$durationMs,
                'transcript_json'=>$asr,
                'feedback_json'=>$feedback,
                'status'=>'done'
            ]);
        } catch (Exception $e) {
            $rec->update(['status'=>'failed', 'error_message'=>$e->getMessage()]);
        }
    }
}
```

> Ensure your **queue** is running via cPanel cron with DB driver:
>
> ```
> php artisan schedule:run
> php artisan queue:work --stop-when-empty
> ```

---

# 4) Next.js — Upload + Submit + Highlighter UI

## 4.1 Upload widget (S3 presign you already have) + submit job

```tsx
// apps/web/src/app/recite/page.tsx
"use client";
import React, { useState } from "react";
import { api } from "@/lib/api";

/**
 * Simple flow:
 * 1) Choose surah & range
 * 2) Upload audio via presigned PUT
 * 3) Submit to /recitation/submit and poll status
 */
export default function RecitePage() {
  const [surah, setSurah] = useState(1);
  const [fromAyah, setFromAyah] = useState(1);
  const [toAyah, setToAyah] = useState(7);
  const [recId, setRecId] = useState<number|undefined>(undefined);
  const [status, setStatus] = useState<string>("idle");
  const [feedback, setFeedback] = useState<any>(null);

  /** Upload file to S3 via server-issued presign, then submit job. */
  async function handleFile(file: File) {
    // 1) presign
    const init = await api<any>("/assets/upload/init", {
      method:"POST", body: JSON.stringify({ content_type: file.type, kind: "audio" })
    });
    await fetch(init.put_url, { method:"PUT", headers:{ "Content-Type": file.type }, body:file });

    // 2) submit recitation job
    const sub = await api<any>("/recitation/submit", {
      method:"POST",
      body: JSON.stringify({ surah_id: surah, from_ayah: fromAyah, to_ayah: toAyah, s3_key: init.key })
    });
    setRecId(sub.id);
    setStatus("queued");

    // 3) poll
    poll(sub.id);
  }

  /** Poll status until done/failed, save feedback JSON to state. */
  async function poll(id:number) {
    let attempts = 0;
    const tick = async () => {
      const s = await api<any>(`/recitation/${id}/status`);
      setStatus(s.status);
      if (s.status === "done") { setFeedback(s.feedback); return; }
      if (s.status === "failed") { alert("ASR failed: " + (s.error||"")); return; }
      attempts++; if (attempts < 120) setTimeout(tick, 2500);
    };
    tick();
  }

  return (
    <main className="max-w-2xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">AI Recitation Checker (Beta)</h1>

      <div className="rounded-2xl p-4 bg-white shadow mb-4">
        <div className="grid grid-cols-3 gap-3">
          <label className="text-sm">Surah
            <input type="number" className="w-full border rounded px-2 py-1"
                   value={surah} min={1} max={114} onChange={(e)=>setSurah(Number(e.target.value))}/>
          </label>
          <label className="text-sm">From
            <input type="number" className="w-full border rounded px-2 py-1"
                   value={fromAyah} min={1} onChange={(e)=>setFromAyah(Number(e.target.value))}/>
          </label>
          <label className="text-sm">To
            <input type="number" className="w-full border rounded px-2 py-1"
                   value={toAyah} min={fromAyah} onChange={(e)=>setToAyah(Number(e.target.value))}/>
          </label>
        </div>
        <div className="mt-3">
          <input type="file" accept="audio/*" onChange={(e)=>e.target.files?.[0] && handleFile(e.target.files[0])}/>
        </div>
        {recId && <div className="mt-2 text-sm">Recitation #{recId} • {status}</div>}
      </div>

      {feedback && <TajweedFeedbackView data={feedback} />}
    </main>
  );
}

/** Inline component to avoid separate file in this snippet */
function TajweedFeedbackView({ data }: { data:any }) {
  const ayahKeys = Object.keys(data.ayahs || {});
  return (
    <div className="rounded-2xl p-4 bg-white shadow">
      <div className="mb-3">
        <div className="font-semibold">Overall</div>
        <div className="text-sm text-gray-700">
          Accuracy: {data.summary?.accuracy}% • Total words: {data.summary?.words_total} •
          Correct: {data.summary?.correct} • Subs: {data.summary?.substitutions} • Omissions: {data.summary?.omissions}
        </div>
      </div>

      {ayahKeys.map((k)=> {
        const a = data.ayahs[k];
        return (
          <div key={k} className="mb-4">
            <div className="text-xs text-gray-500 mb-1">Ayah {k}</div>
            <div className="text-2xl leading-[2.4rem] flex flex-wrap">
              {(a.tokens||[]).map((t:any, i:number)=> {
                const typ = t.hl?.type || 'unknown';
                const style =
                  typ==='correct' ? 'bg-emerald-50' :
                  typ==='sub' ? 'bg-amber-50 underline decoration-amber-600' :
                  typ==='del' ? 'bg-rose-100 line-through decoration-rose-600' :
                  '';
                return (
                  <span key={i} className={`px-1 rounded cursor-pointer ${style}`}
                        onClick={()=> t.time && playSlice(t.time.start, t.time.end)}>
                    {t.t}
                  </span>
                );
              })}
            </div>

            {(a.mistakes||[]).length>0 && (
              <div className="mt-2 text-sm">
                {(a.mistakes||[]).map((m:any, idx:number)=>(
                  <div key={idx} className="flex items-center gap-2">
                    <span className="inline-block w-2 h-2 rounded-full bg-[#7A001F]" />
                    <div>
                      <span className="font-medium capitalize">{m.type.replace('_',' ')}</span>
                      {m.rule && <span className="ml-2 text-gray-600">({m.rule.replace('_',' ')})</span>}
                      {m.suspected_mistake && <span className="ml-2 text-rose-600">→ {m.suspected_mistake.replace('_',' ')}</span>}
                      {m.duration_s && <span className="ml-2 text-gray-600">{m.duration_s}s (x{m.ratio})</span>}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        );
      })}
    </div>
  );
}

/** Plays a slice of the last uploaded file if available (simplified demo).
 * In production, also render an <audio> element bound to the user's uploaded file or S3 signed GET url.
 */
function playSlice(start:number, end:number) {
  // This is a placeholder. In your production page, keep a hidden <audio> with the recitation source
  // and set currentTime + timers. Example:
  // audio.currentTime = start; audio.play(); setTimeout(()=>audio.pause(), (end-start)*1000);
  alert(`Play segment ${start.toFixed(2)}s → ${end.toFixed(2)}s`);
}
```

> To complete audio slice playback, mount an `<audio>` tag bound to the **user’s S3 GET URL** and control `currentTime` as shown in the comment (you already know how—identical to the AB-loop logic earlier).

---

# 5) How the detection really works (and where you can take it next)

**Today (ships now):**

* **Word-level timestamps** from Whisper (`verbose_json` + `timestamp_granularities=word`)
* **Levenshtein alignment** between expected Qur’anic tokens and ASR tokens
  → flags **omissions**, **substitutions**, and likely **insertions**
* **Tajweed rule zones** (computed from **canonical text**, not the audio):

  * **Noon Sakinah / Tanween** → izhar / idgham (with/without ghunnah) / iqlab / ikhfa
  * **Meem Sakinah** → izhar shafawi / idgham shafawi / ikhfa shafawi
  * **Madd** → tabeei / munfasil / muttasil / laazim (rough duration check vs baseline)
  * **Qalqalah** → flagged when letter in sukun (rough timing quality check)
* **Heuristics** tie **alignment mistakes** at those indices to **probable Tajweed issues**, and **madd** is validated against relative duration (a **“harakah baseline”** estimated from average matched token duration).

**Near-term upgrades (you can add incrementally):**

1. **Phoneme alignment** (Open-source like `Montreal Forced Aligner` analogs for Arabic, or lightweight ONNX phoneme detector) to confirm **ghunnah** and **qalqalah** acoustically (formant/energy burst).
2. **Pitch/energy contours** with `WebAudio` (client) or `librosa` (server via PHP -> Python microservice) to strengthen **madd/gunnah** detection.
3. **Per-letter overlay** by splitting words into **grapheme clusters** (with diacritics) and distributing each token’s time proportionally across chars → truly **letter-level highlighting**.
4. **Confidence-driven UX**: show **“Needs attention”** only when confidence < threshold; otherwise show “Looks good”.

---

# 6) Security, Performance, and cPanel Notes

* **No Redis** used—**file cache** for Quran payloads; **DB queue** for jobs.
* **Audio uploads** are pre-signed **S3 PUT**; never expose secrets.
* **Whisper API**: uses **Guzzle** with **multipart** upload; 120s timeout (increase if needed).
* **cPanel cron**: keep `schedule:run` every minute and a `queue:work --stop-when-empty` each minute (or a “daemonized” worker if allowed).
* **PII**: store only needed ASR JSON; delete temp files immediately; keep S3 audio locked behind signed GET URLs.

---

# 7) Quick Checklist to turn it on (Windows/Laragon)

1. `composer require guzzlehttp/guzzle` (already typical)
2. Set `.env`:

   ```
   OPENAI_API_KEY=sk-...
   QURAN_API_BASE=https://api.quran.com/api/v4
   ```
3. `php artisan migrate`
4. Ensure S3 disk is configured; your existing **/assets/upload/init** is reused.
5. Open the **/recite** page, upload a short WebM/MP3, submit, and watch highlights appear.



# 1) Letter-Level Timing & Highlighting

**Goal:** map each **Arabic word** to **grapheme clusters** (letter + diacritics) and distribute the word’s audio time across letters for **fine-grained highlighting**.

## 1.1 PHP: Arabic grapheme splitter

```php
// apps/api/app/Support/ArabicGraphemes.php
<?php

namespace App\Support;

/**
 * ArabicGraphemes splits a word into visual clusters (letter + diacritics).
 * This lets us attribute sub-word timing for per-letter highlighting.
 */
class ArabicGraphemes
{
    /** Split preserving base + harakat cluster, e.g. "اللّٰه" -> ["ا", "للّ", "ٰه"]. */
    public static function split(string $word): array
    {
        $chars = preg_split('//u', $word, -1, PREG_SPLIT_NO_EMPTY) ?: [];
        $clusters = [];
        $buf = '';
        foreach ($chars as $ch) {
            // Arabic combining marks (harakat & shadda & dagger alif)
            if (preg_match('/[ًٌٍَُِّْٰ]/u', $ch)) {
                $buf .= $ch; // attach diacritic to current base
            } else {
                if ($buf !== '') $clusters[] = $buf;
                $buf = $ch; // start new base
            }
        }
        if ($buf !== '') $clusters[] = $buf;
        return $clusters;
    }
}
```

## 1.2 Update TajweedAnalyzer to include letter spans

Add near the end of `analyze()` (after we filled `$wordTimes`):

```php
// apps/api/app/Services/TajweedAnalyzer.php  (inside analyze())
use App\Support\ArabicGraphemes;

// …
$letters = []; // per gold index => [{g:"اللّ", start, end}, ...]
foreach ($gold as $i=>$tok) {
    $wt = $wordTimes[$i] ?? null;
    if (!$wt || !isset($wt['start'],$wt['end'])) continue;

    $gr = ArabicGraphemes::split($tok);
    $n  = max(1, count($gr));
    $dur = max(0.001, $wt['end'] - $wt['start']);
    $step = $dur / $n;

    $letters[$i] = [];
    for ($k=0;$k<$n;$k++) {
        $letters[$i][] = [
            'g'     => $gr[$k],
            'start' => $wt['start'] + $k*$step,
            'end'   => $wt['start'] + ($k+1)*$step
        ];
    }
}

// attach letter timing to per-ayah tokens
foreach ($byAyah as $ayahKey => &$pack) {
    $cursor = 0;
    foreach ($pack['tokens'] as &$tk) {
        $glob = array_keys($ayahMap, ['ayah'=>$ayahKey,'idx_in_ayah'=>$cursor])[0] ?? null;
        if ($glob !== null && isset($letters[$glob])) $tk['letters'] = $letters[$glob];
        $cursor++;
    }
}
```

> Now each token in `feedback.ayahs[ayah].tokens[i]` packs a `letters[]` array with **start/end** for per-letter playback/hover highlights.

---

# 2) Ghunnah Intensity (Client-side RMS/energy)

We’ll measure **nasal prolongation** heuristically from the user’s audio by sampling the audio buffer around **Noon/Meem ghunnah** words and computing **RMS energy** + **duration**.

## 2.1 Next.js utility to sample audio slice RMS

```ts
// apps/web/src/lib/audioRms.ts
/**
 * Compute RMS (root mean square) energy between [start,end] seconds.
 * Requires an <audio> element already loaded; uses WebAudio API.
 */
export async function sliceRMS(audioEl: HTMLAudioElement, start: number, end: number): Promise<number> {
  const ctx = new AudioContext();
  const src = ctx.createMediaElementSource(audioEl);
  const analyser = ctx.createAnalyser();
  analyser.fftSize = 2048;
  src.connect(analyser);
  analyser.connect(ctx.destination);

  // Seek and play muted to force decode
  audioEl.muted = true;
  audioEl.currentTime = Math.max(0, start);
  await audioEl.play();

  // Wait a tiny bit to fill buffer
  await new Promise(r => setTimeout(r, Math.min(400, (end-start)*1000)));

  const len = analyser.fftSize;
  const data = new Float32Array(len);
  analyser.getFloatTimeDomainData(data);

  // Pause
  audioEl.pause(); audioEl.muted = false;
  src.disconnect(); analyser.disconnect(); ctx.close();

  let sum = 0;
  for (let i=0;i<len;i++) sum += data[i]*data[i];
  return Math.sqrt(sum/len);
}
```

## 2.2 Use RMS in feedback view

Add an `<audio>` bound to the uploaded S3 **GET** URL (you already generate signed URLs; reuse it here) and show a **ghunnah badge** when RMS is low for a ghunnah zone.

```tsx
// apps/web/src/app/recite/page.tsx (inside TajweedFeedbackView)
import { sliceRMS } from "@/lib/audioRms";

function TajweedFeedbackView({ data }: { data:any }) {
  const [audioUrl, setAudioUrl] = React.useState<string|undefined>(undefined); // set this from your upload step (init.get_url or signed GET)

  async function checkGhunnah(m:any) {
    if (!audioUrl || !m.duration_s || !m.index) return alert("Load audio first.");
    const audio = document.getElementById("rec-audio") as HTMLAudioElement;
    const wt = findWordTime(data, m.index); // implement helper to find the target word time by global index
    if (!wt) return alert("No timing.");
    const rms = await sliceRMS(audio, wt.start, wt.end);
    alert(`Ghunnah RMS ~ ${rms.toFixed(3)} (higher = stronger nasal energy)`);
  }

  return (
    <div className="rounded-2xl p-4 bg-white shadow">
      {audioUrl && <audio id="rec-audio" src={audioUrl} controls className="mb-3 w-full" />}
      {/* …rest as before… */}
      {/* For each mistake row, if m.type noon/meem, show 'Check ghunnah' button */}
    </div>
  );
}
```

> This is a **heuristic** (client-only) check you can use to **augment** the server verdict for **noon\_sakinah / meem\_sakinah** entries.

---

# 3) Teacher Review UI (Approve/Override & Convert Mistakes → Hotspots)

**Flow:** Teacher opens a recitation → sees **per-ayah colored text** → can **approve/override** labels and **“Create targets”** → system creates **hotspots** on a selected flipbook page pointing to **the exact words** needing practice (auto-attaches teacher audio if recorded).

## 3.1 DB: simple review flags

```php
// apps/api/database/migrations/2025_01_07_000022_add_review_fields_on_recitations.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /** Adds teacher review fields. */
    public function up(): void {
        Schema::table('recitations', function (Blueprint $t) {
            $t->foreignId('reviewed_by')->nullable()->constrained('users')->nullOnDelete();
            $t->dateTime('reviewed_at')->nullable();
            $t->text('review_notes')->nullable();
        });
    }
    public function down(): void {
        Schema::table('recitations', fn(Blueprint $t)=> $t->dropColumn(['reviewed_by','reviewed_at','review_notes']));
    }
};
```

## 3.2 API: review & convert endpoints

```php
// apps/api/app/Http/Controllers/Core/RecitationReviewController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\Assignment;
use App\Models\Hotspot;
use App\Models\Recitation;
use Illuminate\Http\Request;

/**
 * Teacher Review: approve/override feedback and create hotspots from mistakes.
 */
class RecitationReviewController extends Controller
{
    /** PATCH /recitation/{id}/review {notes, overrides[]} — teacher only */
    public function review(Request $r, Recitation $recitation) {
        $this->authorize('update', $recitation->user); // or policy: teacher owns student
        $data = $r->validate([
            'notes'=>'nullable|string|max:3000',
            'overrides'=>'nullable|array', // [{ayah:"2:255", token_index: 3, verdict:"correct|sub|del"}]
        ]);
        $fb = $recitation->feedback_json ?? [];
        if (!empty($data['overrides'])) {
            foreach ($data['overrides'] as $ov) {
                $a = $ov['ayah'] ?? null; $ti = $ov['token_index'] ?? null; $ver = $ov['verdict'] ?? null;
                if (!$a || $ti===null || !$ver) continue;
                $fb['ayahs'][$a]['tokens'][$ti]['hl']['type'] = $ver;
            }
        }
        $recitation->update([
            'feedback_json'=>$fb,
            'reviewed_by'=>$r->user()->id,
            'reviewed_at'=>now(),
            'review_notes'=>$data['notes'] ?? null
        ]);
        return response()->json(['ok'=>true]);
    }

    /** POST /recitation/{id}/create-hotspots {assignment_page_id, picks[]} */
    public function createHotspots(Request $r, Recitation $recitation) {
        $this->authorize('update', $recitation->user);
        $data = $r->validate([
            'assignment_page_id'=>'required|exists:assignment_pages,id',
            'picks'=>'required|array' // [{ayah:"2:255", token_index: 3, title, tooltip}]
        ]);
        $created = [];
        foreach ($data['picks'] as $p) {
            $created[] = Hotspot::create([
                'assignment_page_id'=>$data['assignment_page_id'],
                'shape'=>'rect', // default rectangle; teacher can refine later
                'x'=>rand(20,120), 'y'=>rand(20,120), 'width'=>140, 'height'=>50,
                'title'=>$p['title'] ?? "Focus: {$p['ayah']} #{$p['token_index']}",
                'tooltip'=>$p['tooltip'] ?? 'Practice this word',
                'audio_s3_url'=>null
            ]);
        }
        return response()->json($created);
    }
}
```

**Routes:**

```php
// apps/api/routes/api.php
use App\Http\Controllers\Core\RecitationReviewController;
Route::patch('/recitation/{recitation}/review', [RecitationReviewController::class,'review'])->middleware('auth:sanctum');
Route::post('/recitation/{recitation}/create-hotspots', [RecitationReviewController::class,'createHotspots'])->middleware('auth:sanctum');
```

> Authorization note: plug in your **teacher↔student policy** (e.g., via classes table) so teachers can only review their students.

## 3.3 Next.js: Teacher Review page

```tsx
// apps/web/src/app/teacher/reviews/[id]/page.tsx
"use client";
import React, { useEffect, useState } from "react";
import { api } from "@/lib/api";

/** Teacher Review:
 * - Fetch recitation status/feedback
 * - Toggle tokens' verdicts
 * - Pick mistakes and create hotspots on a chosen page
 */
export default function TeacherReview({ params }: { params:{ id:string } }) {
  const [data, setData] = useState<any>(null);
  const [assignmentPageId, setAssignmentPageId] = useState<number|undefined>(undefined);
  const [picks, setPicks] = useState<any[]>([]);

  async function load() {
    const r = await api<any>(`/recitation/${params.id}/status`);
    setData(r);
  }
  useEffect(()=>{ load(); }, [params.id]);

  /** Toggle verdict for a given ayah/token index. */
  function toggleVerdict(ayahKey: string, ti: number) {
    const cur = data.feedback.ayahs[ayahKey].tokens[ti].hl?.type || 'unknown';
    const order = ['correct','sub','del'];
    const next = order[(order.indexOf(cur)+1)%order.length] ?? 'correct';
    const clone = structuredClone(data);
    clone.feedback.ayahs[ayahKey].tokens[ti].hl = { type: next };
    setData(clone);
  }

  /** Save overrides to server. */
  async function saveReview() {
    const overrides: any[] = [];
    Object.entries(data.feedback.ayahs).forEach(([k, pack]: any) => {
      (pack.tokens||[]).forEach((t:any, i:number) => {
        if (t.override) overrides.push({ ayah:k, token_index:i, verdict:t.hl?.type||'correct' });
      });
    });
    await api(`/recitation/${params.id}/review`, { method:"PATCH", body: JSON.stringify({ notes:"Reviewed in UI", overrides }) });
    alert("Saved.");
  }

  /** Add token to picks list for hotspot generation. */
  function addPick(ayahKey: string, tokenIndex: number) {
    setPicks(p => [...p, { ayah: ayahKey, token_index: tokenIndex, title: "Practice word", tooltip: "Focus on Tajweed here" }]);
  }

  /** Create hotspots on chosen assignment page. */
  async function createHotspots() {
    if (!assignmentPageId) return alert("Pick a page first.");
    const res = await api(`/recitation/${params.id}/create-hotspots`, {
      method:"POST", body: JSON.stringify({ assignment_page_id: assignmentPageId, picks })
    });
    alert(`Created ${Array.isArray(res) ? res.length : 0} hotspots.`);
    setPicks([]);
  }

  if (!data?.feedback) return <main className="p-6">Loading…</main>;

  const ayahKeys = Object.keys(data.feedback.ayahs || {});
  return (
    <main className="max-w-4xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-3">Teacher Review</h1>

      <div className="mb-3 text-sm text-gray-700">
        Accuracy {data.feedback.summary?.accuracy}% • Words {data.feedback.summary?.words_total}
      </div>

      <div className="rounded-2xl p-4 bg-white shadow mb-4">
        <div className="flex gap-3 items-center">
          <input className="border rounded px-2 py-1" type="number" placeholder="Assignment Page ID"
                 value={assignmentPageId ?? ""} onChange={(e)=>setAssignmentPageId(Number(e.target.value)||undefined)} />
          <button className="px-3 py-1 border rounded" onClick={createHotspots} disabled={!picks.length || !assignmentPageId}>
            Create {picks.length} hotspot(s)
          </button>
          <button className="px-3 py-1 border rounded" onClick={saveReview}>Save Review</button>
        </div>
      </div>

      {ayahKeys.map((k)=> {
        const a = data.feedback.ayahs[k];
        return (
          <div key={k} className="mb-6">
            <div className="text-xs text-gray-500 mb-1">Ayah {k}</div>
            <div className="text-2xl leading-[2.4rem] flex flex-wrap">
              {(a.tokens||[]).map((t:any, i:number)=> {
                const typ = t.hl?.type || 'unknown';
                const style =
                  typ==='correct' ? 'bg-emerald-50' :
                  typ==='sub' ? 'bg-amber-50 underline decoration-amber-600' :
                  typ==='del' ? 'bg-rose-100 line-through decoration-rose-600' :
                  '';
                return (
                  <span key={i}
                        className={`px-1 rounded cursor-pointer ${style}`}
                        onClick={()=> { toggleVerdict(k, i); addPick(k, i); }}>
                    {t.t}
                  </span>
                );
              })}
            </div>
            {(a.mistakes||[]).length>0 &&
              <ul className="mt-2 text-sm list-disc ml-5">
                {(a.mistakes||[]).map((m:any, idx:number)=>(
                  <li key={idx} className="text-gray-700">
                    {m.type} {m.rule ? `(${m.rule})` : ""} {m.suspected_mistake ? `→ ${m.suspected_mistake}` : ""}
                    {m.duration_s ? ` • ${m.duration_s}s` : ""}
                  </li>
                ))}
              </ul>
            }
          </div>
        );
      })}
    </main>
  );
}
```

---

# 4) “Auto-Targets” (Generate a Personalized Practice Assignment)

Give teachers a **one-click** way to produce a practice pack:

* Creates an **Assignment** named “Auto-Targets for \[Student]”
* Adds selected **hotspots** (rect defaults; teacher can refine with Konva)
* Optionally **attaches teacher audio** (recorded inline), saved to S3, linked to each hotspot

## 4.1 API helper to spawn the assignment quickly

```php
// apps/api/app/Http/Controllers/Core/AutoTargetController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\Assignment;
use App\Models\AssignmentPage;
use App\Models\ClassMember;
use App\Models\Hotspot;
use App\Models\User;
use Illuminate\Http\Request;

/**
 * Creates a tailored assignment with hotspots for a single student.
 */
class AutoTargetController extends Controller
{
    /** POST /auto-targets
     * { student_id, title?, page_image_s3_url, hotspots:[{title,tooltip,audio_s3_url?}] }
     */
    public function create(Request $r) {
        $data = $r->validate([
            'student_id'=>'required|exists:users,id',
            'title'=>'nullable|string|max:200',
            'page_image_s3_url'=>'required|url',
            'hotspots'=>'required|array|min:1',
            'hotspots.*.title'=>'nullable|string|max:120',
            'hotspots.*.tooltip'=>'nullable|string|max:500',
            'hotspots.*.audio_s3_url'=>'nullable|url',
        ]);

        // Ensure teacher has access to student (class membership, etc.)
        // (Implement your authorization rule here)

        $title = $data['title'] ?? 'Auto-Targets Practice';
        $ass = Assignment::create([
            'title'=>$title,
            'description'=>'AI-selected Tajweed focus areas',
            'class_id'=>null, // personal
            'due_at'=>now()->addDays(7),
            'assigned_to_user_ids'=>json_encode([$data['student_id']])
        ]);

        $page = AssignmentPage::create([
            'assignment_id'=>$ass->id,
            'page_index'=>0,
            'image_s3_url'=>$data['page_image_s3_url']
        ]);

        foreach ($data['hotspots'] as $h) {
            Hotspot::create([
                'assignment_page_id'=>$page->id,
                'shape'=>'rect','x'=>rand(40,160),'y'=>rand(40,160),'width'=>160,'height'=>60,
                'title'=>$h['title'] ?? 'Practice',
                'tooltip'=>$h['tooltip'] ?? '',
                'audio_s3_url'=>$h['audio_s3_url'] ?? null
            ]);
        }

        return response()->json(['assignment_id'=>$ass->id, 'page_id'=>$page->id]);
    }
}
```

**Route:**

```php
// apps/api/routes/api.php
use App\Http\Controllers\Core\AutoTargetController;
Route::post('/auto-targets', [AutoTargetController::class,'create'])->middleware('auth:sanctum');
```


# 6) Ops & Safety

* **Audio size**: enforce maximum (e.g., 10 MB) on presign init; reject bigger uploads.
* **Timeouts**: Whisper call set to 120s; for long recitations, chunk audio client-side or instruct “≤ 90s per attempt”.
* **Privacy**: clear temp files immediately; S3 objects private + signed GET only.
* **Queue**: DB driver, cPanel cron every minute; if a queue backlog grows, reduce concurrent submissions with UI “busy” guard.

Absolutely — here’s a **production-ready “Auto-Rank Mistakes”** upgrade that scores and ranks Tajweed issues (like **omissions, substitutions, short madd, rule application, weak qalqalah**), groups them by **type and rule**, and exposes **Top N targets** you can feed straight into the **Teacher Review → Create Hotspots** flow. All snippets follow your preferences: **Windows-friendly**, **English**, and **function-level comments**.

---

# 1) Server: Weighted Scoring & Rankings (Laravel)

## 1.1 Extend `TajweedAnalyzer::analyze()` to produce rankings

Add this block **at the end** of `analyze()` (after we computed `$byAyah` and `summary`), before `return`:

```php
// apps/api/app/Services/TajweedAnalyzer.php  (append inside analyze(), before return)

/** ---------- Auto-Ranking of Mistakes ----------
 * We build a flat list of mistake candidates with a severity score:
 * - del (omission)            →  5.0
 * - sub (substitution)        →  3.5
 * - madd shortfall            →  3.0 (scaled by deficit)
 * - noon/meem rule issues     →  2.5
 * - weak qalqalah             →  2.0
 * We then aggregate by type & rule, and pick top token-level items.
 */

// 1) Build a flat list combining align-highlights + tajweed hints
$flat = []; // [{ayah, token_index, type, rule?, suspected?, time?, score}]
foreach ($byAyah as $aKey => $pack) {
    foreach (($pack['tokens'] ?? []) as $i => $tk) {
        $hlType = $tk['hl']['type'] ?? 'unknown';
        $base   = 0.0;
        if ($hlType === 'del')      $base = 5.0;
        elseif ($hlType === 'sub')  $base = 3.5;

        if ($base > 0) {
            $flat[] = [
                'ayah' => $aKey,
                'token_index' => $i,
                'type' => $hlType,
                'rule' => null,
                'suspected' => null,
                'time' => $tk['time'] ?? null,
                'score' => $base,
            ];
        }
    }
    foreach (($pack['mistakes'] ?? []) as $m) {
        $mt = $m['type'] ?? 'unknown';
        $sc = 0.0;
        if ($mt === 'madd') {
            // Madd deficit severity (lower ratio => bigger deficit)
            $ratio = (float)($m['ratio'] ?? 1.0);
            if (($m['suspected_mistake'] ?? '') === 'short_madd') {
                $deficit = max(0.0, 1.0 - min(1.0, $ratio /  (match($m['rule'] ?? 'madd_tabeei') {
                    'madd_tabeei' => 1.7, 'madd_munfasil' => 3.2, 'madd_muttasil' => 3.2, 'madd_laazim' => 4.5, default => 1.6
                })));
                $sc = 3.0 + 2.0 * $deficit; // 3.0..5.0
            } else {
                $sc = 1.5; // mild hint
            }
        } elseif ($mt === 'noon_sakinah' || $mt === 'meem_sakinah') {
            $sc = ($m['suspected_mistake'] ?? '') === 'rule_application' ? 2.5 : 1.5;
        } elseif ($mt === 'qalqalah') {
            $sc = ($m['suspected_mistake'] ?? '') === 'weak_qalqalah' ? 2.0 : 1.0;
        } else {
            $sc = 1.0;
        }

        $flat[] = [
            'ayah' => $m['ayah'] ?? $aKey,
            'token_index' => $m['index'] ?? 0,
            'type' => $mt,
            'rule' => $m['rule'] ?? null,
            'suspected' => $m['suspected_mistake'] ?? null,
            'time' => null,
            'score' => $sc,
        ];
    }
}

// 2) Merge duplicates for same ayah/token (take max score, merge attributes)
$merged = [];
foreach ($flat as $f) {
    $key = $f['ayah'].'#'.$f['token_index'].'#'.($f['type'] ?? 'x');
    if (!isset($merged[$key]) || $f['score'] > $merged[$key]['score']) {
        $merged[$key] = $f;
    } else {
        // enrich rule/suspected if missing
        if (!$merged[$key]['rule'] && $f['rule']) $merged[$key]['rule'] = $f['rule'];
        if (!$merged[$key]['suspected'] && $f['suspected']) $merged[$key]['suspected'] = $f['suspected'];
        if (!$merged[$key]['time'] && $f['time']) $merged[$key]['time'] = $f['time'];
    }
}
$merged = array_values($merged);

// 3) Aggregations
$byType = [];  // type => totalScore
$byRule = [];  // rule => totalScore
foreach ($merged as $f) {
    $byType[$f['type']] = ($byType[$f['type']] ?? 0) + $f['score'];
    if ($f['rule']) $byRule[$f['rule']] = ($byRule[$f['rule']] ?? 0) + $f['score'];
}
// Sort desc
arsort($byType); arsort($byRule);

// 4) Top tokens (descending by score)
usort($merged, fn($a,$b)=> $b['score'] <=> $a['score']);
$topTokens = array_slice($merged, 0, 20);

// Attach to payload
$rankings = [
    'by_type'   => array_map(fn($k,$v)=>['type'=>$k,'score'=>round($v,2)], array_keys($byType), $byType),
    'by_rule'   => array_map(fn($k,$v)=>['rule'=>$k,'score'=>round($v,2)], array_keys($byRule), $byRule),
    'top_tokens'=> array_map(function($f){
        return [
            'ayah'=>$f['ayah'],
            'token_index'=>$f['token_index'],
            'type'=>$f['type'],
            'rule'=>$f['rule'],
            'suspected'=>$f['suspected'],
            'score'=>round($f['score'],2),
            'time'=>$f['time']
        ];
    }, $topTokens)
];

$byAyah['_rankings'] = $rankings; // keep with ayahs for convenience

// Replace earlier return with enriched structure
return [
    'summary'=>[
        'accuracy'=>$accuracy,
        'words_total'=>$total,
        'correct'=>$correct,
        'substitutions'=>$subs,
        'omissions'=>$dels
    ],
    'ayahs'=>$byAyah,
    'rankings'=>$rankings
];
```

> This adds `feedback.rankings` with:
>
> * `by_type`: total severity per mistake type
> * `by_rule`: total severity per Tajweed rule
> * `top_tokens`: the **20 highest-priority** token-level targets with their scores

---

## 1.2 Optional: Dedicated Rankings Endpoint

```php
// apps/api/app/Http/Controllers/Core/RecitationRankController.php
<?php

namespace App\Http\Controllers\Core;

use App\Http\Controllers\Controller;
use App\Models\Recitation;

/**
 * Returns only the rankings slice for a recitation.
 */
class RecitationRankController extends Controller
{
    /** GET /recitation/{recitation}/rankings */
    public function show(Recitation $recitation) {
        $fb = $recitation->feedback_json ?? [];
        return response()->json($fb['rankings'] ?? $fb['ayahs']['_rankings'] ?? ['by_type'=>[], 'by_rule'=>[], 'top_tokens'=>[]]);
    }
}
```

**Route:**

```php
// apps/api/routes/api.php
use App\Http\Controllers\Core\RecitationRankController;
Route::get('/recitation/{recitation}/rankings', [RecitationRankController::class,'show'])->middleware('auth:sanctum');
```

---

# 2) Frontend: Show Rankings + Auto-Pick Top N

Enhance Teacher Review UI to **display rankings** and **auto-pick** the highest-priority mistakes into the **Create Hotspots** flow.

```tsx
// apps/web/src/app/teacher/reviews/[id]/page.tsx  (additions in the same file)
function RankPanel({ rankings, onAutoPick }: { rankings:any, onAutoPick:(tops:any[])=>void }) {
  if (!rankings) return null;
  const tops = rankings.top_tokens || [];
  return (
    <div className="rounded-2xl p-4 bg-white shadow mb-6">
      <div className="flex items-center justify-between mb-3">
        <h3 className="font-semibold">Auto-Ranked Mistakes</h3>
        <button className="px-3 py-1 border rounded" onClick={()=>onAutoPick(tops.slice(0,5))}>
          Auto-pick Top 5
        </button>
      </div>

      <div className="grid md:grid-cols-3 gap-4">
        <div>
          <div className="text-sm font-medium mb-1">By Type</div>
          <ul className="text-sm space-y-1">
            {(rankings.by_type || []).map((x:any, i:number)=>(
              <li key={i} className="flex justify-between"><span className="capitalize">{x.type.replace('_',' ')}</span><span>{x.score}</span></li>
            ))}
          </ul>
        </div>
        <div>
          <div className="text-sm font-medium mb-1">By Rule</div>
          <ul className="text-sm space-y-1">
            {(rankings.by_rule || []).map((x:any, i:number)=>(
              <li key={i} className="flex justify-between"><span className="capitalize">{(x.rule||'—').replaceAll('_',' ')}</span><span>{x.score}</span></li>
            ))}
          </ul>
        </div>
        <div>
          <div className="text-sm font-medium mb-1">Top Tokens</div>
          <ol className="text-sm list-decimal ml-5 space-y-1">
            {tops.map((t:any, i:number)=>(
              <li key={i}>
                Ayah {t.ayah} • token #{t.token_index} • {t.type}{t.rule?` (${t.rule})`:''} • score {t.score}
              </li>
            ))}
          </ol>
        </div>
      </div>
    </div>
  );
}
```

Integrate `RankPanel` in the page:

```tsx
// inside the main component after data load:
const rankings = data.feedback?.rankings || data.feedback?.ayahs?._rankings;

function onAutoPickTop(tokens:any[]) {
  // Map top tokens into picks for hotspot generation
  const add = tokens.map((t:any)=> ({
    ayah: t.ayah,
    token_index: t.token_index,
    title: `Practice ${t.type}${t.rule?` (${t.rule})`:''}`,
    tooltip: `Auto-targeted (score ${t.score})`
  }));
  setPicks(prev => [...prev, ...add]);
}

// render panel above ayah tokens
<RankPanel rankings={rankings} onAutoPick={onAutoPickTop} />
```

> Click **“Auto-pick Top 5”** → your `picks[]` fills automatically, then **Create Hotspots** to generate a personalized practice page.

---

# 3) Bonus: Student View — “Focus Areas” Card

Show learners what to practice first (sorted by severity).

```tsx
// apps/web/src/components/FocusAreas.tsx
"use client";
import React from "react";

/** Displays Top N auto-ranked tokens with quick-play buttons. */
export default function FocusAreas({ rankings, onPlay }: { rankings:any, onPlay:(ayah:string, token:number)=>void }) {
  const tops = rankings?.top_tokens || [];
  if (!tops.length) return null;
  return (
    <div className="rounded-2xl p-4 bg-white shadow">
      <div className="font-semibold mb-2">Focus Areas (Auto-ranked)</div>
      <ul className="text-sm space-y-2">
        {tops.slice(0,5).map((t:any, i:number)=>(
          <li key={i} className="flex items-center justify-between">
            <div>
              <div>Ayah {t.ayah} • token #{t.token_index}</div>
              <div className="text-gray-600">{t.type}{t.rule?` • ${t.rule}`:''} • score {t.score}</div>
            </div>
            <button className="px-2 py-1 border rounded" onClick={()=>onPlay(t.ayah, t.token_index)}>Play</button>
          </li>
        ))}
      </ul>
    </div>
  );
}
```

Hook into your **Recitation Results** page; implement `onPlay` to jump your `<audio>` to that token’s time slice (use the `letters` timing or the `time` on `top_tokens` if present).

---

# 4) Practical Notes & Tuning

* **Weights are transparent** and easy to tune:

  * `del` (5.0) > `sub` (3.5) > `madd shortfall` (3.0-5.0 scaled) > `noon/meem` (2.5) > `weak qalqalah` (2.0)
* **Top tokens** blend both **alignment** and **tajweed-rule** insights, so the first 3–5 picks are highly actionable.
* You can **cap per-ayah** so that tops don’t cluster; e.g., keep max 2 items per ayah in `$topTokens`.
* For **long uploads**, consider **per-ayah jobs** to reduce ASR latency and provide progressive results.


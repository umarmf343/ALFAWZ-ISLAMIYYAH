/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/admin/analytics": {
    /**
     * Dashboard
     * @description Handled by AdminAnalyticsController::dashboard. Requires ability `admin`.
     */
    get: operations["getAdminAnalytics"];
  };
  "/admin/assets": {
    /**
     * List resources
     * @description Handled by AdminAssetController::index. Requires ability `admin`.
     */
    get: operations["getAdminAssets"];
  };
  "/admin/assets/sign": {
    /**
     * Sign Upload
     * @description Handled by AdminAssetController::signUpload. Requires ability `admin`.
     */
    post: operations["postAdminAssetsSign"];
  };
  "/admin/assignments": {
    /**
     * List resources
     * @description Handled by AdminAssignmentController::index. Requires ability `admin`.
     */
    get: operations["getAdminAssignments"];
  };
  "/admin/audits": {
    /**
     * List resources
     * @description Handled by AdminAuditController::index. Requires ability `admin`.
     */
    get: operations["getAdminAudits"];
  };
  "/admin/classes": {
    /**
     * List resources
     * @description Handled by AdminClassController::index. Requires ability `admin`.
     */
    get: operations["getAdminClasses"];
    /**
     * Create resource
     * @description Handled by AdminClassController::store. Requires ability `admin`.
     */
    post: operations["postAdminClasses"];
  };
  "/admin/classes/{id}/assign-teacher": {
    /**
     * Assign Teacher
     * @description Handled by AdminClassController::assignTeacher. Requires ability `admin`.
     */
    post: operations["postAdminClassesIdAssignTeacher"];
  };
  "/admin/flags": {
    /**
     * List resources
     * @description Handled by AdminFlagsController::index. Requires ability `admin`.
     */
    get: operations["getAdminFlags"];
  };
  "/admin/flags/{key}": {
    /**
     * Toggle
     * @description Handled by AdminFlagsController::toggle. Requires ability `admin`.
     */
    post: operations["postAdminFlagsKey"];
  };
  "/admin/invoices": {
    /**
     * Invoices
     * @description Handled by AdminBillingController::invoices. Requires ability `admin`.
     */
    get: operations["getAdminInvoices"];
  };
  "/admin/invoices/bulk-refund": {
    /**
     * Bulk Refund
     * @description Handled by AdminBillingController::bulkRefund. Requires ability `admin`.
     */
    post: operations["postAdminInvoicesBulkRefund"];
  };
  "/admin/invoices/{id}/refund": {
    /**
     * Refund
     * @description Handled by AdminBillingController::refund. Requires ability `admin`.
     */
    post: operations["postAdminInvoicesIdRefund"];
  };
  "/admin/leaderboards/regenerate": {
    /**
     * Regenerate
     * @description Handled by AdminLeaderboardController::regenerate. Requires ability `admin`.
     */
    post: operations["postAdminLeaderboardsRegenerate"];
  };
  "/admin/leaderboards/snapshots": {
    /**
     * Snapshots
     * @description Handled by AdminLeaderboardController::snapshots. Requires ability `admin`.
     */
    get: operations["getAdminLeaderboardsSnapshots"];
  };
  "/admin/org": {
    /**
     * Get resource
     * @description Handled by AdminOrgController::show. Requires ability `admin`.
     */
    get: operations["getAdminOrg"];
    /**
     * Update resource
     * @description Handled by AdminOrgController::update. Requires ability `admin`.
     */
    patch: operations["patchAdminOrg"];
  };
  "/admin/org/summary": {
    /**
     * Summary
     * @description Handled by AdminOrgController::summary. Requires ability `admin`.
     */
    get: operations["getAdminOrgSummary"];
  };
  "/admin/overview": {
    /**
     * Metrics
     * @description Handled by AdminOverviewController::metrics. Requires ability `admin`.
     */
    get: operations["getAdminOverview"];
  };
  "/admin/plans": {
    /**
     * Plans
     * @description Handled by AdminBillingController::plans. Requires ability `admin`.
     */
    get: operations["getAdminPlans"];
    /**
     * Upsert Plan
     * @description Handled by AdminBillingController::upsertPlan. Requires ability `admin`.
     */
    post: operations["postAdminPlans"];
  };
  "/admin/settings": {
    /**
     * All
     * @description Handled by AdminSettingsController::all. Requires ability `admin`.
     */
    get: operations["getAdminSettings"];
    /**
     * Upsert
     * @description Handled by AdminSettingsController::upsert. Requires ability `admin`.
     */
    post: operations["postAdminSettings"];
  };
  "/admin/submissions": {
    /**
     * List resources
     * @description Handled by AdminSubmissionController::index. Requires ability `admin`.
     */
    get: operations["getAdminSubmissions"];
  };
  "/admin/submissions/bulk-update": {
    /**
     * Bulk Update
     * @description Handled by AdminSubmissionController::bulkUpdate. Requires ability `admin`.
     */
    post: operations["postAdminSubmissionsBulkUpdate"];
  };
  "/admin/tools/queue/ping": {
    /**
     * Queue Ping
     * @description Handled by AdminToolsController::queuePing. Requires ability `admin`.
     */
    get: operations["getAdminToolsQueuePing"];
  };
  "/admin/tools/s3/health": {
    /**
     * S3 Health
     * @description Handled by AdminToolsController::s3Health. Requires ability `admin`.
     */
    get: operations["getAdminToolsS3Health"];
  };
  "/admin/tools/s3/sign": {
    /**
     * Sign S3 Upload
     * @description Handled by AdminToolsController::signS3Upload. Requires ability `admin`.
     */
    post: operations["postAdminToolsS3Sign"];
  };
  "/admin/tools/test-webhook": {
    /**
     * Test Paystack Webhook
     * @description Handled by AdminToolsController::testPaystackWebhook. Requires ability `admin`.
     */
    post: operations["postAdminToolsTestWebhook"];
  };
  "/admin/tools/verify": {
    /**
     * Verify Paystack Ref
     * @description Handled by AdminToolsController::verifyPaystackRef. Requires ability `admin`.
     */
    post: operations["postAdminToolsVerify"];
  };
  "/admin/users": {
    /**
     * List resources
     * @description Handled by AdminUserController::index. Requires ability `admin`.
     */
    get: operations["getAdminUsers"];
  };
  "/admin/users/bulk-role": {
    /**
     * Bulk Role
     * @description Handled by AdminUserController::bulkRole. Requires ability `admin`.
     */
    post: operations["postAdminUsersBulkRole"];
  };
  "/admin/users/{id}/impersonate": {
    /**
     * Impersonate
     * @description Handled by AdminUserController::impersonate. Requires ability `admin`.
     */
    post: operations["postAdminUsersIdImpersonate"];
  };
  "/admin/users/{id}/role": {
    /**
     * Update Role
     * @description Handled by AdminUserController::updateRole. Requires ability `admin`.
     */
    put: operations["putAdminUsersIdRole"];
    /**
     * Update Role
     * @description Handled by AdminUserController::updateRole. Requires ability `admin`.
     */
    post: operations["postAdminUsersIdRole"];
  };
  "/admin/users/{id}/status": {
    /**
     * Update Status
     * @description Handled by AdminUserController::updateStatus. Requires ability `admin`.
     */
    put: operations["putAdminUsersIdStatus"];
  };
  "/admin/users/{id}/suspend": {
    /**
     * Update Status
     * @description Handled by AdminUserController::updateStatus. Requires ability `admin`.
     */
    put: operations["putAdminUsersIdSuspend"];
  };
  "/admin/whisper/jobs": {
    /**
     * List resources
     * @description Handled by AdminWhisperController::index. Requires ability `admin`.
     */
    get: operations["getAdminWhisperJobs"];
  };
  "/admin/whisper/jobs/{id}": {
    /**
     * Get resource
     * @description Handled by AdminWhisperController::show. Requires ability `admin`.
     */
    get: operations["getAdminWhisperJobsId"];
  };
  "/ai-feedback/capabilities": {
    /**
     * Get Capabilities
     * @description Handled by AIFeedbackController::getCapabilities.
     */
    get: operations["getAiFeedbackCapabilities"];
  };
  "/assignments": {
    /**
     * List resources
     * @description Handled by AssignmentController::index.
     */
    get: operations["getAssignments"];
    /**
     * Create resource
     * @description Handled by AssignmentController::store.
     */
    post: operations["postAssignments"];
  };
  "/assignments/{assignment}": {
    /**
     * Get resource
     * @description Handled by AssignmentController::show.
     */
    get: operations["getAssignmentsAssignment"];
    /**
     * Update resource
     * @description Handled by AssignmentController::update.
     */
    put: operations["putAssignmentsAssignment"];
    /**
     * Delete resource
     * @description Handled by AssignmentController::destroy.
     */
    delete: operations["deleteAssignmentsAssignment"];
    /**
     * Update resource
     * @description Handled by AssignmentController::update.
     */
    patch: operations["patchAssignmentsAssignment"];
  };
  "/assignments/{assignment}/duplicate": {
    /**
     * Duplicate
     * @description Handled by AssignmentController::duplicate.
     */
    post: operations["postAssignmentsAssignmentDuplicate"];
  };
  "/assignments/{assignment}/hotspots": {
    /**
     * List resources
     * @description Handled by HotspotController::index.
     */
    get: operations["getAssignmentsAssignmentHotspots"];
    /**
     * Create resource
     * @description Handled by HotspotController::store.
     */
    post: operations["postAssignmentsAssignmentHotspots"];
  };
  "/assignments/{assignment}/publish": {
    /**
     * Publish
     * @description Handled by AssignmentController::publish.
     */
    post: operations["postAssignmentsAssignmentPublish"];
  };
  "/assignments/{assignment}/stats": {
    /**
     * Get Stats
     * @description Handled by AssignmentController::getStats.
     */
    get: operations["getAssignmentsAssignmentStats"];
  };
  "/assignments/{assignment}/submissions": {
    /**
     * Get Submissions
     * @description Handled by AssignmentController::getSubmissions.
     */
    get: operations["getAssignmentsAssignmentSubmissions"];
  };
  "/assignments/{assignment}/unpublish": {
    /**
     * Unpublish
     * @description Handled by AssignmentController::unpublish.
     */
    post: operations["postAssignmentsAssignmentUnpublish"];
  };
  "/auth/email/resend": {
    /**
     * Resend Verification Email
     * @description Handled by AuthController::resendVerificationEmail.
     */
    post: operations["postAuthEmailResend"];
  };
  "/auth/email/verification-status": {
    /**
     * Check Email Verification
     * @description Handled by AuthController::checkEmailVerification.
     */
    get: operations["getAuthEmailVerificationStatus"];
  };
  "/auth/email/verify": {
    /**
     * Verify Email
     * @description Handled by AuthController::verifyEmail.
     */
    post: operations["postAuthEmailVerify"];
  };
  "/auth/forgot-password": {
    /**
     * Forgot Password
     * @description Handled by AuthController::forgotPassword.
     */
    post: operations["postAuthForgotPassword"];
  };
  "/auth/login": {
    /**
     * Login
     * @description Handled by AuthController::login.
     */
    post: operations["postAuthLogin"];
  };
  "/auth/logout": {
    /**
     * Logout
     * @description Handled by AuthController::logout.
     */
    post: operations["postAuthLogout"];
  };
  "/auth/me": {
    /**
     * App\ Http\ Controllers\ Auth\ Me Controller
     * @description Handled by App\Http\Controllers\Auth\MeController.
     */
    get: operations["getAuthMe"];
  };
  "/auth/refresh": {
    /**
     * Refresh
     * @description Handled by AuthController::refresh.
     */
    post: operations["postAuthRefresh"];
  };
  "/auth/register": {
    /**
     * Register
     * @description Handled by AuthController::register.
     */
    post: operations["postAuthRegister"];
  };
  "/auth/reset-password": {
    /**
     * Reset Password
     * @description Handled by AuthController::resetPassword.
     */
    post: operations["postAuthResetPassword"];
  };
  "/auth/user": {
    /**
     * User
     * @description Handled by AuthController::user.
     */
    get: operations["getAuthUser"];
  };
  "/broadcasting/auth": {
    /**
     * Closure
     * @description Handled by inline closure.
     */
    post: operations["postBroadcastingAuth"];
  };
  "/classes": {
    /**
     * List resources
     * @description Handled by ClassController::index.
     */
    get: operations["getClasses"];
    /**
     * Create resource
     * @description Handled by ClassController::store.
     */
    post: operations["postClasses"];
  };
  "/classes/{class}": {
    /**
     * Get resource
     * @description Handled by ClassController::show.
     */
    get: operations["getClassesClass"];
    /**
     * Update resource
     * @description Handled by ClassController::update.
     */
    put: operations["putClassesClass"];
    /**
     * Delete resource
     * @description Handled by ClassController::destroy.
     */
    delete: operations["deleteClassesClass"];
    /**
     * Update resource
     * @description Handled by ClassController::update.
     */
    patch: operations["patchClassesClass"];
  };
  "/classes/{class}/invite": {
    /**
     * Invite Student
     * @description Handled by ClassController::inviteStudent.
     */
    post: operations["postClassesClassInvite"];
  };
  "/classes/{class}/members": {
    /**
     * Get Members
     * @description Handled by ClassController::getMembers.
     */
    get: operations["getClassesClassMembers"];
    /**
     * Add Member
     * @description Handled by ClassController::addMember.
     */
    post: operations["postClassesClassMembers"];
  };
  "/classes/{class}/members/{user}": {
    /**
     * Remove Member
     * @description Handled by ClassController::removeMember.
     */
    delete: operations["deleteClassesClassMembersUser"];
  };
  "/classes/{class}/stats": {
    /**
     * Get Stats
     * @description Handled by ClassController::getStats.
     */
    get: operations["getClassesClassStats"];
  };
  "/feedback": {
    /**
     * Student Feedback
     * @description Handled by FeedbackController::studentFeedback.
     */
    get: operations["getFeedback"];
  };
  "/feedback/submissions/{submission}": {
    /**
     * Create resource
     * @description Handled by FeedbackController::store.
     */
    post: operations["postFeedbackSubmissionsSubmission"];
  };
  "/feedback/{feedback}": {
    /**
     * Update resource
     * @description Handled by FeedbackController::update.
     */
    put: operations["putFeedbackFeedback"];
    /**
     * Delete resource
     * @description Handled by FeedbackController::destroy.
     */
    delete: operations["deleteFeedbackFeedback"];
  };
  "/feedback/{feedback}/audio": {
    /**
     * Upload Audio
     * @description Handled by FeedbackController::uploadAudio.
     */
    post: operations["postFeedbackFeedbackAudio"];
  };
  "/hasanat/achievements": {
    /**
     * Get Achievements
     * @description Handled by HasanatController::getAchievements.
     */
    get: operations["getHasanatAchievements"];
  };
  "/hasanat/award": {
    /**
     * Award Hasanat
     * @description Handled by HasanatController::awardHasanat.
     */
    post: operations["postHasanatAward"];
  };
  "/hasanat/capabilities": {
    /**
     * Get Capabilities
     * @description Handled by HasanatController::getCapabilities.
     */
    get: operations["getHasanatCapabilities"];
  };
  "/hasanat/history": {
    /**
     * Get History
     * @description Handled by HasanatController::getHistory.
     */
    get: operations["getHasanatHistory"];
  };
  "/hasanat/leaderboard": {
    /**
     * Get Leaderboard
     * @description Handled by HasanatController::getLeaderboard.
     */
    get: operations["getHasanatLeaderboard"];
  };
  "/hasanat/progress": {
    /**
     * Get Progress
     * @description Handled by HasanatController::getProgress.
     */
    get: operations["getHasanatProgress"];
  };
  "/hasanat/redeem": {
    /**
     * Redeem Reward
     * @description Handled by HasanatController::redeemReward.
     */
    post: operations["postHasanatRedeem"];
  };
  "/hasanat/rewards": {
    /**
     * Get Rewards
     * @description Handled by HasanatController::getRewards.
     */
    get: operations["getHasanatRewards"];
  };
  "/health": {
    /**
     * Closure
     * @description Handled by inline closure.
     */
    get: operations["getHealth"];
  };
  "/hotspots/{hotspot}": {
    /**
     * Get resource
     * @description Handled by HotspotController::show.
     */
    get: operations["getHotspotsHotspot"];
    /**
     * Update resource
     * @description Handled by HotspotController::update.
     */
    put: operations["putHotspotsHotspot"];
    /**
     * Delete resource
     * @description Handled by HotspotController::destroy.
     */
    delete: operations["deleteHotspotsHotspot"];
    /**
     * Update resource
     * @description Handled by HotspotController::update.
     */
    patch: operations["patchHotspotsHotspot"];
  };
  "/hotspots/{hotspot}/interact": {
    /**
     * Record Interaction
     * @description Handled by HotspotController::recordInteraction.
     */
    post: operations["postHotspotsHotspotInteract"];
  };
  "/hotspots/{hotspot}/interactions": {
    /**
     * Get Interactions
     * @description Handled by HotspotController::getInteractions.
     */
    get: operations["getHotspotsHotspotInteractions"];
  };
  "/hotspots/{hotspot}/stats": {
    /**
     * Get Stats
     * @description Handled by HotspotController::getStats.
     */
    get: operations["getHotspotsHotspotStats"];
  };
  "/leaderboard": {
    /**
     * List resources
     * @description Handled by LeaderboardController::index.
     */
    get: operations["getLeaderboard"];
  };
  "/leaderboard/class/{class}": {
    /**
     * Class Leaderboard
     * @description Handled by LeaderboardController::classLeaderboard.
     */
    get: operations["getLeaderboardClassClass"];
  };
  "/leaderboard/global": {
    /**
     * Global Leaderboard
     * @description Handled by LeaderboardController::globalLeaderboard.
     */
    get: operations["getLeaderboardGlobal"];
  };
  "/leaderboard/hasanat-history": {
    /**
     * Hasanat History
     * @description Handled by LeaderboardController::hasanatHistory.
     */
    get: operations["getLeaderboardHasanatHistory"];
  };
  "/leaderboard/monthly": {
    /**
     * Monthly Leaderboard
     * @description Handled by LeaderboardController::monthlyLeaderboard.
     */
    get: operations["getLeaderboardMonthly"];
  };
  "/leaderboard/weekly": {
    /**
     * Weekly Leaderboard
     * @description Handled by LeaderboardController::weeklyLeaderboard.
     */
    get: operations["getLeaderboardWeekly"];
  };
  "/me": {
    /**
     * Me
     * @description Handled by ProfileController::me.
     */
    get: operations["getMe"];
  };
  "/media/signed-get": {
    /**
     * Signed Get
     * @description Handled by MediaController::signedGet.
     */
    get: operations["getMediaSignedGet"];
  };
  "/media/signed-put": {
    /**
     * Signed Put
     * @description Handled by MediaController::signedPut.
     */
    get: operations["getMediaSignedPut"];
  };
  "/memorization/due-reviews": {
    /**
     * Get Due Reviews
     * @description Handled by MemorizationController::getDueReviews.
     */
    get: operations["getMemorizationDueReviews"];
  };
  "/memorization/plans": {
    /**
     * List resources
     * @description Handled by MemorizationController::index.
     */
    get: operations["getMemorizationPlans"];
    /**
     * Create resource
     * @description Handled by MemorizationController::store.
     */
    post: operations["postMemorizationPlans"];
  };
  "/memorization/plans/{plan}/stats": {
    /**
     * Plan Stats
     * @description Handled by MemorizationController::planStats.
     */
    get: operations["getMemorizationPlansPlanStats"];
  };
  "/memorization/review": {
    /**
     * Review Ayah
     * @description Handled by MemorizationController::reviewAyah.
     */
    post: operations["postMemorizationReview"];
  };
  "/notifications": {
    /**
     * List resources
     * @description Handled by NotificationController::index.
     */
    get: operations["getNotifications"];
  };
  "/notifications/mark-all-read": {
    /**
     * Mark All As Read
     * @description Handled by NotificationController::markAllAsRead.
     */
    post: operations["postNotificationsMarkAllRead"];
  };
  "/notifications/mark-read": {
    /**
     * Mark As Read
     * @description Handled by NotificationController::markAsRead.
     */
    post: operations["postNotificationsMarkRead"];
  };
  "/notifications/preferences": {
    /**
     * Get Preferences
     * @description Handled by NotificationController::getPreferences.
     */
    get: operations["getNotificationsPreferences"];
    /**
     * Update Preferences
     * @description Handled by NotificationController::updatePreferences.
     */
    post: operations["postNotificationsPreferences"];
  };
  "/notifications/read/all": {
    /**
     * Delete All Read
     * @description Handled by NotificationController::deleteAllRead.
     */
    delete: operations["deleteNotificationsReadAll"];
  };
  "/notifications/unread-count": {
    /**
     * Unread Count
     * @description Handled by NotificationController::unreadCount.
     */
    get: operations["getNotificationsUnreadCount"];
  };
  "/notifications/{notification}": {
    /**
     * Get resource
     * @description Handled by NotificationController::show.
     */
    get: operations["getNotificationsNotification"];
    /**
     * Delete resource
     * @description Handled by NotificationController::destroy.
     */
    delete: operations["deleteNotificationsNotification"];
  };
  "/payments/cancel-subscription": {
    /**
     * Cancel Subscription
     * @description Handled by PaymentController::cancelSubscription.
     */
    post: operations["postPaymentsCancelSubscription"];
  };
  "/payments/history": {
    /**
     * History
     * @description Handled by PaymentController::history.
     */
    get: operations["getPaymentsHistory"];
  };
  "/payments/initialize": {
    /**
     * Initialize
     * @description Handled by PaymentController::initialize.
     */
    post: operations["postPaymentsInitialize"];
  };
  "/payments/plans": {
    /**
     * Plans
     * @description Handled by PaymentController::plans.
     */
    get: operations["getPaymentsPlans"];
  };
  "/payments/subscription": {
    /**
     * Subscription
     * @description Handled by PaymentController::subscription.
     */
    get: operations["getPaymentsSubscription"];
  };
  "/profile/avatar": {
    /**
     * Upload Avatar
     * @description Handled by ProfileController::uploadAvatar.
     */
    post: operations["postProfileAvatar"];
    /**
     * Remove Avatar
     * @description Handled by ProfileController::removeAvatar.
     */
    delete: operations["deleteProfileAvatar"];
  };
  "/profile/me": {
    /**
     * Me
     * @description Handled by ProfileController::me.
     */
    get: operations["getProfileMe"];
    /**
     * Update resource
     * @description Handled by ProfileController::update.
     */
    put: operations["putProfileMe"];
  };
  "/profile/my-students": {
    /**
     * My Students
     * @description Handled by ProfileController::myStudents.
     */
    get: operations["getProfileMyStudents"];
  };
  "/profile/my-teachers": {
    /**
     * My Teachers
     * @description Handled by ProfileController::myTeachers.
     */
    get: operations["getProfileMyTeachers"];
  };
  "/profile/stats": {
    /**
     * Stats
     * @description Handled by ProfileController::stats.
     */
    get: operations["getProfileStats"];
  };
  "/quran/recitations": {
    /**
     * Recitations
     * @description Handled by SurahController::recitations.
     */
    get: operations["getQuranRecitations"];
  };
  "/quran/surahs": {
    /**
     * List resources
     * @description Handled by SurahController::index.
     */
    get: operations["getQuranSurahs"];
  };
  "/quran/surahs/{id}": {
    /**
     * Get resource
     * @description Handled by SurahController::show.
     */
    get: operations["getQuranSurahsId"];
  };
  "/quran/surahs/{id}/ayahs": {
    /**
     * Ayahs
     * @description Handled by SurahController::ayahs.
     */
    get: operations["getQuranSurahsIdAyahs"];
  };
  "/quran/surahs/{surahId}/ayahs/{ayahId}": {
    /**
     * Get Ayah
     * @description Handled by SurahController::getAyah.
     */
    get: operations["getQuranSurahsSurahIdAyahsAyahId"];
  };
  "/reader/reciters": {
    /**
     * Get Reciters
     * @description Handled by ReaderController::getReciters.
     */
    get: operations["getReaderReciters"];
  };
  "/reader/state": {
    /**
     * Get State
     * @description Handled by ReaderController::getState.
     */
    get: operations["getReaderState"];
    /**
     * Save State
     * @description Handled by ReaderController::saveState.
     */
    post: operations["postReaderState"];
  };
  "/recitations/status/{id}": {
    /**
     * Status
     * @description Handled by RecitationController::status.
     */
    get: operations["getRecitationsStatusId"];
  };
  "/recitations/submit": {
    /**
     * Submit
     * @description Handled by RecitationController::submit.
     */
    post: operations["postRecitationsSubmit"];
  };
  "/recitations/upload-url": {
    /**
     * Upload Url
     * @description Handled by RecitationController::uploadUrl.
     */
    post: operations["postRecitationsUploadUrl"];
  };
  "/resources": {
    /**
     * List resources
     * @description Handled by ResourceController::index.
     */
    get: operations["getResources"];
    /**
     * Create resource
     * @description Handled by ResourceController::store.
     */
    post: operations["postResources"];
  };
  "/resources/{id}/download": {
    /**
     * Download
     * @description Handled by ResourceController::download.
     */
    get: operations["getResourcesIdDownload"];
  };
  "/resources/{resource}": {
    /**
     * Get resource
     * @description Handled by ResourceController::show.
     */
    get: operations["getResourcesResource"];
    /**
     * Update resource
     * @description Handled by ResourceController::update.
     */
    put: operations["putResourcesResource"];
    /**
     * Delete resource
     * @description Handled by ResourceController::destroy.
     */
    delete: operations["deleteResourcesResource"];
    /**
     * Update resource
     * @description Handled by ResourceController::update.
     */
    patch: operations["patchResourcesResource"];
  };
  "/resources/{resource}/download": {
    /**
     * Download
     * @description Handled by ResourceController::download.
     */
    get: operations["getResourcesResourceDownload"];
  };
  "/srs/add": {
    /**
     * Add To Queue
     * @description Handled by SrsController::addToQueue.
     */
    post: operations["postSrsAdd"];
  };
  "/srs/due": {
    /**
     * Get Due Items
     * @description Handled by SrsController::getDueItems.
     */
    get: operations["getSrsDue"];
  };
  "/srs/queue": {
    /**
     * Get Queue
     * @description Handled by SrsController::getQueue.
     */
    get: operations["getSrsQueue"];
  };
  "/srs/review": {
    /**
     * Submit Review
     * @description Handled by SrsController::submitReview.
     */
    post: operations["postSrsReview"];
  };
  "/srs/stats": {
    /**
     * Get Stats
     * @description Handled by SrsController::getStats.
     */
    get: operations["getSrsStats"];
  };
  "/srs/{id}": {
    /**
     * Remove From Queue
     * @description Handled by SrsController::removeFromQueue.
     */
    delete: operations["deleteSrsId"];
  };
  "/srs/{id}/reset": {
    /**
     * Reset Item
     * @description Handled by SrsController::resetItem.
     */
    post: operations["postSrsIdReset"];
  };
  "/student/admin/memorization-analytics": {
    /**
     * Get Memorization Analytics
     * @description Handled by MemorizationController::getMemorizationAnalytics.
     */
    get: operations["getStudentAdminMemorizationAnalytics"];
  };
  "/student/assignments": {
    /**
     * Student Assignments
     * @description Handled by AssignmentController::studentAssignments.
     */
    get: operations["getStudentAssignments"];
  };
  "/student/ayah-of-day": {
    /**
     * Ayah Of Day
     * @description Handled by ProfileController::ayahOfDay.
     */
    get: operations["getStudentAyahOfDay"];
  };
  "/student/classes": {
    /**
     * Student Classes
     * @description Handled by ClassController::studentClasses.
     */
    get: operations["getStudentClasses"];
  };
  "/student/dashboard": {
    /**
     * Get Dashboard
     * @description Handled by StudentController::getDashboard.
     */
    get: operations["getStudentDashboard"];
  };
  "/student/leaderboard": {
    /**
     * Student Leaderboard
     * @description Handled by LeaderboardController::studentLeaderboard.
     */
    get: operations["getStudentLeaderboard"];
  };
  "/student/leaderboard/friends": {
    /**
     * Get Leaderboard Friends
     * @description Handled by StudentController::getLeaderboardFriends.
     */
    get: operations["getStudentLeaderboardFriends"];
  };
  "/student/leaderboard/invite": {
    /**
     * Send Leaderboard Invite
     * @description Handled by StudentController::sendLeaderboardInvite.
     */
    post: operations["postStudentLeaderboardInvite"];
  };
  "/student/leaderboard/invites": {
    /**
     * Get Leaderboard Invites
     * @description Handled by StudentController::getLeaderboardInvites.
     */
    get: operations["getStudentLeaderboardInvites"];
  };
  "/student/leaderboard/invites/{invite}/respond": {
    /**
     * Respond To Leaderboard Invite
     * @description Handled by StudentController::respondToLeaderboardInvite.
     */
    post: operations["postStudentLeaderboardInvitesInviteRespond"];
  };
  "/student/leaderboard/preferences": {
    /**
     * Update Leaderboard Preferences
     * @description Handled by StudentController::updateLeaderboardPreferences.
     */
    put: operations["putStudentLeaderboardPreferences"];
  };
  "/student/leaderboard/reminder": {
    /**
     * Send Quran Reminder
     * @description Handled by StudentController::sendQuranReminder.
     */
    post: operations["postStudentLeaderboardReminder"];
  };
  "/student/memorization-plan": {
    /**
     * Get Memorization Plan
     * @description Handled by ProfileController::getMemorizationPlan.
     */
    get: operations["getStudentMemorizationPlan"];
    /**
     * Update Memorization Plan
     * @description Handled by ProfileController::updateMemorizationPlan.
     */
    post: operations["postStudentMemorizationPlan"];
  };
  "/student/memorization/due-reviews": {
    /**
     * Get Due Reviews
     * @description Handled by MemorizationController::getDueReviews.
     */
    get: operations["getStudentMemorizationDueReviews"];
  };
  "/student/memorization/plans": {
    /**
     * List resources
     * @description Handled by MemorizationController::index.
     */
    get: operations["getStudentMemorizationPlans"];
    /**
     * Create resource
     * @description Handled by MemorizationController::store.
     */
    post: operations["postStudentMemorizationPlans"];
  };
  "/student/memorization/plans/{plan}/stats": {
    /**
     * Plan Stats
     * @description Handled by MemorizationController::planStats.
     */
    get: operations["getStudentMemorizationPlansPlanStats"];
  };
  "/student/memorization/review": {
    /**
     * Review Ayah
     * @description Handled by MemorizationController::reviewAyah.
     */
    post: operations["postStudentMemorizationReview"];
  };
  "/student/preferences": {
    /**
     * Get Preferences
     * @description Handled by ProfileController::getPreferences.
     */
    get: operations["getStudentPreferences"];
    /**
     * Update Preferences
     * @description Handled by ProfileController::updatePreferences.
     */
    post: operations["postStudentPreferences"];
  };
  "/student/progress": {
    /**
     * Student Progress
     * @description Handled by ProfileController::studentProgress.
     */
    get: operations["getStudentProgress"];
  };
  "/student/reader/bookmarks": {
    /**
     * Get Bookmarks
     * @description Handled by ProfileController::getBookmarks.
     */
    get: operations["getStudentReaderBookmarks"];
    /**
     * Add Bookmark
     * @description Handled by ProfileController::addBookmark.
     */
    post: operations["postStudentReaderBookmarks"];
  };
  "/student/reader/bookmarks/{id}": {
    /**
     * Remove Bookmark
     * @description Handled by ProfileController::removeBookmark.
     */
    delete: operations["deleteStudentReaderBookmarksId"];
  };
  "/student/reader/mark-read": {
    /**
     * Mark Ayah Read
     * @description Handled by ProfileController::markAyahRead.
     */
    post: operations["postStudentReaderMarkRead"];
  };
  "/student/reader/state": {
    /**
     * Get Reader State
     * @description Handled by ProfileController::getReaderState.
     */
    get: operations["getStudentReaderState"];
    /**
     * Save Reader State
     * @description Handled by ProfileController::saveReaderState.
     */
    post: operations["postStudentReaderState"];
  };
  "/student/recent-reads": {
    /**
     * Recent Reads
     * @description Handled by ProfileController::recentReads.
     */
    get: operations["getStudentRecentReads"];
  };
  "/student/recitation": {
    /**
     * Update Recitation
     * @description Handled by StudentController::updateRecitation.
     */
    post: operations["postStudentRecitation"];
  };
  "/student/recite": {
    /**
     * Update Recitation
     * @description Handled by StudentController::updateRecitation.
     */
    post: operations["postStudentRecite"];
  };
  "/student/recommendations": {
    /**
     * Get Recommendations
     * @description Handled by StudentController::getRecommendations.
     */
    get: operations["getStudentRecommendations"];
  };
  "/student/srs-queue": {
    /**
     * Get Queue
     * @description Handled by SrsController::getQueue.
     */
    get: operations["getStudentSrsQueue"];
  };
  "/student/srs-review": {
    /**
     * Submit Review
     * @description Handled by SrsController::submitReview.
     */
    post: operations["postStudentSrsReview"];
  };
  "/student/stats": {
    /**
     * Student Stats
     * @description Handled by ProfileController::studentStats.
     */
    get: operations["getStudentStats"];
  };
  "/student/submissions": {
    /**
     * Student Submissions
     * @description Handled by SubmissionController::studentSubmissions.
     */
    get: operations["getStudentSubmissions"];
    /**
     * Create resource
     * @description Handled by SubmissionController::store.
     */
    post: operations["postStudentSubmissions"];
  };
  "/student/teacher/memorization-progress": {
    /**
     * Get Student Progress
     * @description Handled by MemorizationController::getStudentProgress.
     */
    get: operations["getStudentTeacherMemorizationProgress"];
  };
  "/student/teacher/memorization-stats": {
    /**
     * Get Student Stats
     * @description Handled by MemorizationController::getStudentStats.
     */
    get: operations["getStudentTeacherMemorizationStats"];
  };
  "/student/teacher/memorization/analytics": {
    /**
     * Get Memorization Analytics
     * @description Handled by StudentController::getMemorizationAnalytics.
     */
    get: operations["getStudentTeacherMemorizationAnalytics"];
  };
  "/student/teacher/memorization/audio-reviews": {
    /**
     * Get Audio Reviews
     * @description Handled by StudentController::getAudioReviews.
     */
    get: operations["getStudentTeacherMemorizationAudioReviews"];
  };
  "/student/teacher/memorization/reviews/{reviewId}/{action}": {
    /**
     * Review Audio Submission
     * @description Handled by StudentController::reviewAudioSubmission.
     */
    post: operations["postStudentTeacherMemorizationReviewsReviewIdAction"];
  };
  "/student/teacher/memorization/students": {
    /**
     * Get Memorization Students
     * @description Handled by StudentController::getMemorizationStudents.
     */
    get: operations["getStudentTeacherMemorizationStudents"];
  };
  "/student/weekly-progress": {
    /**
     * Get Weekly Progress
     * @description Handled by StudentController::getWeeklyProgress.
     */
    get: operations["getStudentWeeklyProgress"];
  };
  "/submissions": {
    /**
     * List resources
     * @description Handled by SubmissionController::index.
     */
    get: operations["getSubmissions"];
    /**
     * Create resource
     * @description Handled by SubmissionController::store.
     */
    post: operations["postSubmissions"];
  };
  "/submissions/ai-feedback": {
    /**
     * Generate Feedback
     * @description Handled by AIFeedbackController::generateFeedback.
     */
    post: operations["postSubmissionsAiFeedback"];
  };
  "/submissions/{submission}": {
    /**
     * Get resource
     * @description Handled by SubmissionController::show.
     */
    get: operations["getSubmissionsSubmission"];
    /**
     * Update resource
     * @description Handled by SubmissionController::update.
     */
    put: operations["putSubmissionsSubmission"];
    /**
     * Update resource
     * @description Handled by SubmissionController::update.
     */
    patch: operations["patchSubmissionsSubmission"];
  };
  "/submissions/{submission}/ai-feedback": {
    /**
     * Get Feedback History
     * @description Handled by AIFeedbackController::getFeedbackHistory.
     */
    get: operations["getSubmissionsSubmissionAiFeedback"];
  };
  "/submissions/{submission}/ai-feedback/regenerate": {
    /**
     * Regenerate Feedback
     * @description Handled by AIFeedbackController::regenerateFeedback.
     */
    post: operations["postSubmissionsSubmissionAiFeedbackRegenerate"];
  };
  "/submissions/{submission}/audio": {
    /**
     * Upload Audio
     * @description Handled by SubmissionController::uploadAudio.
     */
    post: operations["postSubmissionsSubmissionAudio"];
    /**
     * Delete Audio
     * @description Handled by SubmissionController::deleteAudio.
     */
    delete: operations["deleteSubmissionsSubmissionAudio"];
  };
  "/submissions/{submission}/resubmit": {
    /**
     * Resubmit
     * @description Handled by SubmissionController::resubmit.
     */
    post: operations["postSubmissionsSubmissionResubmit"];
  };
  "/submissions/{submission}/submit": {
    /**
     * Submit For Grading
     * @description Handled by SubmissionController::submitForGrading.
     */
    post: operations["postSubmissionsSubmissionSubmit"];
  };
  "/tajweed/analytics": {
    /**
     * Get Analytics
     * @description Handled by TajweedController::getAnalytics. Requires ability `teacher-or-admin`.
     */
    get: operations["getTajweedAnalytics"];
  };
  "/tajweed/analyze": {
    /**
     * Analyze Recitation
     * @description Handled by TajweedController::analyzeRecitation.
     */
    post: operations["postTajweedAnalyze"];
  };
  "/tajweed/history": {
    /**
     * Get Analysis History
     * @description Handled by TajweedController::getAnalysisHistory.
     */
    get: operations["getTajweedHistory"];
  };
  "/tajweed/reprocess/{jobId}": {
    /**
     * Reprocess Analysis
     * @description Handled by TajweedController::reprocessAnalysis. Requires ability `teacher-or-admin`.
     */
    post: operations["postTajweedReprocessJobId"];
  };
  "/tajweed/settings": {
    /**
     * Get Settings
     * @description Handled by TajweedController::getSettings.
     */
    get: operations["getTajweedSettings"];
    /**
     * Update Settings
     * @description Handled by TajweedController::updateSettings. Requires ability `admin`.
     */
    post: operations["postTajweedSettings"];
  };
  "/tajweed/status/{jobId}": {
    /**
     * Get Analysis Status
     * @description Handled by TajweedController::getAnalysisStatus.
     */
    get: operations["getTajweedStatusJobId"];
  };
  "/teacher/analytics": {
    /**
     * List resources
     * @description Handled by TeacherAnalyticsController::index. Requires role `teacher`.
     */
    get: operations["getTeacherAnalytics"];
  };
  "/teacher/analytics/update": {
    /**
     * Update Analytics
     * @description Handled by TeacherController::updateAnalytics. Requires role `teacher`.
     */
    post: operations["postTeacherAnalyticsUpdate"];
  };
  "/teacher/broadcast": {
    /**
     * Broadcast Message
     * @description Handled by ProfileController::broadcastMessage. Requires role `teacher`.
     */
    post: operations["postTeacherBroadcast"];
  };
  "/teacher/classes": {
    /**
     * Teacher Classes
     * @description Handled by ProfileController::teacherClasses. Requires role `teacher`.
     */
    get: operations["getTeacherClasses"];
  };
  "/teacher/classes-overview": {
    /**
     * Get Classes Overview
     * @description Handled by TeacherController::getClassesOverview. Requires role `teacher`.
     */
    get: operations["getTeacherClassesOverview"];
  };
  "/teacher/dashboard": {
    /**
     * Get Dashboard Data
     * @description Handled by TeacherController::getDashboardData. Requires role `teacher`.
     */
    get: operations["getTeacherDashboard"];
  };
  "/teacher/dashboard/notifications": {
    /**
     * Get Notifications
     * @description Handled by TeacherController::getNotifications. Requires role `teacher`.
     */
    get: operations["getTeacherDashboardNotifications"];
  };
  "/teacher/game-analytics": {
    /**
     * Get Game Analytics
     * @description Handled by TeacherController::getGameAnalytics. Requires role `teacher`.
     */
    get: operations["getTeacherGameAnalytics"];
  };
  "/teacher/notifications": {
    /**
     * Get Notifications
     * @description Handled by TeacherController::getNotifications. Requires role `teacher`.
     */
    get: operations["getTeacherNotifications"];
  };
  "/teacher/notifications/{notificationId}/read": {
    /**
     * Mark Notification As Read
     * @description Handled by TeacherController::markNotificationAsRead. Requires role `teacher`.
     */
    post: operations["postTeacherNotificationsNotificationIdRead"];
  };
  "/teacher/recent-submissions": {
    /**
     * Recent Submissions
     * @description Handled by ProfileController::recentSubmissions. Requires role `teacher`.
     */
    get: operations["getTeacherRecentSubmissions"];
  };
  "/teacher/schedule": {
    /**
     * Today Schedule
     * @description Handled by ProfileController::todaySchedule. Requires role `teacher`.
     */
    get: operations["getTeacherSchedule"];
  };
  "/teacher/stats": {
    /**
     * Teacher Stats
     * @description Handled by ProfileController::teacherStats. Requires role `teacher`.
     */
    get: operations["getTeacherStats"];
  };
  "/teacher/student-progress": {
    /**
     * Get Student Progress
     * @description Handled by TeacherController::getStudentProgress. Requires role `teacher`.
     */
    get: operations["getTeacherStudentProgress"];
  };
  "/teacher/students": {
    /**
     * Teacher Students
     * @description Handled by ProfileController::teacherStudents. Requires role `teacher`.
     */
    get: operations["getTeacherStudents"];
  };
  "/teacher/students-progress": {
    /**
     * Get Students Progress
     * @description Handled by TeacherController::getStudentsProgress. Requires role `teacher`.
     */
    get: operations["getTeacherStudentsProgress"];
  };
  "/teacher/students/move-level": {
    /**
     * Move Students Level
     * @description Handled by ProfileController::moveStudentsLevel. Requires role `teacher`.
     */
    post: operations["postTeacherStudentsMoveLevel"];
  };
  "/teacher/submissions/{submission}/grade": {
    /**
     * Grade Submission
     * @description Handled by TeacherController::gradeSubmission. Requires role `teacher`.
     */
    post: operations["postTeacherSubmissionsSubmissionGrade"];
  };
  "/test-auth": {
    /**
     * Closure
     * @description Handled by inline closure.
     */
    get: operations["getTestAuth"];
  };
  "/upload/audio": {
    /**
     * Upload Audio
     * @description Handled by FileUploadController::uploadAudio.
     */
    post: operations["postUploadAudio"];
  };
  "/upload/file": {
    /**
     * Delete File
     * @description Handled by FileUploadController::deleteFile.
     */
    delete: operations["deleteUploadFile"];
  };
  "/upload/image": {
    /**
     * Upload Image
     * @description Handled by FileUploadController::uploadImage.
     */
    post: operations["postUploadImage"];
  };
  "/uploads/audio": {
    /**
     * Upload Audio
     * @description Handled by SubmissionController::uploadAudio.
     */
    post: operations["postUploadsAudio"];
  };
  "/uploads/file/{file}": {
    /**
     * Delete File
     * @description Handled by AssignmentController::deleteFile.
     */
    delete: operations["deleteUploadsFileFile"];
  };
  "/uploads/image": {
    /**
     * Upload Image
     * @description Handled by AssignmentController::uploadImage.
     */
    post: operations["postUploadsImage"];
  };
  "/webhooks/paystack": {
    /**
     * Paystack Webhook
     * @description Handled by PaymentController::paystackWebhook.
     */
    post: operations["postWebhooksPaystack"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Generic JSON payload accepted by write operations. */
    GenericPayload: {
      [key: string]: unknown;
    };
    /** @description Standard JSON envelope returned by the API. */
    GenericResponse: {
      /** @default true */
      success?: boolean;
      message?: string | null;
      data?: {
        [key: string]: unknown;
      } | null;
      errors?: {
        [key: string]: unknown;
      } | null;
      [key: string]: unknown;
    };
    ErrorResponse: {
      message?: string;
      errors?: {
        [key: string]: unknown;
      } | null;
    };
    ValidationErrors: {
      [key: string]: string[];
    };
  };
  responses: {
    /** @description Authentication required. */
    Unauthenticated: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description The user is not allowed to access this resource. */
    Forbidden: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Validation failed for the supplied payload. */
    ValidationError: {
      content: {
        "application/json": {
          message?: string;
          errors?: components["schemas"]["ValidationErrors"];
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Dashboard
   * @description Handled by AdminAnalyticsController::dashboard. Requires ability `admin`.
   */
  getAdminAnalytics: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * List resources
   * @description Handled by AdminAssetController::index. Requires ability `admin`.
   */
  getAdminAssets: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Sign Upload
   * @description Handled by AdminAssetController::signUpload. Requires ability `admin`.
   */
  postAdminAssetsSign: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * List resources
   * @description Handled by AdminAssignmentController::index. Requires ability `admin`.
   */
  getAdminAssignments: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * List resources
   * @description Handled by AdminAuditController::index. Requires ability `admin`.
   */
  getAdminAudits: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * List resources
   * @description Handled by AdminClassController::index. Requires ability `admin`.
   */
  getAdminClasses: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Create resource
   * @description Handled by AdminClassController::store. Requires ability `admin`.
   */
  postAdminClasses: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Assign Teacher
   * @description Handled by AdminClassController::assignTeacher. Requires ability `admin`.
   */
  postAdminClassesIdAssignTeacher: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * List resources
   * @description Handled by AdminFlagsController::index. Requires ability `admin`.
   */
  getAdminFlags: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Toggle
   * @description Handled by AdminFlagsController::toggle. Requires ability `admin`.
   */
  postAdminFlagsKey: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Invoices
   * @description Handled by AdminBillingController::invoices. Requires ability `admin`.
   */
  getAdminInvoices: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Bulk Refund
   * @description Handled by AdminBillingController::bulkRefund. Requires ability `admin`.
   */
  postAdminInvoicesBulkRefund: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Refund
   * @description Handled by AdminBillingController::refund. Requires ability `admin`.
   */
  postAdminInvoicesIdRefund: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Regenerate
   * @description Handled by AdminLeaderboardController::regenerate. Requires ability `admin`.
   */
  postAdminLeaderboardsRegenerate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Snapshots
   * @description Handled by AdminLeaderboardController::snapshots. Requires ability `admin`.
   */
  getAdminLeaderboardsSnapshots: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Get resource
   * @description Handled by AdminOrgController::show. Requires ability `admin`.
   */
  getAdminOrg: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Update resource
   * @description Handled by AdminOrgController::update. Requires ability `admin`.
   */
  patchAdminOrg: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Summary
   * @description Handled by AdminOrgController::summary. Requires ability `admin`.
   */
  getAdminOrgSummary: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Metrics
   * @description Handled by AdminOverviewController::metrics. Requires ability `admin`.
   */
  getAdminOverview: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Plans
   * @description Handled by AdminBillingController::plans. Requires ability `admin`.
   */
  getAdminPlans: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Upsert Plan
   * @description Handled by AdminBillingController::upsertPlan. Requires ability `admin`.
   */
  postAdminPlans: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * All
   * @description Handled by AdminSettingsController::all. Requires ability `admin`.
   */
  getAdminSettings: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Upsert
   * @description Handled by AdminSettingsController::upsert. Requires ability `admin`.
   */
  postAdminSettings: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * List resources
   * @description Handled by AdminSubmissionController::index. Requires ability `admin`.
   */
  getAdminSubmissions: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Bulk Update
   * @description Handled by AdminSubmissionController::bulkUpdate. Requires ability `admin`.
   */
  postAdminSubmissionsBulkUpdate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Queue Ping
   * @description Handled by AdminToolsController::queuePing. Requires ability `admin`.
   */
  getAdminToolsQueuePing: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * S3 Health
   * @description Handled by AdminToolsController::s3Health. Requires ability `admin`.
   */
  getAdminToolsS3Health: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Sign S3 Upload
   * @description Handled by AdminToolsController::signS3Upload. Requires ability `admin`.
   */
  postAdminToolsS3Sign: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Test Paystack Webhook
   * @description Handled by AdminToolsController::testPaystackWebhook. Requires ability `admin`.
   */
  postAdminToolsTestWebhook: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Verify Paystack Ref
   * @description Handled by AdminToolsController::verifyPaystackRef. Requires ability `admin`.
   */
  postAdminToolsVerify: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * List resources
   * @description Handled by AdminUserController::index. Requires ability `admin`.
   */
  getAdminUsers: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Bulk Role
   * @description Handled by AdminUserController::bulkRole. Requires ability `admin`.
   */
  postAdminUsersBulkRole: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Impersonate
   * @description Handled by AdminUserController::impersonate. Requires ability `admin`.
   */
  postAdminUsersIdImpersonate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Update Role
   * @description Handled by AdminUserController::updateRole. Requires ability `admin`.
   */
  putAdminUsersIdRole: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Update Role
   * @description Handled by AdminUserController::updateRole. Requires ability `admin`.
   */
  postAdminUsersIdRole: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Update Status
   * @description Handled by AdminUserController::updateStatus. Requires ability `admin`.
   */
  putAdminUsersIdStatus: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Update Status
   * @description Handled by AdminUserController::updateStatus. Requires ability `admin`.
   */
  putAdminUsersIdSuspend: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * List resources
   * @description Handled by AdminWhisperController::index. Requires ability `admin`.
   */
  getAdminWhisperJobs: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Get resource
   * @description Handled by AdminWhisperController::show. Requires ability `admin`.
   */
  getAdminWhisperJobsId: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Get Capabilities
   * @description Handled by AIFeedbackController::getCapabilities.
   */
  getAiFeedbackCapabilities: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * List resources
   * @description Handled by AssignmentController::index.
   */
  getAssignments: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Create resource
   * @description Handled by AssignmentController::store.
   */
  postAssignments: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get resource
   * @description Handled by AssignmentController::show.
   */
  getAssignmentsAssignment: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Update resource
   * @description Handled by AssignmentController::update.
   */
  putAssignmentsAssignment: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Delete resource
   * @description Handled by AssignmentController::destroy.
   */
  deleteAssignmentsAssignment: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Update resource
   * @description Handled by AssignmentController::update.
   */
  patchAssignmentsAssignment: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Duplicate
   * @description Handled by AssignmentController::duplicate.
   */
  postAssignmentsAssignmentDuplicate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * List resources
   * @description Handled by HotspotController::index.
   */
  getAssignmentsAssignmentHotspots: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Create resource
   * @description Handled by HotspotController::store.
   */
  postAssignmentsAssignmentHotspots: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Publish
   * @description Handled by AssignmentController::publish.
   */
  postAssignmentsAssignmentPublish: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Stats
   * @description Handled by AssignmentController::getStats.
   */
  getAssignmentsAssignmentStats: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get Submissions
   * @description Handled by AssignmentController::getSubmissions.
   */
  getAssignmentsAssignmentSubmissions: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Unpublish
   * @description Handled by AssignmentController::unpublish.
   */
  postAssignmentsAssignmentUnpublish: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Resend Verification Email
   * @description Handled by AuthController::resendVerificationEmail.
   */
  postAuthEmailResend: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Check Email Verification
   * @description Handled by AuthController::checkEmailVerification.
   */
  getAuthEmailVerificationStatus: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Verify Email
   * @description Handled by AuthController::verifyEmail.
   */
  postAuthEmailVerify: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Forgot Password
   * @description Handled by AuthController::forgotPassword.
   */
  postAuthForgotPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Login
   * @description Handled by AuthController::login.
   */
  postAuthLogin: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Logout
   * @description Handled by AuthController::logout.
   */
  postAuthLogout: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * App\ Http\ Controllers\ Auth\ Me Controller
   * @description Handled by App\Http\Controllers\Auth\MeController.
   */
  getAuthMe: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Refresh
   * @description Handled by AuthController::refresh.
   */
  postAuthRefresh: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Register
   * @description Handled by AuthController::register.
   */
  postAuthRegister: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Reset Password
   * @description Handled by AuthController::resetPassword.
   */
  postAuthResetPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * User
   * @description Handled by AuthController::user.
   */
  getAuthUser: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Closure
   * @description Handled by inline closure.
   */
  postBroadcastingAuth: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * List resources
   * @description Handled by ClassController::index.
   */
  getClasses: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Create resource
   * @description Handled by ClassController::store.
   */
  postClasses: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get resource
   * @description Handled by ClassController::show.
   */
  getClassesClass: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Update resource
   * @description Handled by ClassController::update.
   */
  putClassesClass: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Delete resource
   * @description Handled by ClassController::destroy.
   */
  deleteClassesClass: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Update resource
   * @description Handled by ClassController::update.
   */
  patchClassesClass: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Invite Student
   * @description Handled by ClassController::inviteStudent.
   */
  postClassesClassInvite: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Members
   * @description Handled by ClassController::getMembers.
   */
  getClassesClassMembers: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Add Member
   * @description Handled by ClassController::addMember.
   */
  postClassesClassMembers: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Remove Member
   * @description Handled by ClassController::removeMember.
   */
  deleteClassesClassMembersUser: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get Stats
   * @description Handled by ClassController::getStats.
   */
  getClassesClassStats: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Student Feedback
   * @description Handled by FeedbackController::studentFeedback.
   */
  getFeedback: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Create resource
   * @description Handled by FeedbackController::store.
   */
  postFeedbackSubmissionsSubmission: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Update resource
   * @description Handled by FeedbackController::update.
   */
  putFeedbackFeedback: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Delete resource
   * @description Handled by FeedbackController::destroy.
   */
  deleteFeedbackFeedback: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Upload Audio
   * @description Handled by FeedbackController::uploadAudio.
   */
  postFeedbackFeedbackAudio: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Achievements
   * @description Handled by HasanatController::getAchievements.
   */
  getHasanatAchievements: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Award Hasanat
   * @description Handled by HasanatController::awardHasanat.
   */
  postHasanatAward: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Capabilities
   * @description Handled by HasanatController::getCapabilities.
   */
  getHasanatCapabilities: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get History
   * @description Handled by HasanatController::getHistory.
   */
  getHasanatHistory: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get Leaderboard
   * @description Handled by HasanatController::getLeaderboard.
   */
  getHasanatLeaderboard: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get Progress
   * @description Handled by HasanatController::getProgress.
   */
  getHasanatProgress: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Redeem Reward
   * @description Handled by HasanatController::redeemReward.
   */
  postHasanatRedeem: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Rewards
   * @description Handled by HasanatController::getRewards.
   */
  getHasanatRewards: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Closure
   * @description Handled by inline closure.
   */
  getHealth: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
    };
  };
  /**
   * Get resource
   * @description Handled by HotspotController::show.
   */
  getHotspotsHotspot: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Update resource
   * @description Handled by HotspotController::update.
   */
  putHotspotsHotspot: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Delete resource
   * @description Handled by HotspotController::destroy.
   */
  deleteHotspotsHotspot: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Update resource
   * @description Handled by HotspotController::update.
   */
  patchHotspotsHotspot: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Record Interaction
   * @description Handled by HotspotController::recordInteraction.
   */
  postHotspotsHotspotInteract: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Interactions
   * @description Handled by HotspotController::getInteractions.
   */
  getHotspotsHotspotInteractions: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get Stats
   * @description Handled by HotspotController::getStats.
   */
  getHotspotsHotspotStats: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * List resources
   * @description Handled by LeaderboardController::index.
   */
  getLeaderboard: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Class Leaderboard
   * @description Handled by LeaderboardController::classLeaderboard.
   */
  getLeaderboardClassClass: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Global Leaderboard
   * @description Handled by LeaderboardController::globalLeaderboard.
   */
  getLeaderboardGlobal: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Hasanat History
   * @description Handled by LeaderboardController::hasanatHistory.
   */
  getLeaderboardHasanatHistory: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Monthly Leaderboard
   * @description Handled by LeaderboardController::monthlyLeaderboard.
   */
  getLeaderboardMonthly: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Weekly Leaderboard
   * @description Handled by LeaderboardController::weeklyLeaderboard.
   */
  getLeaderboardWeekly: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Me
   * @description Handled by ProfileController::me.
   */
  getMe: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Signed Get
   * @description Handled by MediaController::signedGet.
   */
  getMediaSignedGet: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Signed Put
   * @description Handled by MediaController::signedPut.
   */
  getMediaSignedPut: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get Due Reviews
   * @description Handled by MemorizationController::getDueReviews.
   */
  getMemorizationDueReviews: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * List resources
   * @description Handled by MemorizationController::index.
   */
  getMemorizationPlans: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Create resource
   * @description Handled by MemorizationController::store.
   */
  postMemorizationPlans: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Plan Stats
   * @description Handled by MemorizationController::planStats.
   */
  getMemorizationPlansPlanStats: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Review Ayah
   * @description Handled by MemorizationController::reviewAyah.
   */
  postMemorizationReview: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * List resources
   * @description Handled by NotificationController::index.
   */
  getNotifications: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Mark All As Read
   * @description Handled by NotificationController::markAllAsRead.
   */
  postNotificationsMarkAllRead: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Mark As Read
   * @description Handled by NotificationController::markAsRead.
   */
  postNotificationsMarkRead: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Preferences
   * @description Handled by NotificationController::getPreferences.
   */
  getNotificationsPreferences: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Update Preferences
   * @description Handled by NotificationController::updatePreferences.
   */
  postNotificationsPreferences: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Delete All Read
   * @description Handled by NotificationController::deleteAllRead.
   */
  deleteNotificationsReadAll: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Unread Count
   * @description Handled by NotificationController::unreadCount.
   */
  getNotificationsUnreadCount: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get resource
   * @description Handled by NotificationController::show.
   */
  getNotificationsNotification: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Delete resource
   * @description Handled by NotificationController::destroy.
   */
  deleteNotificationsNotification: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Cancel Subscription
   * @description Handled by PaymentController::cancelSubscription.
   */
  postPaymentsCancelSubscription: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * History
   * @description Handled by PaymentController::history.
   */
  getPaymentsHistory: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Initialize
   * @description Handled by PaymentController::initialize.
   */
  postPaymentsInitialize: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Plans
   * @description Handled by PaymentController::plans.
   */
  getPaymentsPlans: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Subscription
   * @description Handled by PaymentController::subscription.
   */
  getPaymentsSubscription: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Upload Avatar
   * @description Handled by ProfileController::uploadAvatar.
   */
  postProfileAvatar: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Remove Avatar
   * @description Handled by ProfileController::removeAvatar.
   */
  deleteProfileAvatar: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Me
   * @description Handled by ProfileController::me.
   */
  getProfileMe: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Update resource
   * @description Handled by ProfileController::update.
   */
  putProfileMe: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * My Students
   * @description Handled by ProfileController::myStudents.
   */
  getProfileMyStudents: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * My Teachers
   * @description Handled by ProfileController::myTeachers.
   */
  getProfileMyTeachers: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Stats
   * @description Handled by ProfileController::stats.
   */
  getProfileStats: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Recitations
   * @description Handled by SurahController::recitations.
   */
  getQuranRecitations: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * List resources
   * @description Handled by SurahController::index.
   */
  getQuranSurahs: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get resource
   * @description Handled by SurahController::show.
   */
  getQuranSurahsId: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Ayahs
   * @description Handled by SurahController::ayahs.
   */
  getQuranSurahsIdAyahs: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get Ayah
   * @description Handled by SurahController::getAyah.
   */
  getQuranSurahsSurahIdAyahsAyahId: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get Reciters
   * @description Handled by ReaderController::getReciters.
   */
  getReaderReciters: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get State
   * @description Handled by ReaderController::getState.
   */
  getReaderState: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Save State
   * @description Handled by ReaderController::saveState.
   */
  postReaderState: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Status
   * @description Handled by RecitationController::status.
   */
  getRecitationsStatusId: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Submit
   * @description Handled by RecitationController::submit.
   */
  postRecitationsSubmit: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Upload Url
   * @description Handled by RecitationController::uploadUrl.
   */
  postRecitationsUploadUrl: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * List resources
   * @description Handled by ResourceController::index.
   */
  getResources: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Create resource
   * @description Handled by ResourceController::store.
   */
  postResources: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Download
   * @description Handled by ResourceController::download.
   */
  getResourcesIdDownload: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get resource
   * @description Handled by ResourceController::show.
   */
  getResourcesResource: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Update resource
   * @description Handled by ResourceController::update.
   */
  putResourcesResource: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Delete resource
   * @description Handled by ResourceController::destroy.
   */
  deleteResourcesResource: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Update resource
   * @description Handled by ResourceController::update.
   */
  patchResourcesResource: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Download
   * @description Handled by ResourceController::download.
   */
  getResourcesResourceDownload: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Add To Queue
   * @description Handled by SrsController::addToQueue.
   */
  postSrsAdd: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Due Items
   * @description Handled by SrsController::getDueItems.
   */
  getSrsDue: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get Queue
   * @description Handled by SrsController::getQueue.
   */
  getSrsQueue: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Submit Review
   * @description Handled by SrsController::submitReview.
   */
  postSrsReview: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Stats
   * @description Handled by SrsController::getStats.
   */
  getSrsStats: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Remove From Queue
   * @description Handled by SrsController::removeFromQueue.
   */
  deleteSrsId: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Reset Item
   * @description Handled by SrsController::resetItem.
   */
  postSrsIdReset: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Memorization Analytics
   * @description Handled by MemorizationController::getMemorizationAnalytics.
   */
  getStudentAdminMemorizationAnalytics: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Student Assignments
   * @description Handled by AssignmentController::studentAssignments.
   */
  getStudentAssignments: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Ayah Of Day
   * @description Handled by ProfileController::ayahOfDay.
   */
  getStudentAyahOfDay: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Student Classes
   * @description Handled by ClassController::studentClasses.
   */
  getStudentClasses: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get Dashboard
   * @description Handled by StudentController::getDashboard.
   */
  getStudentDashboard: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Student Leaderboard
   * @description Handled by LeaderboardController::studentLeaderboard.
   */
  getStudentLeaderboard: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get Leaderboard Friends
   * @description Handled by StudentController::getLeaderboardFriends.
   */
  getStudentLeaderboardFriends: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Send Leaderboard Invite
   * @description Handled by StudentController::sendLeaderboardInvite.
   */
  postStudentLeaderboardInvite: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Leaderboard Invites
   * @description Handled by StudentController::getLeaderboardInvites.
   */
  getStudentLeaderboardInvites: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Respond To Leaderboard Invite
   * @description Handled by StudentController::respondToLeaderboardInvite.
   */
  postStudentLeaderboardInvitesInviteRespond: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Update Leaderboard Preferences
   * @description Handled by StudentController::updateLeaderboardPreferences.
   */
  putStudentLeaderboardPreferences: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Send Quran Reminder
   * @description Handled by StudentController::sendQuranReminder.
   */
  postStudentLeaderboardReminder: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Memorization Plan
   * @description Handled by ProfileController::getMemorizationPlan.
   */
  getStudentMemorizationPlan: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Update Memorization Plan
   * @description Handled by ProfileController::updateMemorizationPlan.
   */
  postStudentMemorizationPlan: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Due Reviews
   * @description Handled by MemorizationController::getDueReviews.
   */
  getStudentMemorizationDueReviews: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * List resources
   * @description Handled by MemorizationController::index.
   */
  getStudentMemorizationPlans: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Create resource
   * @description Handled by MemorizationController::store.
   */
  postStudentMemorizationPlans: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Plan Stats
   * @description Handled by MemorizationController::planStats.
   */
  getStudentMemorizationPlansPlanStats: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Review Ayah
   * @description Handled by MemorizationController::reviewAyah.
   */
  postStudentMemorizationReview: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Preferences
   * @description Handled by ProfileController::getPreferences.
   */
  getStudentPreferences: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Update Preferences
   * @description Handled by ProfileController::updatePreferences.
   */
  postStudentPreferences: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Student Progress
   * @description Handled by ProfileController::studentProgress.
   */
  getStudentProgress: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get Bookmarks
   * @description Handled by ProfileController::getBookmarks.
   */
  getStudentReaderBookmarks: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Add Bookmark
   * @description Handled by ProfileController::addBookmark.
   */
  postStudentReaderBookmarks: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Remove Bookmark
   * @description Handled by ProfileController::removeBookmark.
   */
  deleteStudentReaderBookmarksId: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Mark Ayah Read
   * @description Handled by ProfileController::markAyahRead.
   */
  postStudentReaderMarkRead: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Reader State
   * @description Handled by ProfileController::getReaderState.
   */
  getStudentReaderState: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Save Reader State
   * @description Handled by ProfileController::saveReaderState.
   */
  postStudentReaderState: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Recent Reads
   * @description Handled by ProfileController::recentReads.
   */
  getStudentRecentReads: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Update Recitation
   * @description Handled by StudentController::updateRecitation.
   */
  postStudentRecitation: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Update Recitation
   * @description Handled by StudentController::updateRecitation.
   */
  postStudentRecite: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Recommendations
   * @description Handled by StudentController::getRecommendations.
   */
  getStudentRecommendations: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get Queue
   * @description Handled by SrsController::getQueue.
   */
  getStudentSrsQueue: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Submit Review
   * @description Handled by SrsController::submitReview.
   */
  postStudentSrsReview: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Student Stats
   * @description Handled by ProfileController::studentStats.
   */
  getStudentStats: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Student Submissions
   * @description Handled by SubmissionController::studentSubmissions.
   */
  getStudentSubmissions: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Create resource
   * @description Handled by SubmissionController::store.
   */
  postStudentSubmissions: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Student Progress
   * @description Handled by MemorizationController::getStudentProgress.
   */
  getStudentTeacherMemorizationProgress: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get Student Stats
   * @description Handled by MemorizationController::getStudentStats.
   */
  getStudentTeacherMemorizationStats: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get Memorization Analytics
   * @description Handled by StudentController::getMemorizationAnalytics.
   */
  getStudentTeacherMemorizationAnalytics: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get Audio Reviews
   * @description Handled by StudentController::getAudioReviews.
   */
  getStudentTeacherMemorizationAudioReviews: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Review Audio Submission
   * @description Handled by StudentController::reviewAudioSubmission.
   */
  postStudentTeacherMemorizationReviewsReviewIdAction: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Memorization Students
   * @description Handled by StudentController::getMemorizationStudents.
   */
  getStudentTeacherMemorizationStudents: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Get Weekly Progress
   * @description Handled by StudentController::getWeeklyProgress.
   */
  getStudentWeeklyProgress: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * List resources
   * @description Handled by SubmissionController::index.
   */
  getSubmissions: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Create resource
   * @description Handled by SubmissionController::store.
   */
  postSubmissions: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Generate Feedback
   * @description Handled by AIFeedbackController::generateFeedback.
   */
  postSubmissionsAiFeedback: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get resource
   * @description Handled by SubmissionController::show.
   */
  getSubmissionsSubmission: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Update resource
   * @description Handled by SubmissionController::update.
   */
  putSubmissionsSubmission: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Update resource
   * @description Handled by SubmissionController::update.
   */
  patchSubmissionsSubmission: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Feedback History
   * @description Handled by AIFeedbackController::getFeedbackHistory.
   */
  getSubmissionsSubmissionAiFeedback: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Regenerate Feedback
   * @description Handled by AIFeedbackController::regenerateFeedback.
   */
  postSubmissionsSubmissionAiFeedbackRegenerate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Upload Audio
   * @description Handled by SubmissionController::uploadAudio.
   */
  postSubmissionsSubmissionAudio: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Delete Audio
   * @description Handled by SubmissionController::deleteAudio.
   */
  deleteSubmissionsSubmissionAudio: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Resubmit
   * @description Handled by SubmissionController::resubmit.
   */
  postSubmissionsSubmissionResubmit: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Submit For Grading
   * @description Handled by SubmissionController::submitForGrading.
   */
  postSubmissionsSubmissionSubmit: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Analytics
   * @description Handled by TajweedController::getAnalytics. Requires ability `teacher-or-admin`.
   */
  getTajweedAnalytics: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Analyze Recitation
   * @description Handled by TajweedController::analyzeRecitation.
   */
  postTajweedAnalyze: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Analysis History
   * @description Handled by TajweedController::getAnalysisHistory.
   */
  getTajweedHistory: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Reprocess Analysis
   * @description Handled by TajweedController::reprocessAnalysis. Requires ability `teacher-or-admin`.
   */
  postTajweedReprocessJobId: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Settings
   * @description Handled by TajweedController::getSettings.
   */
  getTajweedSettings: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Update Settings
   * @description Handled by TajweedController::updateSettings. Requires ability `admin`.
   */
  postTajweedSettings: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Get Analysis Status
   * @description Handled by TajweedController::getAnalysisStatus.
   */
  getTajweedStatusJobId: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * List resources
   * @description Handled by TeacherAnalyticsController::index. Requires role `teacher`.
   */
  getTeacherAnalytics: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Update Analytics
   * @description Handled by TeacherController::updateAnalytics. Requires role `teacher`.
   */
  postTeacherAnalyticsUpdate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Broadcast Message
   * @description Handled by ProfileController::broadcastMessage. Requires role `teacher`.
   */
  postTeacherBroadcast: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Teacher Classes
   * @description Handled by ProfileController::teacherClasses. Requires role `teacher`.
   */
  getTeacherClasses: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Get Classes Overview
   * @description Handled by TeacherController::getClassesOverview. Requires role `teacher`.
   */
  getTeacherClassesOverview: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Get Dashboard Data
   * @description Handled by TeacherController::getDashboardData. Requires role `teacher`.
   */
  getTeacherDashboard: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Get Notifications
   * @description Handled by TeacherController::getNotifications. Requires role `teacher`.
   */
  getTeacherDashboardNotifications: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Get Game Analytics
   * @description Handled by TeacherController::getGameAnalytics. Requires role `teacher`.
   */
  getTeacherGameAnalytics: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Get Notifications
   * @description Handled by TeacherController::getNotifications. Requires role `teacher`.
   */
  getTeacherNotifications: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Mark Notification As Read
   * @description Handled by TeacherController::markNotificationAsRead. Requires role `teacher`.
   */
  postTeacherNotificationsNotificationIdRead: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Recent Submissions
   * @description Handled by ProfileController::recentSubmissions. Requires role `teacher`.
   */
  getTeacherRecentSubmissions: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Today Schedule
   * @description Handled by ProfileController::todaySchedule. Requires role `teacher`.
   */
  getTeacherSchedule: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Teacher Stats
   * @description Handled by ProfileController::teacherStats. Requires role `teacher`.
   */
  getTeacherStats: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Get Student Progress
   * @description Handled by TeacherController::getStudentProgress. Requires role `teacher`.
   */
  getTeacherStudentProgress: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Teacher Students
   * @description Handled by ProfileController::teacherStudents. Requires role `teacher`.
   */
  getTeacherStudents: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Get Students Progress
   * @description Handled by TeacherController::getStudentsProgress. Requires role `teacher`.
   */
  getTeacherStudentsProgress: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Move Students Level
   * @description Handled by ProfileController::moveStudentsLevel. Requires role `teacher`.
   */
  postTeacherStudentsMoveLevel: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Grade Submission
   * @description Handled by TeacherController::gradeSubmission. Requires role `teacher`.
   */
  postTeacherSubmissionsSubmissionGrade: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      403: components["responses"]["Forbidden"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Closure
   * @description Handled by inline closure.
   */
  getTestAuth: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Upload Audio
   * @description Handled by FileUploadController::uploadAudio.
   */
  postUploadAudio: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Delete File
   * @description Handled by FileUploadController::deleteFile.
   */
  deleteUploadFile: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Upload Image
   * @description Handled by FileUploadController::uploadImage.
   */
  postUploadImage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Upload Audio
   * @description Handled by SubmissionController::uploadAudio.
   */
  postUploadsAudio: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Delete File
   * @description Handled by AssignmentController::deleteFile.
   */
  deleteUploadsFileFile: {
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
    };
  };
  /**
   * Upload Image
   * @description Handled by AssignmentController::uploadImage.
   */
  postUploadsImage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      401: components["responses"]["Unauthenticated"];
      422: components["responses"]["ValidationError"];
    };
  };
  /**
   * Paystack Webhook
   * @description Handled by PaymentController::paystackWebhook.
   */
  postWebhooksPaystack: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenericPayload"];
      };
    };
    responses: {
      /** @description Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericResponse"];
        };
      };
      422: components["responses"]["ValidationError"];
    };
  };
}
